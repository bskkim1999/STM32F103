
Test_LL_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002524  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002630  08002630  00012630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002648  08002648  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002648  08002648  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002648  08002648  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002648  08002648  00012648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800264c  0800264c  0001264c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000084  080026d4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  080026d4  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY
 13 .debug_info   000045fa  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012c5  00000000  00000000  000246ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e8  00000000  00000000  000259b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000051a  00000000  00000000  00026098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001274d  00000000  00000000  000265b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005561  00000000  00000000  00038cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000604b8  00000000  00000000  0003e260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001bc4  00000000  00000000  0009e718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000a02dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08002618 	.word	0x08002618

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08002618 	.word	0x08002618

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__NVIC_GetPriorityGrouping+0x18>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	0a1b      	lsrs	r3, r3, #8
 800019e:	f003 0307 	and.w	r3, r3, #7
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	e000ed00 	.word	0xe000ed00

080001b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	db0b      	blt.n	80001da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	f003 021f 	and.w	r2, r3, #31
 80001c8:	4906      	ldr	r1, [pc, #24]	; (80001e4 <__NVIC_EnableIRQ+0x34>)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	095b      	lsrs	r3, r3, #5
 80001d0:	2001      	movs	r0, #1
 80001d2:	fa00 f202 	lsl.w	r2, r0, r2
 80001d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	e000e100 	.word	0xe000e100

080001e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db0a      	blt.n	8000212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	490c      	ldr	r1, [pc, #48]	; (8000234 <__NVIC_SetPriority+0x4c>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	0112      	lsls	r2, r2, #4
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	440b      	add	r3, r1
 800020c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000210:	e00a      	b.n	8000228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4908      	ldr	r1, [pc, #32]	; (8000238 <__NVIC_SetPriority+0x50>)
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f003 030f 	and.w	r3, r3, #15
 800021e:	3b04      	subs	r3, #4
 8000220:	0112      	lsls	r2, r2, #4
 8000222:	b2d2      	uxtb	r2, r2
 8000224:	440b      	add	r3, r1
 8000226:	761a      	strb	r2, [r3, #24]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800023c:	b480      	push	{r7}
 800023e:	b089      	sub	sp, #36	; 0x24
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	f003 0307 	and.w	r3, r3, #7
 800024e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000250:	69fb      	ldr	r3, [r7, #28]
 8000252:	f1c3 0307 	rsb	r3, r3, #7
 8000256:	2b04      	cmp	r3, #4
 8000258:	bf28      	it	cs
 800025a:	2304      	movcs	r3, #4
 800025c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	3304      	adds	r3, #4
 8000262:	2b06      	cmp	r3, #6
 8000264:	d902      	bls.n	800026c <NVIC_EncodePriority+0x30>
 8000266:	69fb      	ldr	r3, [r7, #28]
 8000268:	3b03      	subs	r3, #3
 800026a:	e000      	b.n	800026e <NVIC_EncodePriority+0x32>
 800026c:	2300      	movs	r3, #0
 800026e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000270:	f04f 32ff 	mov.w	r2, #4294967295
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	43da      	mvns	r2, r3
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	401a      	ands	r2, r3
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000284:	f04f 31ff 	mov.w	r1, #4294967295
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	fa01 f303 	lsl.w	r3, r1, r3
 800028e:	43d9      	mvns	r1, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000294:	4313      	orrs	r3, r2
         );
}
 8000296:	4618      	mov	r0, r3
 8000298:	3724      	adds	r7, #36	; 0x24
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <LL_RCC_HSI_Enable+0x18>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a03      	ldr	r2, [pc, #12]	; (80002b8 <LL_RCC_HSI_Enable+0x18>)
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	40021000 	.word	0x40021000

080002bc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <LL_RCC_HSI_IsReady+0x20>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f003 0302 	and.w	r3, r3, #2
 80002c8:	2b02      	cmp	r3, #2
 80002ca:	bf0c      	ite	eq
 80002cc:	2301      	moveq	r3, #1
 80002ce:	2300      	movne	r3, #0
 80002d0:	b2db      	uxtb	r3, r3
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000

080002e0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	00db      	lsls	r3, r3, #3
 80002f4:	4903      	ldr	r1, [pc, #12]	; (8000304 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80002f6:	4313      	orrs	r3, r2
 80002f8:	600b      	str	r3, [r1, #0]
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	40021000 	.word	0x40021000

08000308 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <LL_RCC_SetSysClkSource+0x24>)
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	f023 0203 	bic.w	r2, r3, #3
 8000318:	4904      	ldr	r1, [pc, #16]	; (800032c <LL_RCC_SetSysClkSource+0x24>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4313      	orrs	r3, r2
 800031e:	604b      	str	r3, [r1, #4]
}
 8000320:	bf00      	nop
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000

08000330 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <LL_RCC_GetSysClkSource+0x14>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	f003 030c 	and.w	r3, r3, #12
}
 800033c:	4618      	mov	r0, r3
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	40021000 	.word	0x40021000

08000348 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <LL_RCC_SetAHBPrescaler+0x24>)
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000358:	4904      	ldr	r1, [pc, #16]	; (800036c <LL_RCC_SetAHBPrescaler+0x24>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4313      	orrs	r3, r2
 800035e:	604b      	str	r3, [r1, #4]
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <LL_RCC_SetAPB1Prescaler+0x24>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000380:	4904      	ldr	r1, [pc, #16]	; (8000394 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4313      	orrs	r3, r2
 8000386:	604b      	str	r3, [r1, #4]
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000

08000398 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80003a8:	4904      	ldr	r1, [pc, #16]	; (80003bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4313      	orrs	r3, r2
 80003ae:	604b      	str	r3, [r1, #4]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000

080003c0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80003c4:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <LL_RCC_PLL_Enable+0x18>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a03      	ldr	r2, [pc, #12]	; (80003d8 <LL_RCC_PLL_Enable+0x18>)
 80003ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003ce:	6013      	str	r3, [r2, #0]
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	40021000 	.word	0x40021000

080003dc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <LL_RCC_PLL_IsReady+0x20>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80003ec:	bf0c      	ite	eq
 80003ee:	2301      	moveq	r3, #1
 80003f0:	2300      	movne	r3, #0
 80003f2:	b2db      	uxtb	r3, r3
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40021000 	.word	0x40021000

08000400 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	430b      	orrs	r3, r1
 800041c:	4903      	ldr	r1, [pc, #12]	; (800042c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800041e:	4313      	orrs	r3, r2
 8000420:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40021000 	.word	0x40021000

08000430 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000430:	b480      	push	{r7}
 8000432:	b085      	sub	sp, #20
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <LL_APB1_GRP1_EnableClock+0x2c>)
 800043a:	69da      	ldr	r2, [r3, #28]
 800043c:	4907      	ldr	r1, [pc, #28]	; (800045c <LL_APB1_GRP1_EnableClock+0x2c>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000446:	69da      	ldr	r2, [r3, #28]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4013      	ands	r3, r2
 800044c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800044e:	68fb      	ldr	r3, [r7, #12]
}
 8000450:	bf00      	nop
 8000452:	3714      	adds	r7, #20
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000468:	4b08      	ldr	r3, [pc, #32]	; (800048c <LL_APB2_GRP1_EnableClock+0x2c>)
 800046a:	699a      	ldr	r2, [r3, #24]
 800046c:	4907      	ldr	r1, [pc, #28]	; (800048c <LL_APB2_GRP1_EnableClock+0x2c>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4313      	orrs	r3, r2
 8000472:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000476:	699a      	ldr	r2, [r3, #24]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4013      	ands	r3, r2
 800047c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800047e:	68fb      	ldr	r3, [r7, #12]
}
 8000480:	bf00      	nop
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40021000 	.word	0x40021000

08000490 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <LL_FLASH_SetLatency+0x24>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f023 0207 	bic.w	r2, r3, #7
 80004a0:	4904      	ldr	r1, [pc, #16]	; (80004b4 <LL_FLASH_SetLatency+0x24>)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	600b      	str	r3, [r1, #0]
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40022000 	.word	0x40022000

080004b8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80004bc:	4b03      	ldr	r3, [pc, #12]	; (80004cc <LL_FLASH_GetLatency+0x14>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f003 0307 	and.w	r3, r3, #7
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	40022000 	.word	0x40022000

080004d0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f043 0201 	orr.w	r2, r3, #1
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	601a      	str	r2, [r3, #0]
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr

080004ee <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f023 0201 	bic.w	r2, r3, #1
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	601a      	str	r2, [r3, #0]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	601a      	str	r2, [r3, #0]
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr

0800052a <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800052a:	b480      	push	{r7}
 800052c:	b083      	sub	sp, #12
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
 8000532:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800053c:	f023 0307 	bic.w	r3, r3, #7
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	431a      	orrs	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	609a      	str	r2, [r3, #8]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
 800055a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	431a      	orrs	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	605a      	str	r2, [r3, #4]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr

08000576 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	609a      	str	r2, [r3, #8]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	60da      	str	r2, [r3, #12]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	691b      	ldr	r3, [r3, #16]
 80005be:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	615a      	str	r2, [r3, #20]
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80005dc:	b490      	push	{r4, r7}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	461a      	mov	r2, r3
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	0e1b      	lsrs	r3, r3, #24
 80005f0:	4413      	add	r3, r2
 80005f2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80005f4:	6822      	ldr	r2, [r4, #0]
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	fa93 f3a3 	rbit	r3, r3
 8000600:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	fab3 f383 	clz	r3, r3
 8000608:	b2db      	uxtb	r3, r3
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	210f      	movs	r1, #15
 800060e:	fa01 f303 	lsl.w	r3, r1, r3
 8000612:	43db      	mvns	r3, r3
 8000614:	401a      	ands	r2, r3
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	fa93 f3a3 	rbit	r3, r3
 8000620:	61bb      	str	r3, [r7, #24]
  return result;
 8000622:	69bb      	ldr	r3, [r7, #24]
 8000624:	fab3 f383 	clz	r3, r3
 8000628:	b2db      	uxtb	r3, r3
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	6879      	ldr	r1, [r7, #4]
 800062e:	fa01 f303 	lsl.w	r3, r1, r3
 8000632:	4313      	orrs	r3, r2
 8000634:	6023      	str	r3, [r4, #0]
}
 8000636:	bf00      	nop
 8000638:	3720      	adds	r7, #32
 800063a:	46bd      	mov	sp, r7
 800063c:	bc90      	pop	{r4, r7}
 800063e:	4770      	bx	lr

08000640 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	b29a      	uxth	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	611a      	str	r2, [r3, #16]
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr

0800065e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800065e:	b480      	push	{r7}
 8000660:	b083      	sub	sp, #12
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
 8000666:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	0a1b      	lsrs	r3, r3, #8
 800066c:	b29a      	uxth	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	615a      	str	r2, [r3, #20]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr

0800067c <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 800068a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800068e:	6053      	str	r3, [r2, #4]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	40010000 	.word	0x40010000

0800069c <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80006a6:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <LL_GPIO_AF_SetEXTISource+0x58>)
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	3302      	adds	r3, #2
 80006ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	0c1b      	lsrs	r3, r3, #16
 80006b6:	43db      	mvns	r3, r3
 80006b8:	ea02 0103 	and.w	r1, r2, r3
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	0c1b      	lsrs	r3, r3, #16
 80006c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	fa93 f3a3 	rbit	r3, r3
 80006c8:	60bb      	str	r3, [r7, #8]
  return result;
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	fab3 f383 	clz	r3, r3
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	461a      	mov	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	fa03 f202 	lsl.w	r2, r3, r2
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <LL_GPIO_AF_SetEXTISource+0x58>)
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	430a      	orrs	r2, r1
 80006e2:	3302      	adds	r3, #2
 80006e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40010000 	.word	0x40010000

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80006fe:	2001      	movs	r0, #1
 8000700:	f7ff feae 	bl	8000460 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000704:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000708:	f7ff fe92 	bl	8000430 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800070c:	2003      	movs	r0, #3
 800070e:	f7ff fd1d 	bl	800014c <__NVIC_SetPriorityGrouping>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000712:	f7ff ffb3 	bl	800067c <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000716:	f000 f8bd 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071a:	f000 f983 	bl	8000a24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800071e:	f000 f92b 	bl	8000978 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000722:	f000 f8f7 	bl	8000914 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  int count=0;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //row:0
	  write_serial_in_parallel_out_register_plus(0b10000000);
 800072a:	2080      	movs	r0, #128	; 0x80
 800072c:	f000 f9fe 	bl	8000b2c <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard_yellow, 0));
 8000730:	2100      	movs	r1, #0
 8000732:	4856      	ldr	r0, [pc, #344]	; (800088c <main+0x194>)
 8000734:	f000 fe12 	bl	800135c <rowToBinary>
 8000738:	4603      	mov	r3, r0
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fb52 	bl	8000de4 <write_serial_in_parallel_out_register_minus_yellow>
	  write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard_red, 0));
 8000740:	2100      	movs	r1, #0
 8000742:	4853      	ldr	r0, [pc, #332]	; (8000890 <main+0x198>)
 8000744:	f000 fe0a 	bl	800135c <rowToBinary>
 8000748:	4603      	mov	r3, r0
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fc9c 	bl	8001088 <write_serial_in_parallel_out_register_minus_red>
	  LL_mDelay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f001 ff0b 	bl	800256c <LL_mDelay>
	  //row:1
	  write_serial_in_parallel_out_register_plus(0b01000000);
 8000756:	2040      	movs	r0, #64	; 0x40
 8000758:	f000 f9e8 	bl	8000b2c <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard_yellow, 1));
 800075c:	2101      	movs	r1, #1
 800075e:	484b      	ldr	r0, [pc, #300]	; (800088c <main+0x194>)
 8000760:	f000 fdfc 	bl	800135c <rowToBinary>
 8000764:	4603      	mov	r3, r0
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fb3c 	bl	8000de4 <write_serial_in_parallel_out_register_minus_yellow>
	  write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard_red, 1));
 800076c:	2101      	movs	r1, #1
 800076e:	4848      	ldr	r0, [pc, #288]	; (8000890 <main+0x198>)
 8000770:	f000 fdf4 	bl	800135c <rowToBinary>
 8000774:	4603      	mov	r3, r0
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fc86 	bl	8001088 <write_serial_in_parallel_out_register_minus_red>
	  LL_mDelay(1);
 800077c:	2001      	movs	r0, #1
 800077e:	f001 fef5 	bl	800256c <LL_mDelay>
	  //row:2
	  write_serial_in_parallel_out_register_plus(0b00100000);
 8000782:	2020      	movs	r0, #32
 8000784:	f000 f9d2 	bl	8000b2c <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard_yellow, 2));
 8000788:	2102      	movs	r1, #2
 800078a:	4840      	ldr	r0, [pc, #256]	; (800088c <main+0x194>)
 800078c:	f000 fde6 	bl	800135c <rowToBinary>
 8000790:	4603      	mov	r3, r0
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fb26 	bl	8000de4 <write_serial_in_parallel_out_register_minus_yellow>
	  write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard_red, 2));
 8000798:	2102      	movs	r1, #2
 800079a:	483d      	ldr	r0, [pc, #244]	; (8000890 <main+0x198>)
 800079c:	f000 fdde 	bl	800135c <rowToBinary>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fc70 	bl	8001088 <write_serial_in_parallel_out_register_minus_red>
	  LL_mDelay(1);
 80007a8:	2001      	movs	r0, #1
 80007aa:	f001 fedf 	bl	800256c <LL_mDelay>
	  //row:3
	  write_serial_in_parallel_out_register_plus(0b00010000);
 80007ae:	2010      	movs	r0, #16
 80007b0:	f000 f9bc 	bl	8000b2c <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard_yellow, 3));
 80007b4:	2103      	movs	r1, #3
 80007b6:	4835      	ldr	r0, [pc, #212]	; (800088c <main+0x194>)
 80007b8:	f000 fdd0 	bl	800135c <rowToBinary>
 80007bc:	4603      	mov	r3, r0
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 fb10 	bl	8000de4 <write_serial_in_parallel_out_register_minus_yellow>
	  write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard_red, 3));
 80007c4:	2103      	movs	r1, #3
 80007c6:	4832      	ldr	r0, [pc, #200]	; (8000890 <main+0x198>)
 80007c8:	f000 fdc8 	bl	800135c <rowToBinary>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 fc5a 	bl	8001088 <write_serial_in_parallel_out_register_minus_red>
	  LL_mDelay(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f001 fec9 	bl	800256c <LL_mDelay>
	  //row:4
	  write_serial_in_parallel_out_register_plus(0b00001000);
 80007da:	2008      	movs	r0, #8
 80007dc:	f000 f9a6 	bl	8000b2c <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard_yellow, 4));
 80007e0:	2104      	movs	r1, #4
 80007e2:	482a      	ldr	r0, [pc, #168]	; (800088c <main+0x194>)
 80007e4:	f000 fdba 	bl	800135c <rowToBinary>
 80007e8:	4603      	mov	r3, r0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fafa 	bl	8000de4 <write_serial_in_parallel_out_register_minus_yellow>
	  write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard_red, 4));
 80007f0:	2104      	movs	r1, #4
 80007f2:	4827      	ldr	r0, [pc, #156]	; (8000890 <main+0x198>)
 80007f4:	f000 fdb2 	bl	800135c <rowToBinary>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 fc44 	bl	8001088 <write_serial_in_parallel_out_register_minus_red>
	  LL_mDelay(1);
 8000800:	2001      	movs	r0, #1
 8000802:	f001 feb3 	bl	800256c <LL_mDelay>
	  //row:5
	  write_serial_in_parallel_out_register_plus(0b00000100);
 8000806:	2004      	movs	r0, #4
 8000808:	f000 f990 	bl	8000b2c <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard_yellow, 5));
 800080c:	2105      	movs	r1, #5
 800080e:	481f      	ldr	r0, [pc, #124]	; (800088c <main+0x194>)
 8000810:	f000 fda4 	bl	800135c <rowToBinary>
 8000814:	4603      	mov	r3, r0
 8000816:	4618      	mov	r0, r3
 8000818:	f000 fae4 	bl	8000de4 <write_serial_in_parallel_out_register_minus_yellow>
	  write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard_red, 5));
 800081c:	2105      	movs	r1, #5
 800081e:	481c      	ldr	r0, [pc, #112]	; (8000890 <main+0x198>)
 8000820:	f000 fd9c 	bl	800135c <rowToBinary>
 8000824:	4603      	mov	r3, r0
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fc2e 	bl	8001088 <write_serial_in_parallel_out_register_minus_red>
	  LL_mDelay(1);
 800082c:	2001      	movs	r0, #1
 800082e:	f001 fe9d 	bl	800256c <LL_mDelay>
	  //row:6
	  write_serial_in_parallel_out_register_plus(0b00000010);
 8000832:	2002      	movs	r0, #2
 8000834:	f000 f97a 	bl	8000b2c <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard_yellow, 6));
 8000838:	2106      	movs	r1, #6
 800083a:	4814      	ldr	r0, [pc, #80]	; (800088c <main+0x194>)
 800083c:	f000 fd8e 	bl	800135c <rowToBinary>
 8000840:	4603      	mov	r3, r0
 8000842:	4618      	mov	r0, r3
 8000844:	f000 face 	bl	8000de4 <write_serial_in_parallel_out_register_minus_yellow>
	  write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard_red, 6));
 8000848:	2106      	movs	r1, #6
 800084a:	4811      	ldr	r0, [pc, #68]	; (8000890 <main+0x198>)
 800084c:	f000 fd86 	bl	800135c <rowToBinary>
 8000850:	4603      	mov	r3, r0
 8000852:	4618      	mov	r0, r3
 8000854:	f000 fc18 	bl	8001088 <write_serial_in_parallel_out_register_minus_red>
	  LL_mDelay(1);
 8000858:	2001      	movs	r0, #1
 800085a:	f001 fe87 	bl	800256c <LL_mDelay>
	  //row:7
	  write_serial_in_parallel_out_register_plus(0b00000001);
 800085e:	2001      	movs	r0, #1
 8000860:	f000 f964 	bl	8000b2c <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard_yellow, 7));
 8000864:	2107      	movs	r1, #7
 8000866:	4809      	ldr	r0, [pc, #36]	; (800088c <main+0x194>)
 8000868:	f000 fd78 	bl	800135c <rowToBinary>
 800086c:	4603      	mov	r3, r0
 800086e:	4618      	mov	r0, r3
 8000870:	f000 fab8 	bl	8000de4 <write_serial_in_parallel_out_register_minus_yellow>
	  write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard_red, 7));
 8000874:	2107      	movs	r1, #7
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <main+0x198>)
 8000878:	f000 fd70 	bl	800135c <rowToBinary>
 800087c:	4603      	mov	r3, r0
 800087e:	4618      	mov	r0, r3
 8000880:	f000 fc02 	bl	8001088 <write_serial_in_parallel_out_register_minus_red>
	  LL_mDelay(1);
 8000884:	2001      	movs	r0, #1
 8000886:	f001 fe71 	bl	800256c <LL_mDelay>
	  write_serial_in_parallel_out_register_plus(0b10000000);
 800088a:	e74e      	b.n	800072a <main+0x32>
 800088c:	20000000 	.word	0x20000000
 8000890:	20000040 	.word	0x20000040

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000898:	2002      	movs	r0, #2
 800089a:	f7ff fdf9 	bl	8000490 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800089e:	bf00      	nop
 80008a0:	f7ff fe0a 	bl	80004b8 <LL_FLASH_GetLatency>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d1fa      	bne.n	80008a0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80008aa:	2010      	movs	r0, #16
 80008ac:	f7ff fd18 	bl	80002e0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80008b0:	f7ff fcf6 	bl	80002a0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80008b4:	bf00      	nop
 80008b6:	f7ff fd01 	bl	80002bc <LL_RCC_HSI_IsReady>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d1fa      	bne.n	80008b6 <SystemClock_Config+0x22>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
 80008c0:	f44f 1160 	mov.w	r1, #3670016	; 0x380000
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff fd9b 	bl	8000400 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80008ca:	f7ff fd79 	bl	80003c0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80008ce:	bf00      	nop
 80008d0:	f7ff fd84 	bl	80003dc <LL_RCC_PLL_IsReady>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d1fa      	bne.n	80008d0 <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff fd34 	bl	8000348 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80008e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80008e4:	f7ff fd44 	bl	8000370 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff fd55 	bl	8000398 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80008ee:	2002      	movs	r0, #2
 80008f0:	f7ff fd0a 	bl	8000308 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80008f4:	bf00      	nop
 80008f6:	f7ff fd1b 	bl	8000330 <LL_RCC_GetSysClkSource>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b08      	cmp	r3, #8
 80008fe:	d1fa      	bne.n	80008f6 <SystemClock_Config+0x62>
  {

  }
  LL_Init1msTick(64000000);
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <SystemClock_Config+0x7c>)
 8000902:	f001 fe25 	bl	8002550 <LL_Init1msTick>
  LL_SetSystemCoreClock(64000000);
 8000906:	4802      	ldr	r0, [pc, #8]	; (8000910 <SystemClock_Config+0x7c>)
 8000908:	f001 fe54 	bl	80025b4 <LL_SetSystemCoreClock>
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	03d09000 	.word	0x03d09000

08000914 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000928:	2001      	movs	r0, #1
 800092a:	f7ff fd81 	bl	8000430 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 63;
 800092e:	233f      	movs	r3, #63	; 0x3f
 8000930:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8000936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800093a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000948:	f001 fc94 	bl	8002274 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800094c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000950:	f7ff fddc 	bl	800050c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000954:	2100      	movs	r1, #0
 8000956:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800095a:	f7ff fde6 	bl	800052a <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800095e:	2100      	movs	r1, #0
 8000960:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000964:	f7ff fdf5 	bl	8000552 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000968:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800096c:	f7ff fe03 	bl	8000576 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]
 800098e:	615a      	str	r2, [r3, #20]
 8000990:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	463b      	mov	r3, r7
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80009a0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80009a4:	f7ff fd44 	bl	8000430 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80009a8:	2004      	movs	r0, #4
 80009aa:	f7ff fd59 	bl	8000460 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80009ae:	f240 4304 	movw	r3, #1028	; 0x404
 80009b2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009b4:	2309      	movs	r3, #9
 80009b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	463b      	mov	r3, r7
 80009c2:	4619      	mov	r1, r3
 80009c4:	4815      	ldr	r0, [pc, #84]	; (8000a1c <MX_USART2_UART_Init+0xa4>)
 80009c6:	f001 faa6 	bl	8001f16 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80009ca:	f640 0308 	movw	r3, #2056	; 0x808
 80009ce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80009d0:	2304      	movs	r3, #4
 80009d2:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	4810      	ldr	r0, [pc, #64]	; (8000a1c <MX_USART2_UART_Init+0xa4>)
 80009da:	f001 fa9c 	bl	8001f16 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80009de:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80009e2:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80009f0:	230c      	movs	r3, #12
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4807      	ldr	r0, [pc, #28]	; (8000a20 <MX_USART2_UART_Init+0xa8>)
 8000a04:	f001 fd2a 	bl	800245c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART2_UART_Init+0xa8>)
 8000a0a:	f7ff fdd2 	bl	80005b2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000a0e:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_USART2_UART_Init+0xa8>)
 8000a10:	f7ff fdc0 	bl	8000594 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3730      	adds	r7, #48	; 0x30
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40010800 	.word	0x40010800
 8000a20:	40004400 	.word	0x40004400

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000a2a:	f107 0318 	add.w	r3, r7, #24
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000a42:	2004      	movs	r0, #4
 8000a44:	f7ff fd0c 	bl	8000460 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8000a48:	2010      	movs	r0, #16
 8000a4a:	f7ff fd09 	bl	8000460 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000a4e:	2008      	movs	r0, #8
 8000a50:	f7ff fd06 	bl	8000460 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, MR_3_Pin|MR_2_Pin|DSA_3_Pin|DSA_1_Pin);
 8000a54:	492f      	ldr	r1, [pc, #188]	; (8000b14 <MX_GPIO_Init+0xf0>)
 8000a56:	4830      	ldr	r0, [pc, #192]	; (8000b18 <MX_GPIO_Init+0xf4>)
 8000a58:	f7ff fe01 	bl	800065e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, CP_2_Pin|DSA_2_Pin|CP_1_Pin|MR_1_Pin);
 8000a5c:	492f      	ldr	r1, [pc, #188]	; (8000b1c <MX_GPIO_Init+0xf8>)
 8000a5e:	4830      	ldr	r0, [pc, #192]	; (8000b20 <MX_GPIO_Init+0xfc>)
 8000a60:	f7ff fdfd 	bl	800065e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CP_3_GPIO_Port, CP_3_Pin);
 8000a64:	f248 0180 	movw	r1, #32896	; 0x8080
 8000a68:	482e      	ldr	r0, [pc, #184]	; (8000b24 <MX_GPIO_Init+0x100>)
 8000a6a:	f7ff fdf8 	bl	800065e <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MR_3_Pin|MR_2_Pin|DSA_3_Pin|DSA_1_Pin;
 8000a6e:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <MX_GPIO_Init+0xf0>)
 8000a70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a72:	2301      	movs	r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a76:	2302      	movs	r3, #2
 8000a78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	4619      	mov	r1, r3
 8000a82:	4825      	ldr	r0, [pc, #148]	; (8000b18 <MX_GPIO_Init+0xf4>)
 8000a84:	f001 fa47 	bl	8001f16 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CP_2_Pin|DSA_2_Pin|CP_1_Pin|MR_1_Pin;
 8000a88:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <MX_GPIO_Init+0xf8>)
 8000a8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a90:	2302      	movs	r3, #2
 8000a92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4820      	ldr	r0, [pc, #128]	; (8000b20 <MX_GPIO_Init+0xfc>)
 8000a9e:	f001 fa3a 	bl	8001f16 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CP_3_Pin;
 8000aa2:	f248 0380 	movw	r3, #32896	; 0x8080
 8000aa6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000aac:	2302      	movs	r3, #2
 8000aae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CP_3_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	481a      	ldr	r0, [pc, #104]	; (8000b24 <MX_GPIO_Init+0x100>)
 8000aba:	f001 fa2c 	bl	8001f16 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTC, LL_GPIO_AF_EXTI_LINE4);
 8000abe:	491a      	ldr	r1, [pc, #104]	; (8000b28 <MX_GPIO_Init+0x104>)
 8000ac0:	2002      	movs	r0, #2
 8000ac2:	f7ff fdeb 	bl	800069c <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8000ac6:	2310      	movs	r3, #16
 8000ac8:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000aca:	2301      	movs	r3, #1
 8000acc:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000ad6:	f107 0318 	add.w	r3, r7, #24
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 f8e4 	bl	8001ca8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(tact_switch_GPIO_Port, tact_switch_Pin, LL_GPIO_MODE_FLOATING);
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	f241 0110 	movw	r1, #4112	; 0x1010
 8000ae6:	480f      	ldr	r0, [pc, #60]	; (8000b24 <MX_GPIO_Init+0x100>)
 8000ae8:	f7ff fd78 	bl	80005dc <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000aec:	f7ff fb52 	bl	8000194 <__NVIC_GetPriorityGrouping>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fba0 	bl	800023c <NVIC_EncodePriority>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4619      	mov	r1, r3
 8000b00:	200a      	movs	r0, #10
 8000b02:	f7ff fb71 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 8000b06:	200a      	movs	r0, #10
 8000b08:	f7ff fb52 	bl	80001b0 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	04078087 	.word	0x04078087
 8000b18:	40010800 	.word	0x40010800
 8000b1c:	04445054 	.word	0x04445054
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	40011000 	.word	0x40011000
 8000b28:	000f0001 	.word	0x000f0001

08000b2c <write_serial_in_parallel_out_register_plus>:
	LL_mDelay(100);
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10);
	LL_mDelay(100);
}

void write_serial_in_parallel_out_register_plus(unsigned char data){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	 *      data      1    1   0   0   0  0   0   1
	 *
	 *
	 */
	//all reset
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000b36:	49a6      	ldr	r1, [pc, #664]	; (8000dd0 <write_serial_in_parallel_out_register_plus+0x2a4>)
 8000b38:	48a6      	ldr	r0, [pc, #664]	; (8000dd4 <write_serial_in_parallel_out_register_plus+0x2a8>)
 8000b3a:	f7ff fd90 	bl	800065e <LL_GPIO_ResetOutputPin>
	delay_us(1);
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f000 ff76 	bl	8001a30 <delay_us>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000b44:	49a2      	ldr	r1, [pc, #648]	; (8000dd0 <write_serial_in_parallel_out_register_plus+0x2a4>)
 8000b46:	48a3      	ldr	r0, [pc, #652]	; (8000dd4 <write_serial_in_parallel_out_register_plus+0x2a8>)
 8000b48:	f7ff fd7a 	bl	8000640 <LL_GPIO_SetOutputPin>

	//Q7
	unsigned int bitValue = bitRead(data, 0);
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]

	switch(bitValue){
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <write_serial_in_parallel_out_register_plus+0x36>
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d005      	beq.n	8000b6c <write_serial_in_parallel_out_register_plus+0x40>
 8000b60:	e009      	b.n	8000b76 <write_serial_in_parallel_out_register_plus+0x4a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000b62:	499d      	ldr	r1, [pc, #628]	; (8000dd8 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000b64:	489d      	ldr	r0, [pc, #628]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000b66:	f7ff fd7a 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 8000b6a:	e004      	b.n	8000b76 <write_serial_in_parallel_out_register_plus+0x4a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000b6c:	499a      	ldr	r1, [pc, #616]	; (8000dd8 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000b6e:	489b      	ldr	r0, [pc, #620]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000b70:	f7ff fd66 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8000b74:	bf00      	nop

	}

	delay_us(1);
 8000b76:	2001      	movs	r0, #1
 8000b78:	f000 ff5a 	bl	8001a30 <delay_us>

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 1
 8000b7c:	4998      	ldr	r1, [pc, #608]	; (8000de0 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000b7e:	4897      	ldr	r0, [pc, #604]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000b80:	f7ff fd5e 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000b84:	2001      	movs	r0, #1
 8000b86:	f000 ff53 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000b8a:	4995      	ldr	r1, [pc, #596]	; (8000de0 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000b8c:	4893      	ldr	r0, [pc, #588]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000b8e:	f7ff fd66 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f000 ff4c 	bl	8001a30 <delay_us>

	//Q6
	bitValue = bitRead(data, 1);
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	085b      	lsrs	r3, r3, #1
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d003      	beq.n	8000bb2 <write_serial_in_parallel_out_register_plus+0x86>
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d005      	beq.n	8000bbc <write_serial_in_parallel_out_register_plus+0x90>
 8000bb0:	e009      	b.n	8000bc6 <write_serial_in_parallel_out_register_plus+0x9a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000bb2:	4989      	ldr	r1, [pc, #548]	; (8000dd8 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000bb4:	4889      	ldr	r0, [pc, #548]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000bb6:	f7ff fd52 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 8000bba:	e004      	b.n	8000bc6 <write_serial_in_parallel_out_register_plus+0x9a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000bbc:	4986      	ldr	r1, [pc, #536]	; (8000dd8 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000bbe:	4887      	ldr	r0, [pc, #540]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000bc0:	f7ff fd3e 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8000bc4:	bf00      	nop

	}

	delay_us(1);
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f000 ff32 	bl	8001a30 <delay_us>

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 2
 8000bcc:	4984      	ldr	r1, [pc, #528]	; (8000de0 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000bce:	4883      	ldr	r0, [pc, #524]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000bd0:	f7ff fd36 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f000 ff2b 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000bda:	4981      	ldr	r1, [pc, #516]	; (8000de0 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000bdc:	487f      	ldr	r0, [pc, #508]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000bde:	f7ff fd3e 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000be2:	2001      	movs	r0, #1
 8000be4:	f000 ff24 	bl	8001a30 <delay_us>

	//Q5
	bitValue = bitRead(data, 2);
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	089b      	lsrs	r3, r3, #2
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d003      	beq.n	8000c02 <write_serial_in_parallel_out_register_plus+0xd6>
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d005      	beq.n	8000c0c <write_serial_in_parallel_out_register_plus+0xe0>
 8000c00:	e009      	b.n	8000c16 <write_serial_in_parallel_out_register_plus+0xea>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000c02:	4975      	ldr	r1, [pc, #468]	; (8000dd8 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000c04:	4875      	ldr	r0, [pc, #468]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000c06:	f7ff fd2a 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 8000c0a:	e004      	b.n	8000c16 <write_serial_in_parallel_out_register_plus+0xea>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000c0c:	4972      	ldr	r1, [pc, #456]	; (8000dd8 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000c0e:	4873      	ldr	r0, [pc, #460]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000c10:	f7ff fd16 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8000c14:	bf00      	nop

	}

	delay_us(1);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f000 ff0a 	bl	8001a30 <delay_us>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 3
 8000c1c:	4970      	ldr	r1, [pc, #448]	; (8000de0 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000c1e:	486f      	ldr	r0, [pc, #444]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000c20:	f7ff fd0e 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f000 ff03 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000c2a:	496d      	ldr	r1, [pc, #436]	; (8000de0 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000c2c:	486b      	ldr	r0, [pc, #428]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000c2e:	f7ff fd16 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000c32:	2001      	movs	r0, #1
 8000c34:	f000 fefc 	bl	8001a30 <delay_us>

	//Q4
	bitValue = bitRead(data, 3);
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	08db      	lsrs	r3, r3, #3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <write_serial_in_parallel_out_register_plus+0x126>
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d005      	beq.n	8000c5c <write_serial_in_parallel_out_register_plus+0x130>
 8000c50:	e009      	b.n	8000c66 <write_serial_in_parallel_out_register_plus+0x13a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000c52:	4961      	ldr	r1, [pc, #388]	; (8000dd8 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000c54:	4861      	ldr	r0, [pc, #388]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000c56:	f7ff fd02 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 8000c5a:	e004      	b.n	8000c66 <write_serial_in_parallel_out_register_plus+0x13a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000c5c:	495e      	ldr	r1, [pc, #376]	; (8000dd8 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000c5e:	485f      	ldr	r0, [pc, #380]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000c60:	f7ff fcee 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8000c64:	bf00      	nop

	}

	delay_us(1);
 8000c66:	2001      	movs	r0, #1
 8000c68:	f000 fee2 	bl	8001a30 <delay_us>

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 4
 8000c6c:	495c      	ldr	r1, [pc, #368]	; (8000de0 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000c6e:	485b      	ldr	r0, [pc, #364]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000c70:	f7ff fce6 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000c74:	2001      	movs	r0, #1
 8000c76:	f000 fedb 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000c7a:	4959      	ldr	r1, [pc, #356]	; (8000de0 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000c7c:	4857      	ldr	r0, [pc, #348]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000c7e:	f7ff fcee 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000c82:	2001      	movs	r0, #1
 8000c84:	f000 fed4 	bl	8001a30 <delay_us>

	//Q3
	bitValue = bitRead(data, 4);
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	091b      	lsrs	r3, r3, #4
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <write_serial_in_parallel_out_register_plus+0x176>
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d005      	beq.n	8000cac <write_serial_in_parallel_out_register_plus+0x180>
 8000ca0:	e009      	b.n	8000cb6 <write_serial_in_parallel_out_register_plus+0x18a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000ca2:	494d      	ldr	r1, [pc, #308]	; (8000dd8 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000ca4:	484d      	ldr	r0, [pc, #308]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000ca6:	f7ff fcda 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 8000caa:	e004      	b.n	8000cb6 <write_serial_in_parallel_out_register_plus+0x18a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000cac:	494a      	ldr	r1, [pc, #296]	; (8000dd8 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000cae:	484b      	ldr	r0, [pc, #300]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000cb0:	f7ff fcc6 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8000cb4:	bf00      	nop

	}

	delay_us(1);
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f000 feba 	bl	8001a30 <delay_us>

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 5
 8000cbc:	4948      	ldr	r1, [pc, #288]	; (8000de0 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000cbe:	4847      	ldr	r0, [pc, #284]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000cc0:	f7ff fcbe 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f000 feb3 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000cca:	4945      	ldr	r1, [pc, #276]	; (8000de0 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000ccc:	4843      	ldr	r0, [pc, #268]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000cce:	f7ff fcc6 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f000 feac 	bl	8001a30 <delay_us>

	//Q2
	bitValue = bitRead(data, 5);
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <write_serial_in_parallel_out_register_plus+0x1c6>
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d005      	beq.n	8000cfc <write_serial_in_parallel_out_register_plus+0x1d0>
 8000cf0:	e009      	b.n	8000d06 <write_serial_in_parallel_out_register_plus+0x1da>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000cf2:	4939      	ldr	r1, [pc, #228]	; (8000dd8 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000cf4:	4839      	ldr	r0, [pc, #228]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000cf6:	f7ff fcb2 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 8000cfa:	e004      	b.n	8000d06 <write_serial_in_parallel_out_register_plus+0x1da>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000cfc:	4936      	ldr	r1, [pc, #216]	; (8000dd8 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000cfe:	4837      	ldr	r0, [pc, #220]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000d00:	f7ff fc9e 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8000d04:	bf00      	nop

	}

	delay_us(1);
 8000d06:	2001      	movs	r0, #1
 8000d08:	f000 fe92 	bl	8001a30 <delay_us>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 6
 8000d0c:	4934      	ldr	r1, [pc, #208]	; (8000de0 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000d0e:	4833      	ldr	r0, [pc, #204]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000d10:	f7ff fc96 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f000 fe8b 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000d1a:	4931      	ldr	r1, [pc, #196]	; (8000de0 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000d1c:	482f      	ldr	r0, [pc, #188]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000d1e:	f7ff fc9e 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000d22:	2001      	movs	r0, #1
 8000d24:	f000 fe84 	bl	8001a30 <delay_us>

	//Q1
	bitValue = bitRead(data, 6);
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	099b      	lsrs	r3, r3, #6
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <write_serial_in_parallel_out_register_plus+0x216>
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d005      	beq.n	8000d4c <write_serial_in_parallel_out_register_plus+0x220>
 8000d40:	e009      	b.n	8000d56 <write_serial_in_parallel_out_register_plus+0x22a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000d42:	4925      	ldr	r1, [pc, #148]	; (8000dd8 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000d44:	4825      	ldr	r0, [pc, #148]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000d46:	f7ff fc8a 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 8000d4a:	e004      	b.n	8000d56 <write_serial_in_parallel_out_register_plus+0x22a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000d4c:	4922      	ldr	r1, [pc, #136]	; (8000dd8 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000d4e:	4823      	ldr	r0, [pc, #140]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000d50:	f7ff fc76 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8000d54:	bf00      	nop

	}

	delay_us(1);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f000 fe6a 	bl	8001a30 <delay_us>

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 7
 8000d5c:	4920      	ldr	r1, [pc, #128]	; (8000de0 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000d5e:	481f      	ldr	r0, [pc, #124]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000d60:	f7ff fc6e 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000d64:	2001      	movs	r0, #1
 8000d66:	f000 fe63 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000d6a:	491d      	ldr	r1, [pc, #116]	; (8000de0 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000d6c:	481b      	ldr	r0, [pc, #108]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000d6e:	f7ff fc76 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f000 fe5c 	bl	8001a30 <delay_us>

	//Q0
	bitValue = bitRead(data, 7);
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	09db      	lsrs	r3, r3, #7
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <write_serial_in_parallel_out_register_plus+0x266>
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d005      	beq.n	8000d9c <write_serial_in_parallel_out_register_plus+0x270>
 8000d90:	e009      	b.n	8000da6 <write_serial_in_parallel_out_register_plus+0x27a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000d92:	4911      	ldr	r1, [pc, #68]	; (8000dd8 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000d94:	4811      	ldr	r0, [pc, #68]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000d96:	f7ff fc62 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 8000d9a:	e004      	b.n	8000da6 <write_serial_in_parallel_out_register_plus+0x27a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000d9c:	490e      	ldr	r1, [pc, #56]	; (8000dd8 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000d9e:	480f      	ldr	r0, [pc, #60]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000da0:	f7ff fc4e 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8000da4:	bf00      	nop

	}

	delay_us(1);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f000 fe42 	bl	8001a30 <delay_us>

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 8
 8000dac:	490c      	ldr	r1, [pc, #48]	; (8000de0 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000dae:	480b      	ldr	r0, [pc, #44]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000db0:	f7ff fc46 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f000 fe3b 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000dba:	4909      	ldr	r1, [pc, #36]	; (8000de0 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000dbc:	4807      	ldr	r0, [pc, #28]	; (8000ddc <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000dbe:	f7ff fc4e 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f000 fe34 	bl	8001a30 <delay_us>

}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	04010001 	.word	0x04010001
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	04400040 	.word	0x04400040
 8000ddc:	40010c00 	.word	0x40010c00
 8000de0:	04040004 	.word	0x04040004

08000de4 <write_serial_in_parallel_out_register_minus_yellow>:
	//LL_mDelay(time_gap);
	delay_us(1);

}

void write_serial_in_parallel_out_register_minus_yellow(unsigned char data){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
	 *      data      1    1   0   0   0  0   0   1
	 *
	 *
	 */
	//all reset
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8000dee:	f244 0140 	movw	r1, #16448	; 0x4040
 8000df2:	48a2      	ldr	r0, [pc, #648]	; (800107c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000df4:	f7ff fc33 	bl	800065e <LL_GPIO_ResetOutputPin>
	delay_us(1);
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f000 fe19 	bl	8001a30 <delay_us>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8000dfe:	f244 0140 	movw	r1, #16448	; 0x4040
 8000e02:	489e      	ldr	r0, [pc, #632]	; (800107c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000e04:	f7ff fc1c 	bl	8000640 <LL_GPIO_SetOutputPin>

	//Q7
	unsigned int bitValue = bitRead(data, 0);
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]

	switch(bitValue){
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <write_serial_in_parallel_out_register_minus_yellow+0x3a>
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d005      	beq.n	8000e28 <write_serial_in_parallel_out_register_minus_yellow+0x44>
 8000e1c:	e009      	b.n	8000e32 <write_serial_in_parallel_out_register_minus_yellow+0x4e>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8000e1e:	4998      	ldr	r1, [pc, #608]	; (8001080 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000e20:	4898      	ldr	r0, [pc, #608]	; (8001084 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000e22:	f7ff fc1c 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 8000e26:	e004      	b.n	8000e32 <write_serial_in_parallel_out_register_minus_yellow+0x4e>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8000e28:	4995      	ldr	r1, [pc, #596]	; (8001080 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000e2a:	4896      	ldr	r0, [pc, #600]	; (8001084 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000e2c:	f7ff fc08 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8000e30:	bf00      	nop

	}

	//delay_us(1);

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 1
 8000e32:	f241 0110 	movw	r1, #4112	; 0x1010
 8000e36:	4891      	ldr	r0, [pc, #580]	; (800107c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000e38:	f7ff fc02 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f000 fdf7 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000e42:	f241 0110 	movw	r1, #4112	; 0x1010
 8000e46:	488d      	ldr	r0, [pc, #564]	; (800107c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000e48:	f7ff fc09 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f000 fdef 	bl	8001a30 <delay_us>

	//Q6
	bitValue = bitRead(data, 1);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	085b      	lsrs	r3, r3, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <write_serial_in_parallel_out_register_minus_yellow+0x88>
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d005      	beq.n	8000e76 <write_serial_in_parallel_out_register_minus_yellow+0x92>
 8000e6a:	e009      	b.n	8000e80 <write_serial_in_parallel_out_register_minus_yellow+0x9c>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8000e6c:	4984      	ldr	r1, [pc, #528]	; (8001080 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000e6e:	4885      	ldr	r0, [pc, #532]	; (8001084 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000e70:	f7ff fbf5 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 8000e74:	e004      	b.n	8000e80 <write_serial_in_parallel_out_register_minus_yellow+0x9c>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8000e76:	4982      	ldr	r1, [pc, #520]	; (8001080 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000e78:	4882      	ldr	r0, [pc, #520]	; (8001084 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000e7a:	f7ff fbe1 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8000e7e:	bf00      	nop

	}

	//delay_us(1);

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 2
 8000e80:	f241 0110 	movw	r1, #4112	; 0x1010
 8000e84:	487d      	ldr	r0, [pc, #500]	; (800107c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000e86:	f7ff fbdb 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f000 fdd0 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000e90:	f241 0110 	movw	r1, #4112	; 0x1010
 8000e94:	4879      	ldr	r0, [pc, #484]	; (800107c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000e96:	f7ff fbe2 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f000 fdc8 	bl	8001a30 <delay_us>

	//Q5
	bitValue = bitRead(data, 2);
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <write_serial_in_parallel_out_register_minus_yellow+0xd6>
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d005      	beq.n	8000ec4 <write_serial_in_parallel_out_register_minus_yellow+0xe0>
 8000eb8:	e009      	b.n	8000ece <write_serial_in_parallel_out_register_minus_yellow+0xea>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8000eba:	4971      	ldr	r1, [pc, #452]	; (8001080 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000ebc:	4871      	ldr	r0, [pc, #452]	; (8001084 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000ebe:	f7ff fbce 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 8000ec2:	e004      	b.n	8000ece <write_serial_in_parallel_out_register_minus_yellow+0xea>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8000ec4:	496e      	ldr	r1, [pc, #440]	; (8001080 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000ec6:	486f      	ldr	r0, [pc, #444]	; (8001084 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000ec8:	f7ff fbba 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8000ecc:	bf00      	nop

	}

	//delay_us(1);

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 3
 8000ece:	f241 0110 	movw	r1, #4112	; 0x1010
 8000ed2:	486a      	ldr	r0, [pc, #424]	; (800107c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000ed4:	f7ff fbb4 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f000 fda9 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000ede:	f241 0110 	movw	r1, #4112	; 0x1010
 8000ee2:	4866      	ldr	r0, [pc, #408]	; (800107c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000ee4:	f7ff fbbb 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f000 fda1 	bl	8001a30 <delay_us>

	//Q4
	bitValue = bitRead(data, 3);
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <write_serial_in_parallel_out_register_minus_yellow+0x124>
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d005      	beq.n	8000f12 <write_serial_in_parallel_out_register_minus_yellow+0x12e>
 8000f06:	e009      	b.n	8000f1c <write_serial_in_parallel_out_register_minus_yellow+0x138>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8000f08:	495d      	ldr	r1, [pc, #372]	; (8001080 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000f0a:	485e      	ldr	r0, [pc, #376]	; (8001084 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000f0c:	f7ff fba7 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 8000f10:	e004      	b.n	8000f1c <write_serial_in_parallel_out_register_minus_yellow+0x138>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8000f12:	495b      	ldr	r1, [pc, #364]	; (8001080 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000f14:	485b      	ldr	r0, [pc, #364]	; (8001084 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000f16:	f7ff fb93 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8000f1a:	bf00      	nop

	}

	//delay_us(1);
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);   //clock pulse 4
 8000f1c:	f241 0110 	movw	r1, #4112	; 0x1010
 8000f20:	4856      	ldr	r0, [pc, #344]	; (800107c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000f22:	f7ff fb8d 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000f26:	2001      	movs	r0, #1
 8000f28:	f000 fd82 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000f2c:	f241 0110 	movw	r1, #4112	; 0x1010
 8000f30:	4852      	ldr	r0, [pc, #328]	; (800107c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000f32:	f7ff fb94 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f000 fd7a 	bl	8001a30 <delay_us>

	//Q3
	bitValue = bitRead(data, 4);
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	091b      	lsrs	r3, r3, #4
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <write_serial_in_parallel_out_register_minus_yellow+0x172>
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d005      	beq.n	8000f60 <write_serial_in_parallel_out_register_minus_yellow+0x17c>
 8000f54:	e009      	b.n	8000f6a <write_serial_in_parallel_out_register_minus_yellow+0x186>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8000f56:	494a      	ldr	r1, [pc, #296]	; (8001080 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000f58:	484a      	ldr	r0, [pc, #296]	; (8001084 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000f5a:	f7ff fb80 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 8000f5e:	e004      	b.n	8000f6a <write_serial_in_parallel_out_register_minus_yellow+0x186>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8000f60:	4947      	ldr	r1, [pc, #284]	; (8001080 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000f62:	4848      	ldr	r0, [pc, #288]	; (8001084 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000f64:	f7ff fb6c 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8000f68:	bf00      	nop

	}

	//delay_us(1);

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 5
 8000f6a:	f241 0110 	movw	r1, #4112	; 0x1010
 8000f6e:	4843      	ldr	r0, [pc, #268]	; (800107c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000f70:	f7ff fb66 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f000 fd5b 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000f7a:	f241 0110 	movw	r1, #4112	; 0x1010
 8000f7e:	483f      	ldr	r0, [pc, #252]	; (800107c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000f80:	f7ff fb6d 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f000 fd53 	bl	8001a30 <delay_us>

	//Q2
	bitValue = bitRead(data, 5);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	095b      	lsrs	r3, r3, #5
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <write_serial_in_parallel_out_register_minus_yellow+0x1c0>
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d005      	beq.n	8000fae <write_serial_in_parallel_out_register_minus_yellow+0x1ca>
 8000fa2:	e009      	b.n	8000fb8 <write_serial_in_parallel_out_register_minus_yellow+0x1d4>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8000fa4:	4936      	ldr	r1, [pc, #216]	; (8001080 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000fa6:	4837      	ldr	r0, [pc, #220]	; (8001084 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000fa8:	f7ff fb59 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 8000fac:	e004      	b.n	8000fb8 <write_serial_in_parallel_out_register_minus_yellow+0x1d4>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8000fae:	4934      	ldr	r1, [pc, #208]	; (8001080 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000fb0:	4834      	ldr	r0, [pc, #208]	; (8001084 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000fb2:	f7ff fb45 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8000fb6:	bf00      	nop

	}

	//delay_us(1);
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 6
 8000fb8:	f241 0110 	movw	r1, #4112	; 0x1010
 8000fbc:	482f      	ldr	r0, [pc, #188]	; (800107c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000fbe:	f7ff fb3f 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f000 fd34 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000fc8:	f241 0110 	movw	r1, #4112	; 0x1010
 8000fcc:	482b      	ldr	r0, [pc, #172]	; (800107c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000fce:	f7ff fb46 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f000 fd2c 	bl	8001a30 <delay_us>

	//Q1
	bitValue = bitRead(data, 6);
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	099b      	lsrs	r3, r3, #6
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <write_serial_in_parallel_out_register_minus_yellow+0x20e>
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d005      	beq.n	8000ffc <write_serial_in_parallel_out_register_minus_yellow+0x218>
 8000ff0:	e009      	b.n	8001006 <write_serial_in_parallel_out_register_minus_yellow+0x222>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8000ff2:	4923      	ldr	r1, [pc, #140]	; (8001080 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000ff4:	4823      	ldr	r0, [pc, #140]	; (8001084 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000ff6:	f7ff fb32 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 8000ffa:	e004      	b.n	8001006 <write_serial_in_parallel_out_register_minus_yellow+0x222>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8000ffc:	4920      	ldr	r1, [pc, #128]	; (8001080 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000ffe:	4821      	ldr	r0, [pc, #132]	; (8001084 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8001000:	f7ff fb1e 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8001004:	bf00      	nop

	}

	//delay_us(1);

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 7
 8001006:	f241 0110 	movw	r1, #4112	; 0x1010
 800100a:	481c      	ldr	r0, [pc, #112]	; (800107c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 800100c:	f7ff fb18 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8001010:	2001      	movs	r0, #1
 8001012:	f000 fd0d 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001016:	f241 0110 	movw	r1, #4112	; 0x1010
 800101a:	4818      	ldr	r0, [pc, #96]	; (800107c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 800101c:	f7ff fb1f 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8001020:	2001      	movs	r0, #1
 8001022:	f000 fd05 	bl	8001a30 <delay_us>

	//Q0
	bitValue = bitRead(data, 7);
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	09db      	lsrs	r3, r3, #7
 800102a:	b2db      	uxtb	r3, r3
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <write_serial_in_parallel_out_register_minus_yellow+0x25c>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d005      	beq.n	800104a <write_serial_in_parallel_out_register_minus_yellow+0x266>
 800103e:	e009      	b.n	8001054 <write_serial_in_parallel_out_register_minus_yellow+0x270>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8001040:	490f      	ldr	r1, [pc, #60]	; (8001080 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8001042:	4810      	ldr	r0, [pc, #64]	; (8001084 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8001044:	f7ff fb0b 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 8001048:	e004      	b.n	8001054 <write_serial_in_parallel_out_register_minus_yellow+0x270>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 800104a:	490d      	ldr	r1, [pc, #52]	; (8001080 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 800104e:	f7ff faf7 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8001052:	bf00      	nop

	}

	//delay_us(1);

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 8
 8001054:	f241 0110 	movw	r1, #4112	; 0x1010
 8001058:	4808      	ldr	r0, [pc, #32]	; (800107c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 800105a:	f7ff faf1 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 800105e:	2001      	movs	r0, #1
 8001060:	f000 fce6 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001064:	f241 0110 	movw	r1, #4112	; 0x1010
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 800106a:	f7ff faf8 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 800106e:	2001      	movs	r0, #1
 8001070:	f000 fcde 	bl	8001a30 <delay_us>

}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40010c00 	.word	0x40010c00
 8001080:	04040004 	.word	0x04040004
 8001084:	40010800 	.word	0x40010800

08001088 <write_serial_in_parallel_out_register_minus_red>:

void write_serial_in_parallel_out_register_minus_red(unsigned char data){
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	 *      data      1    1   0   0   0  0   0   1
	 *
	 *
	 */
	//all reset
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8001092:	f248 0180 	movw	r1, #32896	; 0x8080
 8001096:	48ae      	ldr	r0, [pc, #696]	; (8001350 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8001098:	f7ff fae1 	bl	800065e <LL_GPIO_ResetOutputPin>
	delay_us(1);
 800109c:	2001      	movs	r0, #1
 800109e:	f000 fcc7 	bl	8001a30 <delay_us>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_7);
 80010a2:	f248 0180 	movw	r1, #32896	; 0x8080
 80010a6:	48aa      	ldr	r0, [pc, #680]	; (8001350 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 80010a8:	f7ff faca 	bl	8000640 <LL_GPIO_SetOutputPin>

	//Q7
	unsigned int bitValue = bitRead(data, 0);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]

	switch(bitValue){
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <write_serial_in_parallel_out_register_minus_red+0x3a>
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d005      	beq.n	80010cc <write_serial_in_parallel_out_register_minus_red+0x44>
 80010c0:	e009      	b.n	80010d6 <write_serial_in_parallel_out_register_minus_red+0x4e>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 80010c2:	49a4      	ldr	r1, [pc, #656]	; (8001354 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 80010c4:	48a2      	ldr	r0, [pc, #648]	; (8001350 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 80010c6:	f7ff faca 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 80010ca:	e004      	b.n	80010d6 <write_serial_in_parallel_out_register_minus_red+0x4e>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 80010cc:	49a1      	ldr	r1, [pc, #644]	; (8001354 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 80010ce:	48a0      	ldr	r0, [pc, #640]	; (8001350 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 80010d0:	f7ff fab6 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 80010d4:	bf00      	nop

	}

	delay_us(1);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f000 fcaa 	bl	8001a30 <delay_us>

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 1
 80010dc:	f248 0180 	movw	r1, #32896	; 0x8080
 80010e0:	489d      	ldr	r0, [pc, #628]	; (8001358 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 80010e2:	f7ff faad 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 80010e6:	2001      	movs	r0, #1
 80010e8:	f000 fca2 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 80010ec:	f248 0180 	movw	r1, #32896	; 0x8080
 80010f0:	4899      	ldr	r0, [pc, #612]	; (8001358 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 80010f2:	f7ff fab4 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f000 fc9a 	bl	8001a30 <delay_us>

	//Q6
	bitValue = bitRead(data, 1);
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	085b      	lsrs	r3, r3, #1
 8001100:	b2db      	uxtb	r3, r3
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <write_serial_in_parallel_out_register_minus_red+0x8e>
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d005      	beq.n	8001120 <write_serial_in_parallel_out_register_minus_red+0x98>
 8001114:	e009      	b.n	800112a <write_serial_in_parallel_out_register_minus_red+0xa2>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 8001116:	498f      	ldr	r1, [pc, #572]	; (8001354 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8001118:	488d      	ldr	r0, [pc, #564]	; (8001350 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 800111a:	f7ff faa0 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 800111e:	e004      	b.n	800112a <write_serial_in_parallel_out_register_minus_red+0xa2>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 8001120:	498c      	ldr	r1, [pc, #560]	; (8001354 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8001122:	488b      	ldr	r0, [pc, #556]	; (8001350 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8001124:	f7ff fa8c 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8001128:	bf00      	nop

	}

	delay_us(1);
 800112a:	2001      	movs	r0, #1
 800112c:	f000 fc80 	bl	8001a30 <delay_us>

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 2
 8001130:	f248 0180 	movw	r1, #32896	; 0x8080
 8001134:	4888      	ldr	r0, [pc, #544]	; (8001358 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 8001136:	f7ff fa83 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 800113a:	2001      	movs	r0, #1
 800113c:	f000 fc78 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 8001140:	f248 0180 	movw	r1, #32896	; 0x8080
 8001144:	4884      	ldr	r0, [pc, #528]	; (8001358 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 8001146:	f7ff fa8a 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 800114a:	2001      	movs	r0, #1
 800114c:	f000 fc70 	bl	8001a30 <delay_us>

	//Q5
	bitValue = bitRead(data, 2);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	b2db      	uxtb	r3, r3
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <write_serial_in_parallel_out_register_minus_red+0xe2>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d005      	beq.n	8001174 <write_serial_in_parallel_out_register_minus_red+0xec>
 8001168:	e009      	b.n	800117e <write_serial_in_parallel_out_register_minus_red+0xf6>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 800116a:	497a      	ldr	r1, [pc, #488]	; (8001354 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 800116c:	4878      	ldr	r0, [pc, #480]	; (8001350 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 800116e:	f7ff fa76 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 8001172:	e004      	b.n	800117e <write_serial_in_parallel_out_register_minus_red+0xf6>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 8001174:	4977      	ldr	r1, [pc, #476]	; (8001354 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8001176:	4876      	ldr	r0, [pc, #472]	; (8001350 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8001178:	f7ff fa62 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 800117c:	bf00      	nop

	}

	delay_us(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f000 fc56 	bl	8001a30 <delay_us>

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 3
 8001184:	f248 0180 	movw	r1, #32896	; 0x8080
 8001188:	4873      	ldr	r0, [pc, #460]	; (8001358 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 800118a:	f7ff fa59 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 800118e:	2001      	movs	r0, #1
 8001190:	f000 fc4e 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 8001194:	f248 0180 	movw	r1, #32896	; 0x8080
 8001198:	486f      	ldr	r0, [pc, #444]	; (8001358 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 800119a:	f7ff fa60 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 800119e:	2001      	movs	r0, #1
 80011a0:	f000 fc46 	bl	8001a30 <delay_us>

	//Q4
	bitValue = bitRead(data, 3);
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	08db      	lsrs	r3, r3, #3
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <write_serial_in_parallel_out_register_minus_red+0x136>
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d005      	beq.n	80011c8 <write_serial_in_parallel_out_register_minus_red+0x140>
 80011bc:	e009      	b.n	80011d2 <write_serial_in_parallel_out_register_minus_red+0x14a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 80011be:	4965      	ldr	r1, [pc, #404]	; (8001354 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 80011c0:	4863      	ldr	r0, [pc, #396]	; (8001350 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 80011c2:	f7ff fa4c 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 80011c6:	e004      	b.n	80011d2 <write_serial_in_parallel_out_register_minus_red+0x14a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 80011c8:	4962      	ldr	r1, [pc, #392]	; (8001354 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 80011ca:	4861      	ldr	r0, [pc, #388]	; (8001350 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 80011cc:	f7ff fa38 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 80011d0:	bf00      	nop

	}

	delay_us(1);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f000 fc2c 	bl	8001a30 <delay_us>
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);   //clock pulse 4
 80011d8:	f248 0180 	movw	r1, #32896	; 0x8080
 80011dc:	485e      	ldr	r0, [pc, #376]	; (8001358 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 80011de:	f7ff fa2f 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f000 fc24 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 80011e8:	f248 0180 	movw	r1, #32896	; 0x8080
 80011ec:	485a      	ldr	r0, [pc, #360]	; (8001358 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 80011ee:	f7ff fa36 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f000 fc1c 	bl	8001a30 <delay_us>

	//Q3
	bitValue = bitRead(data, 4);
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <write_serial_in_parallel_out_register_minus_red+0x18a>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d005      	beq.n	800121c <write_serial_in_parallel_out_register_minus_red+0x194>
 8001210:	e009      	b.n	8001226 <write_serial_in_parallel_out_register_minus_red+0x19e>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 8001212:	4950      	ldr	r1, [pc, #320]	; (8001354 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8001214:	484e      	ldr	r0, [pc, #312]	; (8001350 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8001216:	f7ff fa22 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 800121a:	e004      	b.n	8001226 <write_serial_in_parallel_out_register_minus_red+0x19e>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 800121c:	494d      	ldr	r1, [pc, #308]	; (8001354 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 800121e:	484c      	ldr	r0, [pc, #304]	; (8001350 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8001220:	f7ff fa0e 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8001224:	bf00      	nop

	}

	delay_us(1);
 8001226:	2001      	movs	r0, #1
 8001228:	f000 fc02 	bl	8001a30 <delay_us>

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 5
 800122c:	f248 0180 	movw	r1, #32896	; 0x8080
 8001230:	4849      	ldr	r0, [pc, #292]	; (8001358 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 8001232:	f7ff fa05 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f000 fbfa 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 800123c:	f248 0180 	movw	r1, #32896	; 0x8080
 8001240:	4845      	ldr	r0, [pc, #276]	; (8001358 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 8001242:	f7ff fa0c 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8001246:	2001      	movs	r0, #1
 8001248:	f000 fbf2 	bl	8001a30 <delay_us>

	//Q2
	bitValue = bitRead(data, 5);
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	b2db      	uxtb	r3, r3
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <write_serial_in_parallel_out_register_minus_red+0x1de>
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d005      	beq.n	8001270 <write_serial_in_parallel_out_register_minus_red+0x1e8>
 8001264:	e009      	b.n	800127a <write_serial_in_parallel_out_register_minus_red+0x1f2>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 8001266:	493b      	ldr	r1, [pc, #236]	; (8001354 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8001268:	4839      	ldr	r0, [pc, #228]	; (8001350 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 800126a:	f7ff f9f8 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 800126e:	e004      	b.n	800127a <write_serial_in_parallel_out_register_minus_red+0x1f2>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 8001270:	4938      	ldr	r1, [pc, #224]	; (8001354 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8001272:	4837      	ldr	r0, [pc, #220]	; (8001350 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8001274:	f7ff f9e4 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8001278:	bf00      	nop

	}

	delay_us(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f000 fbd8 	bl	8001a30 <delay_us>
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 6
 8001280:	f248 0180 	movw	r1, #32896	; 0x8080
 8001284:	4834      	ldr	r0, [pc, #208]	; (8001358 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 8001286:	f7ff f9db 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 800128a:	2001      	movs	r0, #1
 800128c:	f000 fbd0 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 8001290:	f248 0180 	movw	r1, #32896	; 0x8080
 8001294:	4830      	ldr	r0, [pc, #192]	; (8001358 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 8001296:	f7ff f9e2 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 800129a:	2001      	movs	r0, #1
 800129c:	f000 fbc8 	bl	8001a30 <delay_us>

	//Q1
	bitValue = bitRead(data, 6);
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	099b      	lsrs	r3, r3, #6
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <write_serial_in_parallel_out_register_minus_red+0x232>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d005      	beq.n	80012c4 <write_serial_in_parallel_out_register_minus_red+0x23c>
 80012b8:	e009      	b.n	80012ce <write_serial_in_parallel_out_register_minus_red+0x246>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 80012ba:	4926      	ldr	r1, [pc, #152]	; (8001354 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 80012bc:	4824      	ldr	r0, [pc, #144]	; (8001350 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 80012be:	f7ff f9ce 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 80012c2:	e004      	b.n	80012ce <write_serial_in_parallel_out_register_minus_red+0x246>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 80012c4:	4923      	ldr	r1, [pc, #140]	; (8001354 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 80012c6:	4822      	ldr	r0, [pc, #136]	; (8001350 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 80012c8:	f7ff f9ba 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 80012cc:	bf00      	nop

	}

	delay_us(1);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f000 fbae 	bl	8001a30 <delay_us>

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 7
 80012d4:	f248 0180 	movw	r1, #32896	; 0x8080
 80012d8:	481f      	ldr	r0, [pc, #124]	; (8001358 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 80012da:	f7ff f9b1 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 80012de:	2001      	movs	r0, #1
 80012e0:	f000 fba6 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 80012e4:	f248 0180 	movw	r1, #32896	; 0x8080
 80012e8:	481b      	ldr	r0, [pc, #108]	; (8001358 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 80012ea:	f7ff f9b8 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 80012ee:	2001      	movs	r0, #1
 80012f0:	f000 fb9e 	bl	8001a30 <delay_us>

	//Q0
	bitValue = bitRead(data, 7);
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	09db      	lsrs	r3, r3, #7
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <write_serial_in_parallel_out_register_minus_red+0x286>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d005      	beq.n	8001318 <write_serial_in_parallel_out_register_minus_red+0x290>
 800130c:	e009      	b.n	8001322 <write_serial_in_parallel_out_register_minus_red+0x29a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 800130e:	4911      	ldr	r1, [pc, #68]	; (8001354 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8001310:	480f      	ldr	r0, [pc, #60]	; (8001350 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8001312:	f7ff f9a4 	bl	800065e <LL_GPIO_ResetOutputPin>
			break;
 8001316:	e004      	b.n	8001322 <write_serial_in_parallel_out_register_minus_red+0x29a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 8001318:	490e      	ldr	r1, [pc, #56]	; (8001354 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 800131a:	480d      	ldr	r0, [pc, #52]	; (8001350 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 800131c:	f7ff f990 	bl	8000640 <LL_GPIO_SetOutputPin>
			break;
 8001320:	bf00      	nop

	}

	delay_us(1);
 8001322:	2001      	movs	r0, #1
 8001324:	f000 fb84 	bl	8001a30 <delay_us>

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 8
 8001328:	f248 0180 	movw	r1, #32896	; 0x8080
 800132c:	480a      	ldr	r0, [pc, #40]	; (8001358 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 800132e:	f7ff f987 	bl	8000640 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8001332:	2001      	movs	r0, #1
 8001334:	f000 fb7c 	bl	8001a30 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 8001338:	f248 0180 	movw	r1, #32896	; 0x8080
 800133c:	4806      	ldr	r0, [pc, #24]	; (8001358 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 800133e:	f7ff f98e 	bl	800065e <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8001342:	2001      	movs	r0, #1
 8001344:	f000 fb74 	bl	8001a30 <delay_us>

}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40010800 	.word	0x40010800
 8001354:	04020002 	.word	0x04020002
 8001358:	40011000 	.word	0x40011000

0800135c <rowToBinary>:

unsigned char rowToBinary(unsigned char (*ptr)[8], int row) {
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
	unsigned char binaryValue = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]
	for (int col = 0; col < COLS; col++) {
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	e015      	b.n	800139c <rowToBinary+0x40>
		binaryValue |= (ptr[row][col] << (COLS - 1 - col));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	441a      	add	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	f1c3 0307 	rsb	r3, r3, #7
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	b25a      	sxtb	r2, r3
 800138c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001390:	4313      	orrs	r3, r2
 8001392:	b25b      	sxtb	r3, r3
 8001394:	73fb      	strb	r3, [r7, #15]
	for (int col = 0; col < COLS; col++) {
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	3301      	adds	r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	2b07      	cmp	r3, #7
 80013a0:	dde6      	ble.n	8001370 <rowToBinary+0x14>
	}
	binaryValue = ~binaryValue;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	73fb      	strb	r3, [r7, #15]

	return binaryValue;
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <findCommonOnes>:

void findCommonOnes(unsigned char(*board1)[COLS], unsigned char(*board2)[COLS], int rows, int cols) {
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
	//int orangeNowRow, orangeNowCol;
    // Iterating through the arrays to find the common positions with 1.
    for (int i = 0; i < rows; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e326      	b.n	8001a16 <findCommonOnes+0x662>
        for (int j = 0; j < cols; j++) {
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	e31b      	b.n	8001a06 <findCommonOnes+0x652>
            if (board1[i][j] == 1 && board2[i][j] == 1) {
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	441a      	add	r2, r3
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4413      	add	r3, r2
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	f040 830f 	bne.w	8001a00 <findCommonOnes+0x64c>
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	441a      	add	r2, r3
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	f040 8305 	bne.w	8001a00 <findCommonOnes+0x64c>
            	//orangeNowRow = i;
            	//orangeNowCol = j;
            	//Task1//
				if(next_yellow_yes == 1 || next_red_yes == 1){
 80013f6:	4b9f      	ldr	r3, [pc, #636]	; (8001674 <findCommonOnes+0x2c0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d004      	beq.n	8001408 <findCommonOnes+0x54>
 80013fe:	4b9e      	ldr	r3, [pc, #632]	; (8001678 <findCommonOnes+0x2c4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	f040 818c 	bne.w	8001720 <findCommonOnes+0x36c>
					if(next_red_yes==1){
 8001408:	4b9b      	ldr	r3, [pc, #620]	; (8001678 <findCommonOnes+0x2c4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d110      	bne.n	8001432 <findCommonOnes+0x7e>
						board1[i][j]=0;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	441a      	add	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4413      	add	r3, r2
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
						board2[i][j]=1;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	441a      	add	r2, r3
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4413      	add	r3, r2
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	e013      	b.n	800145a <findCommonOnes+0xa6>
					}
					else{
						if(next_yellow_yes==1){
 8001432:	4b90      	ldr	r3, [pc, #576]	; (8001674 <findCommonOnes+0x2c0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d10f      	bne.n	800145a <findCommonOnes+0xa6>
							board1[i][j]=1;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	441a      	add	r2, r3
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4413      	add	r3, r2
 8001446:	2201      	movs	r2, #1
 8001448:	701a      	strb	r2, [r3, #0]
							board2[i][j]=0;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	441a      	add	r2, r3
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4413      	add	r3, r2
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
						}
				//Task1 end//
					}
					//Task2//
					//if next point is yellow or red?//
					if(j==7){
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	2b07      	cmp	r3, #7
 800145e:	d174      	bne.n	800154a <findCommonOnes+0x196>
						//if next point is yellow?//
						if( board1[(i+1)%8][(j+1)%8] == 1 && board2[(i+1)%8][(j+1)%8] == 0 ){
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3301      	adds	r3, #1
 8001464:	425a      	negs	r2, r3
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	f002 0207 	and.w	r2, r2, #7
 800146e:	bf58      	it	pl
 8001470:	4253      	negpl	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	441a      	add	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	3301      	adds	r3, #1
 800147c:	4259      	negs	r1, r3
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	f001 0107 	and.w	r1, r1, #7
 8001486:	bf58      	it	pl
 8001488:	424b      	negpl	r3, r1
 800148a:	5cd3      	ldrb	r3, [r2, r3]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d11e      	bne.n	80014ce <findCommonOnes+0x11a>
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3301      	adds	r3, #1
 8001494:	425a      	negs	r2, r3
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	f002 0207 	and.w	r2, r2, #7
 800149e:	bf58      	it	pl
 80014a0:	4253      	negpl	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	441a      	add	r2, r3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	3301      	adds	r3, #1
 80014ac:	4259      	negs	r1, r3
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	f001 0107 	and.w	r1, r1, #7
 80014b6:	bf58      	it	pl
 80014b8:	424b      	negpl	r3, r1
 80014ba:	5cd3      	ldrb	r3, [r2, r3]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d106      	bne.n	80014ce <findCommonOnes+0x11a>
							next_yellow_yes=1;
 80014c0:	4b6c      	ldr	r3, [pc, #432]	; (8001674 <findCommonOnes+0x2c0>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	601a      	str	r2, [r3, #0]
							next_red_yes=0;
 80014c6:	4b6c      	ldr	r3, [pc, #432]	; (8001678 <findCommonOnes+0x2c4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	e0d7      	b.n	800167e <findCommonOnes+0x2ca>
						}
						else{
							//if next point is red?//
							if( board1[(i+1)%8][(j+1)%8] == 0 && board2[(i+1)%8][(j+1)%8] == 1 ){
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	425a      	negs	r2, r3
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	f002 0207 	and.w	r2, r2, #7
 80014dc:	bf58      	it	pl
 80014de:	4253      	negpl	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	441a      	add	r2, r3
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	3301      	adds	r3, #1
 80014ea:	4259      	negs	r1, r3
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	f001 0107 	and.w	r1, r1, #7
 80014f4:	bf58      	it	pl
 80014f6:	424b      	negpl	r3, r1
 80014f8:	5cd3      	ldrb	r3, [r2, r3]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d11e      	bne.n	800153c <findCommonOnes+0x188>
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3301      	adds	r3, #1
 8001502:	425a      	negs	r2, r3
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	f002 0207 	and.w	r2, r2, #7
 800150c:	bf58      	it	pl
 800150e:	4253      	negpl	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	441a      	add	r2, r3
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	3301      	adds	r3, #1
 800151a:	4259      	negs	r1, r3
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	f001 0107 	and.w	r1, r1, #7
 8001524:	bf58      	it	pl
 8001526:	424b      	negpl	r3, r1
 8001528:	5cd3      	ldrb	r3, [r2, r3]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d106      	bne.n	800153c <findCommonOnes+0x188>
								next_yellow_yes=0;
 800152e:	4b51      	ldr	r3, [pc, #324]	; (8001674 <findCommonOnes+0x2c0>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
								next_red_yes=1;
 8001534:	4b50      	ldr	r3, [pc, #320]	; (8001678 <findCommonOnes+0x2c4>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e0a0      	b.n	800167e <findCommonOnes+0x2ca>
							}
							//nothing//
							else{
								next_yellow_yes=0;
 800153c:	4b4d      	ldr	r3, [pc, #308]	; (8001674 <findCommonOnes+0x2c0>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
								next_red_yes=0;
 8001542:	4b4d      	ldr	r3, [pc, #308]	; (8001678 <findCommonOnes+0x2c4>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	e099      	b.n	800167e <findCommonOnes+0x2ca>
							}
						}
					}
					else{
						if( (board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0) || (board1[i][(j+1)%8] == 0 && board2[i][(j+1)%8] == 1)){
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	441a      	add	r2, r3
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	3301      	adds	r3, #1
 8001556:	4259      	negs	r1, r3
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	f001 0107 	and.w	r1, r1, #7
 8001560:	bf58      	it	pl
 8001562:	424b      	negpl	r3, r1
 8001564:	5cd3      	ldrb	r3, [r2, r3]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d10f      	bne.n	800158a <findCommonOnes+0x1d6>
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	441a      	add	r2, r3
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	3301      	adds	r3, #1
 8001576:	4259      	negs	r1, r3
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	f001 0107 	and.w	r1, r1, #7
 8001580:	bf58      	it	pl
 8001582:	424b      	negpl	r3, r1
 8001584:	5cd3      	ldrb	r3, [r2, r3]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d01f      	beq.n	80015ca <findCommonOnes+0x216>
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	441a      	add	r2, r3
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	3301      	adds	r3, #1
 8001596:	4259      	negs	r1, r3
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	f001 0107 	and.w	r1, r1, #7
 80015a0:	bf58      	it	pl
 80015a2:	424b      	negpl	r3, r1
 80015a4:	5cd3      	ldrb	r3, [r2, r3]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d15d      	bne.n	8001666 <findCommonOnes+0x2b2>
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	441a      	add	r2, r3
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	3301      	adds	r3, #1
 80015b6:	4259      	negs	r1, r3
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	f001 0107 	and.w	r1, r1, #7
 80015c0:	bf58      	it	pl
 80015c2:	424b      	negpl	r3, r1
 80015c4:	5cd3      	ldrb	r3, [r2, r3]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d14d      	bne.n	8001666 <findCommonOnes+0x2b2>
							//if next point is yellow?//
							if( board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0 ){
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	441a      	add	r2, r3
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	3301      	adds	r3, #1
 80015d6:	4259      	negs	r1, r3
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	f001 0107 	and.w	r1, r1, #7
 80015e0:	bf58      	it	pl
 80015e2:	424b      	negpl	r3, r1
 80015e4:	5cd3      	ldrb	r3, [r2, r3]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d116      	bne.n	8001618 <findCommonOnes+0x264>
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	441a      	add	r2, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	3301      	adds	r3, #1
 80015f6:	4259      	negs	r1, r3
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	f001 0107 	and.w	r1, r1, #7
 8001600:	bf58      	it	pl
 8001602:	424b      	negpl	r3, r1
 8001604:	5cd3      	ldrb	r3, [r2, r3]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d106      	bne.n	8001618 <findCommonOnes+0x264>
								next_yellow_yes=1;
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <findCommonOnes+0x2c0>)
 800160c:	2201      	movs	r2, #1
 800160e:	601a      	str	r2, [r3, #0]
								next_red_yes=0;
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <findCommonOnes+0x2c4>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
							if( board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0 ){
 8001616:	e031      	b.n	800167c <findCommonOnes+0x2c8>
							}
							else{
								//if next point is red?//
								if( board1[i][(j+1)%8] == 0 && board2[i][(j+1)%8] == 1 ){
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	441a      	add	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	3301      	adds	r3, #1
 8001624:	4259      	negs	r1, r3
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	f001 0107 	and.w	r1, r1, #7
 800162e:	bf58      	it	pl
 8001630:	424b      	negpl	r3, r1
 8001632:	5cd3      	ldrb	r3, [r2, r3]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d121      	bne.n	800167c <findCommonOnes+0x2c8>
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	441a      	add	r2, r3
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	3301      	adds	r3, #1
 8001644:	4259      	negs	r1, r3
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	f001 0107 	and.w	r1, r1, #7
 800164e:	bf58      	it	pl
 8001650:	424b      	negpl	r3, r1
 8001652:	5cd3      	ldrb	r3, [r2, r3]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d111      	bne.n	800167c <findCommonOnes+0x2c8>
									next_yellow_yes=0;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <findCommonOnes+0x2c0>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
									next_red_yes=1;
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <findCommonOnes+0x2c4>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]
							if( board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0 ){
 8001664:	e00a      	b.n	800167c <findCommonOnes+0x2c8>


						}
						//nothing//
						else{
							next_yellow_yes=0;
 8001666:	4b03      	ldr	r3, [pc, #12]	; (8001674 <findCommonOnes+0x2c0>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
							next_red_yes=0;
 800166c:	4b02      	ldr	r3, [pc, #8]	; (8001678 <findCommonOnes+0x2c4>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e004      	b.n	800167e <findCommonOnes+0x2ca>
 8001674:	200000a0 	.word	0x200000a0
 8001678:	200000a4 	.word	0x200000a4
							if( board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0 ){
 800167c:	bf00      	nop
					}

					//Task2 end//
					//Task3//
					//apply orange color//
					if(j==7){
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	2b07      	cmp	r3, #7
 8001682:	d12e      	bne.n	80016e2 <findCommonOnes+0x32e>
						board1[(i+1)%8][(j+1)%8]=1;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3301      	adds	r3, #1
 8001688:	425a      	negs	r2, r3
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	f002 0207 	and.w	r2, r2, #7
 8001692:	bf58      	it	pl
 8001694:	4253      	negpl	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	441a      	add	r2, r3
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	3301      	adds	r3, #1
 80016a0:	4259      	negs	r1, r3
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	f001 0107 	and.w	r1, r1, #7
 80016aa:	bf58      	it	pl
 80016ac:	424b      	negpl	r3, r1
 80016ae:	2101      	movs	r1, #1
 80016b0:	54d1      	strb	r1, [r2, r3]
						board2[(i+1)%8][(j+1)%8]=1;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3301      	adds	r3, #1
 80016b6:	425a      	negs	r2, r3
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	f002 0207 	and.w	r2, r2, #7
 80016c0:	bf58      	it	pl
 80016c2:	4253      	negpl	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	441a      	add	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	3301      	adds	r3, #1
 80016ce:	4259      	negs	r1, r3
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	f001 0107 	and.w	r1, r1, #7
 80016d8:	bf58      	it	pl
 80016da:	424b      	negpl	r3, r1
 80016dc:	2101      	movs	r1, #1
 80016de:	54d1      	strb	r1, [r2, r3]
					if(j==7){
 80016e0:	e18d      	b.n	80019fe <findCommonOnes+0x64a>
					}
					else{
						board1[i][(j+1)%8]=1;
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	441a      	add	r2, r3
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	3301      	adds	r3, #1
 80016ee:	4259      	negs	r1, r3
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	f001 0107 	and.w	r1, r1, #7
 80016f8:	bf58      	it	pl
 80016fa:	424b      	negpl	r3, r1
 80016fc:	2101      	movs	r1, #1
 80016fe:	54d1      	strb	r1, [r2, r3]
						board2[i][(j+1)%8]=1;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	441a      	add	r2, r3
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	3301      	adds	r3, #1
 800170c:	4259      	negs	r1, r3
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	f001 0107 	and.w	r1, r1, #7
 8001716:	bf58      	it	pl
 8001718:	424b      	negpl	r3, r1
 800171a:	2101      	movs	r1, #1
 800171c:	54d1      	strb	r1, [r2, r3]
					if(j==7){
 800171e:	e16e      	b.n	80019fe <findCommonOnes+0x64a>
					}
					//Task3 end//
				}
				else{
					//task1//
					board1[i][j]=0;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	441a      	add	r2, r3
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4413      	add	r3, r2
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
					board2[i][j]=0;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	441a      	add	r2, r3
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4413      	add	r3, r2
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
					//Task1 end//
					//Task2//
					//if next point is yellow or red?//
					//if next point is yellow or red?//
					if(j==7){
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	2b07      	cmp	r3, #7
 8001744:	d174      	bne.n	8001830 <findCommonOnes+0x47c>
						//if next point is yellow?//
						if( board1[(i+1)%8][(j+1)%8] == 1 && board2[(i+1)%8][(j+1)%8] == 0 ){
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3301      	adds	r3, #1
 800174a:	425a      	negs	r2, r3
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	f002 0207 	and.w	r2, r2, #7
 8001754:	bf58      	it	pl
 8001756:	4253      	negpl	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	441a      	add	r2, r3
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	3301      	adds	r3, #1
 8001762:	4259      	negs	r1, r3
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	f001 0107 	and.w	r1, r1, #7
 800176c:	bf58      	it	pl
 800176e:	424b      	negpl	r3, r1
 8001770:	5cd3      	ldrb	r3, [r2, r3]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d11e      	bne.n	80017b4 <findCommonOnes+0x400>
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	3301      	adds	r3, #1
 800177a:	425a      	negs	r2, r3
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	f002 0207 	and.w	r2, r2, #7
 8001784:	bf58      	it	pl
 8001786:	4253      	negpl	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	441a      	add	r2, r3
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	3301      	adds	r3, #1
 8001792:	4259      	negs	r1, r3
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	f001 0107 	and.w	r1, r1, #7
 800179c:	bf58      	it	pl
 800179e:	424b      	negpl	r3, r1
 80017a0:	5cd3      	ldrb	r3, [r2, r3]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d106      	bne.n	80017b4 <findCommonOnes+0x400>
							next_yellow_yes=1;
 80017a6:	4ba0      	ldr	r3, [pc, #640]	; (8001a28 <findCommonOnes+0x674>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	601a      	str	r2, [r3, #0]
							next_red_yes=0;
 80017ac:	4b9f      	ldr	r3, [pc, #636]	; (8001a2c <findCommonOnes+0x678>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	e0d3      	b.n	800195c <findCommonOnes+0x5a8>
						}
						else{
							//if next point is red?//
							if( board1[(i+1)%8][(j+1)%8] == 0 && board2[(i+1)%8][(j+1)%8] == 1 ){
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	3301      	adds	r3, #1
 80017b8:	425a      	negs	r2, r3
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	f002 0207 	and.w	r2, r2, #7
 80017c2:	bf58      	it	pl
 80017c4:	4253      	negpl	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	441a      	add	r2, r3
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	3301      	adds	r3, #1
 80017d0:	4259      	negs	r1, r3
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	f001 0107 	and.w	r1, r1, #7
 80017da:	bf58      	it	pl
 80017dc:	424b      	negpl	r3, r1
 80017de:	5cd3      	ldrb	r3, [r2, r3]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d11e      	bne.n	8001822 <findCommonOnes+0x46e>
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	3301      	adds	r3, #1
 80017e8:	425a      	negs	r2, r3
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	f002 0207 	and.w	r2, r2, #7
 80017f2:	bf58      	it	pl
 80017f4:	4253      	negpl	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	441a      	add	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	3301      	adds	r3, #1
 8001800:	4259      	negs	r1, r3
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	f001 0107 	and.w	r1, r1, #7
 800180a:	bf58      	it	pl
 800180c:	424b      	negpl	r3, r1
 800180e:	5cd3      	ldrb	r3, [r2, r3]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d106      	bne.n	8001822 <findCommonOnes+0x46e>
								next_yellow_yes=0;
 8001814:	4b84      	ldr	r3, [pc, #528]	; (8001a28 <findCommonOnes+0x674>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
								next_red_yes=1;
 800181a:	4b84      	ldr	r3, [pc, #528]	; (8001a2c <findCommonOnes+0x678>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e09c      	b.n	800195c <findCommonOnes+0x5a8>
							}
							//nothing//
							else{
								next_yellow_yes=0;
 8001822:	4b81      	ldr	r3, [pc, #516]	; (8001a28 <findCommonOnes+0x674>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
								next_red_yes=0;
 8001828:	4b80      	ldr	r3, [pc, #512]	; (8001a2c <findCommonOnes+0x678>)
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	e095      	b.n	800195c <findCommonOnes+0x5a8>
							}
						}
					}
					else{
						if( (board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0) || (board1[i][(j+1)%8] == 0 && board2[i][(j+1)%8] == 1)){
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	441a      	add	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	3301      	adds	r3, #1
 800183c:	4259      	negs	r1, r3
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	f001 0107 	and.w	r1, r1, #7
 8001846:	bf58      	it	pl
 8001848:	424b      	negpl	r3, r1
 800184a:	5cd3      	ldrb	r3, [r2, r3]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d10f      	bne.n	8001870 <findCommonOnes+0x4bc>
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	441a      	add	r2, r3
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	3301      	adds	r3, #1
 800185c:	4259      	negs	r1, r3
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	f001 0107 	and.w	r1, r1, #7
 8001866:	bf58      	it	pl
 8001868:	424b      	negpl	r3, r1
 800186a:	5cd3      	ldrb	r3, [r2, r3]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d01f      	beq.n	80018b0 <findCommonOnes+0x4fc>
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	441a      	add	r2, r3
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	3301      	adds	r3, #1
 800187c:	4259      	negs	r1, r3
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	f001 0107 	and.w	r1, r1, #7
 8001886:	bf58      	it	pl
 8001888:	424b      	negpl	r3, r1
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d15d      	bne.n	800194c <findCommonOnes+0x598>
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	441a      	add	r2, r3
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	3301      	adds	r3, #1
 800189c:	4259      	negs	r1, r3
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	f001 0107 	and.w	r1, r1, #7
 80018a6:	bf58      	it	pl
 80018a8:	424b      	negpl	r3, r1
 80018aa:	5cd3      	ldrb	r3, [r2, r3]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d14d      	bne.n	800194c <findCommonOnes+0x598>
							//if next point is yellow?//
							if( board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0 ){
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	441a      	add	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	3301      	adds	r3, #1
 80018bc:	4259      	negs	r1, r3
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	f001 0107 	and.w	r1, r1, #7
 80018c6:	bf58      	it	pl
 80018c8:	424b      	negpl	r3, r1
 80018ca:	5cd3      	ldrb	r3, [r2, r3]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d116      	bne.n	80018fe <findCommonOnes+0x54a>
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	441a      	add	r2, r3
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	3301      	adds	r3, #1
 80018dc:	4259      	negs	r1, r3
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	f001 0107 	and.w	r1, r1, #7
 80018e6:	bf58      	it	pl
 80018e8:	424b      	negpl	r3, r1
 80018ea:	5cd3      	ldrb	r3, [r2, r3]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d106      	bne.n	80018fe <findCommonOnes+0x54a>
								next_yellow_yes=1;
 80018f0:	4b4d      	ldr	r3, [pc, #308]	; (8001a28 <findCommonOnes+0x674>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	601a      	str	r2, [r3, #0]
								next_red_yes=0;
 80018f6:	4b4d      	ldr	r3, [pc, #308]	; (8001a2c <findCommonOnes+0x678>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
							if( board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0 ){
 80018fc:	e02d      	b.n	800195a <findCommonOnes+0x5a6>
							}
							else{
								//if next point is red?//
								if( board1[i][(j+1)%8] == 0 && board2[i][(j+1)%8] == 1 ){
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	441a      	add	r2, r3
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	3301      	adds	r3, #1
 800190a:	4259      	negs	r1, r3
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	f001 0107 	and.w	r1, r1, #7
 8001914:	bf58      	it	pl
 8001916:	424b      	negpl	r3, r1
 8001918:	5cd3      	ldrb	r3, [r2, r3]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d11d      	bne.n	800195a <findCommonOnes+0x5a6>
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	441a      	add	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	3301      	adds	r3, #1
 800192a:	4259      	negs	r1, r3
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	f001 0107 	and.w	r1, r1, #7
 8001934:	bf58      	it	pl
 8001936:	424b      	negpl	r3, r1
 8001938:	5cd3      	ldrb	r3, [r2, r3]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d10d      	bne.n	800195a <findCommonOnes+0x5a6>
									next_yellow_yes=0;
 800193e:	4b3a      	ldr	r3, [pc, #232]	; (8001a28 <findCommonOnes+0x674>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
									next_red_yes=1;
 8001944:	4b39      	ldr	r3, [pc, #228]	; (8001a2c <findCommonOnes+0x678>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]
							if( board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0 ){
 800194a:	e006      	b.n	800195a <findCommonOnes+0x5a6>


						}
						//nothing//
						else{
							next_yellow_yes=0;
 800194c:	4b36      	ldr	r3, [pc, #216]	; (8001a28 <findCommonOnes+0x674>)
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
							next_red_yes=0;
 8001952:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <findCommonOnes+0x678>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	e000      	b.n	800195c <findCommonOnes+0x5a8>
							if( board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0 ){
 800195a:	bf00      	nop
						}
					}
					//Task2 end//
					//Task3//
					//apply orange color//
					if(j==7){
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	2b07      	cmp	r3, #7
 8001960:	d12e      	bne.n	80019c0 <findCommonOnes+0x60c>
						board1[(i+1)%8][(j+1)%8]=1;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	425a      	negs	r2, r3
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	f002 0207 	and.w	r2, r2, #7
 8001970:	bf58      	it	pl
 8001972:	4253      	negpl	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	441a      	add	r2, r3
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	3301      	adds	r3, #1
 800197e:	4259      	negs	r1, r3
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	f001 0107 	and.w	r1, r1, #7
 8001988:	bf58      	it	pl
 800198a:	424b      	negpl	r3, r1
 800198c:	2101      	movs	r1, #1
 800198e:	54d1      	strb	r1, [r2, r3]
						board2[(i+1)%8][(j+1)%8]=1;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3301      	adds	r3, #1
 8001994:	425a      	negs	r2, r3
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	f002 0207 	and.w	r2, r2, #7
 800199e:	bf58      	it	pl
 80019a0:	4253      	negpl	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	441a      	add	r2, r3
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	3301      	adds	r3, #1
 80019ac:	4259      	negs	r1, r3
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	f001 0107 	and.w	r1, r1, #7
 80019b6:	bf58      	it	pl
 80019b8:	424b      	negpl	r3, r1
 80019ba:	2101      	movs	r1, #1
 80019bc:	54d1      	strb	r1, [r2, r3]
						board2[i][(j+1)%8]=1;
					}
					//Task3 end//
				}

				return;
 80019be:	e02f      	b.n	8001a20 <findCommonOnes+0x66c>
						board1[i][(j+1)%8]=1;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	441a      	add	r2, r3
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	3301      	adds	r3, #1
 80019cc:	4259      	negs	r1, r3
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	f001 0107 	and.w	r1, r1, #7
 80019d6:	bf58      	it	pl
 80019d8:	424b      	negpl	r3, r1
 80019da:	2101      	movs	r1, #1
 80019dc:	54d1      	strb	r1, [r2, r3]
						board2[i][(j+1)%8]=1;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	441a      	add	r2, r3
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	3301      	adds	r3, #1
 80019ea:	4259      	negs	r1, r3
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	f001 0107 	and.w	r1, r1, #7
 80019f4:	bf58      	it	pl
 80019f6:	424b      	negpl	r3, r1
 80019f8:	2101      	movs	r1, #1
 80019fa:	54d1      	strb	r1, [r2, r3]
				return;
 80019fc:	e010      	b.n	8001a20 <findCommonOnes+0x66c>
 80019fe:	e00f      	b.n	8001a20 <findCommonOnes+0x66c>
        for (int j = 0; j < cols; j++) {
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	3301      	adds	r3, #1
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	f6ff acdf 	blt.w	80013ce <findCommonOnes+0x1a>
    for (int i = 0; i < rows; i++) {
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3301      	adds	r3, #1
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	f6ff acd4 	blt.w	80013c8 <findCommonOnes+0x14>
            }
        }
    }

}
 8001a20:	371c      	adds	r7, #28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	200000a0 	.word	0x200000a0
 8001a2c:	200000a4 	.word	0x200000a4

08001a30 <delay_us>:




static void inline delay_us(unsigned int delay){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	 * USAGE : please use delay variable that is ccr register.
	 */
	char buffer_delay_us[20];  //make buffer


	TIM2->CNT = 0; //clear
 8001a38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24

	LL_TIM_EnableCounter(TIM2); //CR1 register CEN bit (ENABLE)
 8001a40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a44:	f7fe fd44 	bl	80004d0 <LL_TIM_EnableCounter>

	while(TIM2->CNT < delay){
 8001a48:	bf00      	nop
 8001a4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d8f9      	bhi.n	8001a4a <delay_us+0x1a>
//		UART2_TX_string(buffer_delay_us);
//		UART2_TX_string("\r\n");

	}

	LL_TIM_DisableCounter(TIM2);   //disable.
 8001a56:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a5a:	f7fe fd48 	bl	80004ee <LL_TIM_DisableCounter>

}
 8001a5e:	bf00      	nop
 8001a60:	3720      	adds	r7, #32
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4013      	ands	r3, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	bf0c      	ite	eq
 8001a7e:	2301      	moveq	r3, #1
 8001a80:	2300      	movne	r3, #0
 8001a82:	b2db      	uxtb	r3, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40010400 	.word	0x40010400

08001a94 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001a9c:	4a03      	ldr	r2, [pc, #12]	; (8001aac <LL_EXTI_ClearFlag_0_31+0x18>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6153      	str	r3, [r2, #20]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	40010400 	.word	0x40010400

08001ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <NMI_Handler+0x4>

08001ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <HardFault_Handler+0x4>

08001abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <MemManage_Handler+0x4>

08001ac2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <BusFault_Handler+0x4>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <UsageFault_Handler+0x4>

08001ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
	...

08001b00 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8001b04:	2010      	movs	r0, #16
 8001b06:	f7ff ffaf 	bl	8001a68 <LL_EXTI_IsActiveFlag_0_31>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <EXTI4_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8001b10:	2010      	movs	r0, #16
 8001b12:	f7ff ffbf 	bl	8001a94 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_4 */
    findCommonOnes(dotMatrixBoard_yellow, dotMatrixBoard_red, ROWS, COLS);
 8001b16:	2308      	movs	r3, #8
 8001b18:	2208      	movs	r2, #8
 8001b1a:	4903      	ldr	r1, [pc, #12]	; (8001b28 <EXTI4_IRQHandler+0x28>)
 8001b1c:	4803      	ldr	r0, [pc, #12]	; (8001b2c <EXTI4_IRQHandler+0x2c>)
 8001b1e:	f7ff fc49 	bl	80013b4 <findCommonOnes>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000040 	.word	0x20000040
 8001b2c:	20000000 	.word	0x20000000

08001b30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b3c:	f7ff fff8 	bl	8001b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b40:	480b      	ldr	r0, [pc, #44]	; (8001b70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b42:	490c      	ldr	r1, [pc, #48]	; (8001b74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b44:	4a0c      	ldr	r2, [pc, #48]	; (8001b78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b48:	e002      	b.n	8001b50 <LoopCopyDataInit>

08001b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4e:	3304      	adds	r3, #4

08001b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b54:	d3f9      	bcc.n	8001b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b56:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b58:	4c09      	ldr	r4, [pc, #36]	; (8001b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b5c:	e001      	b.n	8001b62 <LoopFillZerobss>

08001b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b60:	3204      	adds	r2, #4

08001b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b64:	d3fb      	bcc.n	8001b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b66:	f000 fd33 	bl	80025d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b6a:	f7fe fdc5 	bl	80006f8 <main>
  bx lr
 8001b6e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b74:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001b78:	08002650 	.word	0x08002650
  ldr r2, =_sbss
 8001b7c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001b80:	200000a8 	.word	0x200000a8

08001b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b84:	e7fe      	b.n	8001b84 <ADC1_2_IRQHandler>
	...

08001b88 <LL_EXTI_EnableIT_0_31>:
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <LL_EXTI_EnableIT_0_31+0x20>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4904      	ldr	r1, [pc, #16]	; (8001ba8 <LL_EXTI_EnableIT_0_31+0x20>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	600b      	str	r3, [r1, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40010400 	.word	0x40010400

08001bac <LL_EXTI_DisableIT_0_31>:
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <LL_EXTI_DisableIT_0_31+0x20>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	4903      	ldr	r1, [pc, #12]	; (8001bcc <LL_EXTI_DisableIT_0_31+0x20>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	40010400 	.word	0x40010400

08001bd0 <LL_EXTI_EnableEvent_0_31>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	4904      	ldr	r1, [pc, #16]	; (8001bf0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40010400 	.word	0x40010400

08001bf4 <LL_EXTI_DisableEvent_0_31>:
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	4903      	ldr	r1, [pc, #12]	; (8001c14 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	40010400 	.word	0x40010400

08001c18 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	4904      	ldr	r1, [pc, #16]	; (8001c38 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40010400 	.word	0x40010400

08001c3c <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	4903      	ldr	r1, [pc, #12]	; (8001c5c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	608b      	str	r3, [r1, #8]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	40010400 	.word	0x40010400

08001c60 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	4904      	ldr	r1, [pc, #16]	; (8001c80 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	60cb      	str	r3, [r1, #12]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40010400 	.word	0x40010400

08001c84 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	4903      	ldr	r1, [pc, #12]	; (8001ca4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	60cb      	str	r3, [r1, #12]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	40010400 	.word	0x40010400

08001ca8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	791b      	ldrb	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d065      	beq.n	8001d88 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d06b      	beq.n	8001d9c <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	795b      	ldrb	r3, [r3, #5]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d01c      	beq.n	8001d06 <LL_EXTI_Init+0x5e>
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	dc25      	bgt.n	8001d1c <LL_EXTI_Init+0x74>
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <LL_EXTI_Init+0x32>
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d00b      	beq.n	8001cf0 <LL_EXTI_Init+0x48>
 8001cd8:	e020      	b.n	8001d1c <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ff88 	bl	8001bf4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff4d 	bl	8001b88 <LL_EXTI_EnableIT_0_31>
          break;
 8001cee:	e018      	b.n	8001d22 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff59 	bl	8001bac <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff ff66 	bl	8001bd0 <LL_EXTI_EnableEvent_0_31>
          break;
 8001d04:	e00d      	b.n	8001d22 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff3c 	bl	8001b88 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff5b 	bl	8001bd0 <LL_EXTI_EnableEvent_0_31>
          break;
 8001d1a:	e002      	b.n	8001d22 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
          break;
 8001d20:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	799b      	ldrb	r3, [r3, #6]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d038      	beq.n	8001d9c <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	799b      	ldrb	r3, [r3, #6]
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d01c      	beq.n	8001d6c <LL_EXTI_Init+0xc4>
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	dc25      	bgt.n	8001d82 <LL_EXTI_Init+0xda>
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d002      	beq.n	8001d40 <LL_EXTI_Init+0x98>
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d00b      	beq.n	8001d56 <LL_EXTI_Init+0xae>
 8001d3e:	e020      	b.n	8001d82 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff9d 	bl	8001c84 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff62 	bl	8001c18 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001d54:	e022      	b.n	8001d9c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ff6e 	bl	8001c3c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff7b 	bl	8001c60 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001d6a:	e017      	b.n	8001d9c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff51 	bl	8001c18 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff ff70 	bl	8001c60 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001d80:	e00c      	b.n	8001d9c <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	73fb      	strb	r3, [r7, #15]
            break;
 8001d86:	e009      	b.n	8001d9c <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff0d 	bl	8001bac <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff2c 	bl	8001bf4 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <LL_GPIO_SetPinMode>:
{
 8001da6:	b490      	push	{r4, r7}
 8001da8:	b088      	sub	sp, #32
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	461a      	mov	r2, r3
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	0e1b      	lsrs	r3, r3, #24
 8001dba:	4413      	add	r3, r2
 8001dbc:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001dbe:	6822      	ldr	r2, [r4, #0]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	613b      	str	r3, [r7, #16]
  return result;
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	401a      	ands	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	61bb      	str	r3, [r7, #24]
  return result;
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	6023      	str	r3, [r4, #0]
}
 8001e00:	bf00      	nop
 8001e02:	3720      	adds	r7, #32
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc90      	pop	{r4, r7}
 8001e08:	4770      	bx	lr

08001e0a <LL_GPIO_SetPinSpeed>:
{
 8001e0a:	b490      	push	{r4, r7}
 8001e0c:	b088      	sub	sp, #32
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	0e1b      	lsrs	r3, r3, #24
 8001e1e:	4413      	add	r3, r2
 8001e20:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001e22:	6822      	ldr	r2, [r4, #0]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	613b      	str	r3, [r7, #16]
  return result;
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	fab3 f383 	clz	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	2103      	movs	r1, #3
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	401a      	ands	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	61bb      	str	r3, [r7, #24]
  return result;
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e60:	4313      	orrs	r3, r2
 8001e62:	6023      	str	r3, [r4, #0]
}
 8001e64:	bf00      	nop
 8001e66:	3720      	adds	r7, #32
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc90      	pop	{r4, r7}
 8001e6c:	4770      	bx	lr

08001e6e <LL_GPIO_SetPinOutputType>:
{
 8001e6e:	b490      	push	{r4, r7}
 8001e70:	b088      	sub	sp, #32
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	0e1b      	lsrs	r3, r3, #24
 8001e82:	4413      	add	r3, r2
 8001e84:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001e86:	6822      	ldr	r2, [r4, #0]
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	613b      	str	r3, [r7, #16]
  return result;
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	2104      	movs	r1, #4
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	61bb      	str	r3, [r7, #24]
  return result;
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	6023      	str	r3, [r4, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc90      	pop	{r4, r7}
 8001ed0:	4770      	bx	lr

08001ed2 <LL_GPIO_SetPinPull>:
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b087      	sub	sp, #28
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	401a      	ands	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	613b      	str	r3, [r7, #16]
  return result;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	4619      	mov	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	408b      	lsls	r3, r1
 8001f06:	431a      	orrs	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	60da      	str	r2, [r3, #12]
}
 8001f0c:	bf00      	nop
 8001f0e:	371c      	adds	r7, #28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr

08001f16 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b088      	sub	sp, #32
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	0c1b      	lsrs	r3, r3, #16
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	60fb      	str	r3, [r7, #12]
  return result;
 8001f36:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001f38:	fab3 f383 	clz	r3, r3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8001f40:	e044      	b.n	8001fcc <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8001f42:	2201      	movs	r2, #1
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	409a      	lsls	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d03a      	beq.n	8001fc6 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	2b07      	cmp	r3, #7
 8001f54:	d806      	bhi.n	8001f64 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8001f56:	f240 1201 	movw	r2, #257	; 0x101
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	e008      	b.n	8001f76 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	3b08      	subs	r3, #8
 8001f68:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f74:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d106      	bne.n	8001f8c <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	461a      	mov	r2, r3
 8001f84:	69b9      	ldr	r1, [r7, #24]
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ffa3 	bl	8001ed2 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	461a      	mov	r2, r3
 8001f92:	69b9      	ldr	r1, [r7, #24]
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ff06 	bl	8001da6 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d003      	beq.n	8001faa <LL_GPIO_Init+0x94>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b09      	cmp	r3, #9
 8001fa8:	d10d      	bne.n	8001fc6 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	69b9      	ldr	r1, [r7, #24]
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ff29 	bl	8001e0a <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	69b9      	ldr	r1, [r7, #24]
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff54 	bl	8001e6e <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1b4      	bne.n	8001f42 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3720      	adds	r7, #32
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <LL_RCC_GetSysClkSource>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <LL_RCC_GetSysClkSource+0x14>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 030c 	and.w	r3, r3, #12
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	40021000 	.word	0x40021000

08001ffc <LL_RCC_GetAHBPrescaler>:
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <LL_RCC_GetAHBPrescaler+0x14>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	40021000 	.word	0x40021000

08002014 <LL_RCC_GetAPB1Prescaler>:
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <LL_RCC_GetAPB1Prescaler+0x14>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	40021000 	.word	0x40021000

0800202c <LL_RCC_GetAPB2Prescaler>:
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <LL_RCC_GetAPB2Prescaler+0x14>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	40021000 	.word	0x40021000

08002044 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002048:	4b03      	ldr	r3, [pc, #12]	; (8002058 <LL_RCC_PLL_GetMainSource+0x14>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	40021000 	.word	0x40021000

0800205c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	40021000 	.word	0x40021000

08002074 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <LL_RCC_PLL_GetPrediv+0x18>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	0c5b      	lsrs	r3, r3, #17
 800207e:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000

08002090 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002098:	f000 f820 	bl	80020dc <RCC_GetSystemClockFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f83e 	bl	8002128 <RCC_GetHCLKClockFreq>
 80020ac:	4602      	mov	r2, r0
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f84c 	bl	8002154 <RCC_GetPCLK1ClockFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 f858 	bl	800217c <RCC_GetPCLK2ClockFreq>
 80020cc:	4602      	mov	r2, r0
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	60da      	str	r2, [r3, #12]
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80020e6:	f7ff ff7d 	bl	8001fe4 <LL_RCC_GetSysClkSource>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d00c      	beq.n	800210a <RCC_GetSystemClockFreq+0x2e>
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d80e      	bhi.n	8002112 <RCC_GetSystemClockFreq+0x36>
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <RCC_GetSystemClockFreq+0x22>
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d003      	beq.n	8002104 <RCC_GetSystemClockFreq+0x28>
 80020fc:	e009      	b.n	8002112 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <RCC_GetSystemClockFreq+0x48>)
 8002100:	607b      	str	r3, [r7, #4]
      break;
 8002102:	e009      	b.n	8002118 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <RCC_GetSystemClockFreq+0x48>)
 8002106:	607b      	str	r3, [r7, #4]
      break;
 8002108:	e006      	b.n	8002118 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800210a:	f000 f84b 	bl	80021a4 <RCC_PLL_GetFreqDomain_SYS>
 800210e:	6078      	str	r0, [r7, #4]
      break;
 8002110:	e002      	b.n	8002118 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <RCC_GetSystemClockFreq+0x48>)
 8002114:	607b      	str	r3, [r7, #4]
      break;
 8002116:	bf00      	nop
  }

  return frequency;
 8002118:	687b      	ldr	r3, [r7, #4]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	007a1200 	.word	0x007a1200

08002128 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002130:	f7ff ff64 	bl	8001ffc <LL_RCC_GetAHBPrescaler>
 8002134:	4603      	mov	r3, r0
 8002136:	091b      	lsrs	r3, r3, #4
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	4a04      	ldr	r2, [pc, #16]	; (8002150 <RCC_GetHCLKClockFreq+0x28>)
 800213e:	5cd3      	ldrb	r3, [r2, r3]
 8002140:	461a      	mov	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	40d3      	lsrs	r3, r2
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	08002630 	.word	0x08002630

08002154 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800215c:	f7ff ff5a 	bl	8002014 <LL_RCC_GetAPB1Prescaler>
 8002160:	4603      	mov	r3, r0
 8002162:	0a1b      	lsrs	r3, r3, #8
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <RCC_GetPCLK1ClockFreq+0x24>)
 8002166:	5cd3      	ldrb	r3, [r2, r3]
 8002168:	461a      	mov	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	40d3      	lsrs	r3, r2
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	08002640 	.word	0x08002640

0800217c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002184:	f7ff ff52 	bl	800202c <LL_RCC_GetAPB2Prescaler>
 8002188:	4603      	mov	r3, r0
 800218a:	0adb      	lsrs	r3, r3, #11
 800218c:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <RCC_GetPCLK2ClockFreq+0x24>)
 800218e:	5cd3      	ldrb	r3, [r2, r3]
 8002190:	461a      	mov	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	40d3      	lsrs	r3, r2
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	08002640 	.word	0x08002640

080021a4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	2300      	movs	r3, #0
 80021b0:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80021b2:	f7ff ff47 	bl	8002044 <LL_RCC_PLL_GetMainSource>
 80021b6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c4:	d003      	beq.n	80021ce <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80021c6:	e00b      	b.n	80021e0 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80021c8:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80021ca:	607b      	str	r3, [r7, #4]
      break;
 80021cc:	e00b      	b.n	80021e6 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80021ce:	f7ff ff51 	bl	8002074 <LL_RCC_PLL_GetPrediv>
 80021d2:	4603      	mov	r3, r0
 80021d4:	3301      	adds	r3, #1
 80021d6:	4a0b      	ldr	r2, [pc, #44]	; (8002204 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80021d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021dc:	607b      	str	r3, [r7, #4]
      break;
 80021de:	e002      	b.n	80021e6 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80021e2:	607b      	str	r3, [r7, #4]
      break;
 80021e4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80021e6:	f7ff ff39 	bl	800205c <LL_RCC_PLL_GetMultiplicator>
 80021ea:	4603      	mov	r3, r0
 80021ec:	0c9b      	lsrs	r3, r3, #18
 80021ee:	3302      	adds	r3, #2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	fb02 f303 	mul.w	r3, r2, r3
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	003d0900 	.word	0x003d0900
 8002204:	007a1200 	.word	0x007a1200

08002208 <LL_TIM_SetPrescaler>:
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr

08002222 <LL_TIM_SetAutoReload>:
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <LL_TIM_SetRepetitionCounter>:
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr

08002256 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	615a      	str	r2, [r3, #20]
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a27      	ldr	r2, [pc, #156]	; (8002324 <LL_TIM_Init+0xb0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d00b      	beq.n	80022a4 <LL_TIM_Init+0x30>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002292:	d007      	beq.n	80022a4 <LL_TIM_Init+0x30>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a24      	ldr	r2, [pc, #144]	; (8002328 <LL_TIM_Init+0xb4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d003      	beq.n	80022a4 <LL_TIM_Init+0x30>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a23      	ldr	r2, [pc, #140]	; (800232c <LL_TIM_Init+0xb8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d106      	bne.n	80022b2 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <LL_TIM_Init+0xb0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00b      	beq.n	80022d2 <LL_TIM_Init+0x5e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c0:	d007      	beq.n	80022d2 <LL_TIM_Init+0x5e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a18      	ldr	r2, [pc, #96]	; (8002328 <LL_TIM_Init+0xb4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d003      	beq.n	80022d2 <LL_TIM_Init+0x5e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a17      	ldr	r2, [pc, #92]	; (800232c <LL_TIM_Init+0xb8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d106      	bne.n	80022e0 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	4619      	mov	r1, r3
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff98 	bl	8002222 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	4619      	mov	r1, r3
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ff85 	bl	8002208 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a08      	ldr	r2, [pc, #32]	; (8002324 <LL_TIM_Init+0xb0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d105      	bne.n	8002312 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	4619      	mov	r1, r3
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ff95 	bl	800223c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff ff9f 	bl	8002256 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40000400 	.word	0x40000400
 800232c:	40000800 	.word	0x40000800

08002330 <LL_USART_IsEnabled>:
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002344:	bf0c      	ite	eq
 8002346:	2301      	moveq	r3, #1
 8002348:	2300      	movne	r3, #0
 800234a:	b2db      	uxtb	r3, r3
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr

08002356 <LL_USART_SetStopBitsLength>:
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	611a      	str	r2, [r3, #16]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <LL_USART_SetHWFlowCtrl>:
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	615a      	str	r2, [r3, #20]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr
	...

080023a0 <LL_USART_SetBaudRate>:
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	009a      	lsls	r2, r3, #2
 80023b6:	441a      	add	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c0:	4a25      	ldr	r2, [pc, #148]	; (8002458 <LL_USART_SetBaudRate+0xb8>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	b299      	uxth	r1, r3
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	009a      	lsls	r2, r3, #2
 80023d8:	441a      	add	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	fbb2 f2f3 	udiv	r2, r2, r3
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <LL_USART_SetBaudRate+0xb8>)
 80023e4:	fba3 0302 	umull	r0, r3, r3, r2
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	2064      	movs	r0, #100	; 0x64
 80023ec:	fb00 f303 	mul.w	r3, r0, r3
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	3332      	adds	r3, #50	; 0x32
 80023f6:	4a18      	ldr	r2, [pc, #96]	; (8002458 <LL_USART_SetBaudRate+0xb8>)
 80023f8:	fba2 2303 	umull	r2, r3, r2, r3
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	b29b      	uxth	r3, r3
 8002400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002404:	b29b      	uxth	r3, r3
 8002406:	440b      	add	r3, r1
 8002408:	b299      	uxth	r1, r3
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	009a      	lsls	r2, r3, #2
 8002414:	441a      	add	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	fbb2 f2f3 	udiv	r2, r2, r3
 800241e:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <LL_USART_SetBaudRate+0xb8>)
 8002420:	fba3 0302 	umull	r0, r3, r3, r2
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	2064      	movs	r0, #100	; 0x64
 8002428:	fb00 f303 	mul.w	r3, r0, r3
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	3332      	adds	r3, #50	; 0x32
 8002432:	4a09      	ldr	r2, [pc, #36]	; (8002458 <LL_USART_SetBaudRate+0xb8>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	b29b      	uxth	r3, r3
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	b29b      	uxth	r3, r3
 8002442:	440b      	add	r3, r1
 8002444:	b29b      	uxth	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	609a      	str	r2, [r3, #8]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	51eb851f 	.word	0x51eb851f

0800245c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ff5e 	bl	8002330 <LL_USART_IsEnabled>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d145      	bne.n	8002506 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002482:	f023 030c 	bic.w	r3, r3, #12
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	6851      	ldr	r1, [r2, #4]
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	68d2      	ldr	r2, [r2, #12]
 800248e:	4311      	orrs	r1, r2
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	6912      	ldr	r2, [r2, #16]
 8002494:	430a      	orrs	r2, r1
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	4619      	mov	r1, r3
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff ff57 	bl	8002356 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	4619      	mov	r1, r3
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff ff63 	bl	800237a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80024b4:	f107 0308 	add.w	r3, r7, #8
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fde9 	bl	8002090 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a13      	ldr	r2, [pc, #76]	; (8002510 <LL_USART_Init+0xb4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d102      	bne.n	80024cc <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	61bb      	str	r3, [r7, #24]
 80024ca:	e00c      	b.n	80024e6 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a11      	ldr	r2, [pc, #68]	; (8002514 <LL_USART_Init+0xb8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d102      	bne.n	80024da <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	e005      	b.n	80024e6 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a0e      	ldr	r2, [pc, #56]	; (8002518 <LL_USART_Init+0xbc>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d101      	bne.n	80024e6 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00c      	beq.n	8002506 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 80024f4:	2300      	movs	r3, #0
 80024f6:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80024fc:	461a      	mov	r2, r3
 80024fe:	69b9      	ldr	r1, [r7, #24]
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ff4d 	bl	80023a0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002506:	7ffb      	ldrb	r3, [r7, #31]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3720      	adds	r7, #32
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40013800 	.word	0x40013800
 8002514:	40004400 	.word	0x40004400
 8002518:	40004800 	.word	0x40004800

0800251c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	fbb2 f3f3 	udiv	r3, r2, r3
 800252e:	4a07      	ldr	r2, [pc, #28]	; (800254c <LL_InitTick+0x30>)
 8002530:	3b01      	subs	r3, #1
 8002532:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <LL_InitTick+0x30>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800253a:	4b04      	ldr	r3, [pc, #16]	; (800254c <LL_InitTick+0x30>)
 800253c:	2205      	movs	r2, #5
 800253e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	e000e010 	.word	0xe000e010

08002550 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002558:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ffdd 	bl	800251c <LL_InitTick>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002574:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <LL_mDelay+0x44>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800257a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002582:	d00c      	beq.n	800259e <LL_mDelay+0x32>
  {
    Delay++;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3301      	adds	r3, #1
 8002588:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800258a:	e008      	b.n	800259e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <LL_mDelay+0x44>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <LL_mDelay+0x32>
    {
      Delay--;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f3      	bne.n	800258c <LL_mDelay+0x20>
    }
  }
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	e000e010 	.word	0xe000e010

080025b4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80025bc:	4a03      	ldr	r2, [pc, #12]	; (80025cc <LL_SetSystemCoreClock+0x18>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6013      	str	r3, [r2, #0]
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	20000080 	.word	0x20000080

080025d0 <__libc_init_array>:
 80025d0:	b570      	push	{r4, r5, r6, lr}
 80025d2:	2600      	movs	r6, #0
 80025d4:	4d0c      	ldr	r5, [pc, #48]	; (8002608 <__libc_init_array+0x38>)
 80025d6:	4c0d      	ldr	r4, [pc, #52]	; (800260c <__libc_init_array+0x3c>)
 80025d8:	1b64      	subs	r4, r4, r5
 80025da:	10a4      	asrs	r4, r4, #2
 80025dc:	42a6      	cmp	r6, r4
 80025de:	d109      	bne.n	80025f4 <__libc_init_array+0x24>
 80025e0:	f000 f81a 	bl	8002618 <_init>
 80025e4:	2600      	movs	r6, #0
 80025e6:	4d0a      	ldr	r5, [pc, #40]	; (8002610 <__libc_init_array+0x40>)
 80025e8:	4c0a      	ldr	r4, [pc, #40]	; (8002614 <__libc_init_array+0x44>)
 80025ea:	1b64      	subs	r4, r4, r5
 80025ec:	10a4      	asrs	r4, r4, #2
 80025ee:	42a6      	cmp	r6, r4
 80025f0:	d105      	bne.n	80025fe <__libc_init_array+0x2e>
 80025f2:	bd70      	pop	{r4, r5, r6, pc}
 80025f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f8:	4798      	blx	r3
 80025fa:	3601      	adds	r6, #1
 80025fc:	e7ee      	b.n	80025dc <__libc_init_array+0xc>
 80025fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002602:	4798      	blx	r3
 8002604:	3601      	adds	r6, #1
 8002606:	e7f2      	b.n	80025ee <__libc_init_array+0x1e>
 8002608:	08002648 	.word	0x08002648
 800260c:	08002648 	.word	0x08002648
 8002610:	08002648 	.word	0x08002648
 8002614:	0800264c 	.word	0x0800264c

08002618 <_init>:
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261a:	bf00      	nop
 800261c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261e:	bc08      	pop	{r3}
 8002620:	469e      	mov	lr, r3
 8002622:	4770      	bx	lr

08002624 <_fini>:
 8002624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002626:	bf00      	nop
 8002628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262a:	bc08      	pop	{r3}
 800262c:	469e      	mov	lr, r3
 800262e:	4770      	bx	lr
