
Test_LL_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001990  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001a9c  08001a9c  00011a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001af4  08001af4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001af4  08001af4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001af4  08001af4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001af4  08001af4  00011af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001af8  08001af8  00011af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08001b00  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08001b00  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003b8f  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f89  00000000  00000000  00023bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000628  00000000  00000000  00024b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000048d  00000000  00000000  000251b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001258e  00000000  00000000  0002563d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000048c2  00000000  00000000  00037bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005fcfb  00000000  00000000  0003c48d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001890  00000000  00000000  0009c188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0009da18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a84 	.word	0x08001a84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08001a84 	.word	0x08001a84

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <LL_RCC_HSI_Enable+0x18>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a03      	ldr	r2, [pc, #12]	; (80001ac <LL_RCC_HSI_Enable+0x18>)
 800019e:	f043 0301 	orr.w	r3, r3, #1
 80001a2:	6013      	str	r3, [r2, #0]
}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40021000 	.word	0x40021000

080001b0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80001b4:	4b06      	ldr	r3, [pc, #24]	; (80001d0 <LL_RCC_HSI_IsReady+0x20>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	f003 0302 	and.w	r3, r3, #2
 80001bc:	2b02      	cmp	r3, #2
 80001be:	bf0c      	ite	eq
 80001c0:	2301      	moveq	r3, #1
 80001c2:	2300      	movne	r3, #0
 80001c4:	b2db      	uxtb	r3, r3
}
 80001c6:	4618      	mov	r0, r3
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	40021000 	.word	0x40021000

080001d4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	00db      	lsls	r3, r3, #3
 80001e8:	4903      	ldr	r1, [pc, #12]	; (80001f8 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80001ea:	4313      	orrs	r3, r2
 80001ec:	600b      	str	r3, [r1, #0]
}
 80001ee:	bf00      	nop
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	40021000 	.word	0x40021000

080001fc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000204:	4b06      	ldr	r3, [pc, #24]	; (8000220 <LL_RCC_SetSysClkSource+0x24>)
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	f023 0203 	bic.w	r2, r3, #3
 800020c:	4904      	ldr	r1, [pc, #16]	; (8000220 <LL_RCC_SetSysClkSource+0x24>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4313      	orrs	r3, r2
 8000212:	604b      	str	r3, [r1, #4]
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40021000 	.word	0x40021000

08000224 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000228:	4b03      	ldr	r3, [pc, #12]	; (8000238 <LL_RCC_GetSysClkSource+0x14>)
 800022a:	685b      	ldr	r3, [r3, #4]
 800022c:	f003 030c 	and.w	r3, r3, #12
}
 8000230:	4618      	mov	r0, r3
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	40021000 	.word	0x40021000

0800023c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000244:	4b06      	ldr	r3, [pc, #24]	; (8000260 <LL_RCC_SetAHBPrescaler+0x24>)
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800024c:	4904      	ldr	r1, [pc, #16]	; (8000260 <LL_RCC_SetAHBPrescaler+0x24>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4313      	orrs	r3, r2
 8000252:	604b      	str	r3, [r1, #4]
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40021000 	.word	0x40021000

08000264 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800026c:	4b06      	ldr	r3, [pc, #24]	; (8000288 <LL_RCC_SetAPB1Prescaler+0x24>)
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000274:	4904      	ldr	r1, [pc, #16]	; (8000288 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4313      	orrs	r3, r2
 800027a:	604b      	str	r3, [r1, #4]
}
 800027c:	bf00      	nop
 800027e:	370c      	adds	r7, #12
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	40021000 	.word	0x40021000

0800028c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800029c:	4904      	ldr	r1, [pc, #16]	; (80002b0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4313      	orrs	r3, r2
 80002a2:	604b      	str	r3, [r1, #4]
}
 80002a4:	bf00      	nop
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40021000 	.word	0x40021000

080002b4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <LL_RCC_PLL_Enable+0x18>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a03      	ldr	r2, [pc, #12]	; (80002cc <LL_RCC_PLL_Enable+0x18>)
 80002be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	40021000 	.word	0x40021000

080002d0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <LL_RCC_PLL_IsReady+0x20>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80002e0:	bf0c      	ite	eq
 80002e2:	2301      	moveq	r3, #1
 80002e4:	2300      	movne	r3, #0
 80002e6:	b2db      	uxtb	r3, r3
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	40021000 	.word	0x40021000

080002f4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	430b      	orrs	r3, r1
 8000310:	4903      	ldr	r1, [pc, #12]	; (8000320 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000312:	4313      	orrs	r3, r2
 8000314:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	40021000 	.word	0x40021000

08000324 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <LL_APB1_GRP1_EnableClock+0x2c>)
 800032e:	69da      	ldr	r2, [r3, #28]
 8000330:	4907      	ldr	r1, [pc, #28]	; (8000350 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4313      	orrs	r3, r2
 8000336:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <LL_APB1_GRP1_EnableClock+0x2c>)
 800033a:	69da      	ldr	r2, [r3, #28]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4013      	ands	r3, r2
 8000340:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000342:	68fb      	ldr	r3, [r7, #12]
}
 8000344:	bf00      	nop
 8000346:	3714      	adds	r7, #20
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000

08000354 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <LL_APB2_GRP1_EnableClock+0x2c>)
 800035e:	699a      	ldr	r2, [r3, #24]
 8000360:	4907      	ldr	r1, [pc, #28]	; (8000380 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4313      	orrs	r3, r2
 8000366:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <LL_APB2_GRP1_EnableClock+0x2c>)
 800036a:	699a      	ldr	r2, [r3, #24]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4013      	ands	r3, r2
 8000370:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000372:	68fb      	ldr	r3, [r7, #12]
}
 8000374:	bf00      	nop
 8000376:	3714      	adds	r7, #20
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40021000 	.word	0x40021000

08000384 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <LL_FLASH_SetLatency+0x24>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f023 0207 	bic.w	r2, r3, #7
 8000394:	4904      	ldr	r1, [pc, #16]	; (80003a8 <LL_FLASH_SetLatency+0x24>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4313      	orrs	r3, r2
 800039a:	600b      	str	r3, [r1, #0]
}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bc80      	pop	{r7}
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	40022000 	.word	0x40022000

080003ac <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80003b0:	4b03      	ldr	r3, [pc, #12]	; (80003c0 <LL_FLASH_GetLatency+0x14>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 0307 	and.w	r3, r3, #7
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	40022000 	.word	0x40022000

080003c4 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f043 0201 	orr.w	r2, r3, #1
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	601a      	str	r2, [r3, #0]
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc80      	pop	{r7}
 80003e0:	4770      	bx	lr

080003e2 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 80003e2:	b480      	push	{r7}
 80003e4:	b083      	sub	sp, #12
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f023 0201 	bic.w	r2, r3, #1
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	601a      	str	r2, [r3, #0]
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr

08000400 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	601a      	str	r2, [r3, #0]
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr

0800041e <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800041e:	b480      	push	{r7}
 8000420:	b083      	sub	sp, #12
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
 8000426:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000430:	f023 0307 	bic.w	r3, r3, #7
 8000434:	683a      	ldr	r2, [r7, #0]
 8000436:	431a      	orrs	r2, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	609a      	str	r2, [r3, #8]
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr

08000446 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000446:	b480      	push	{r7}
 8000448:	b083      	sub	sp, #12
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
 800044e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	431a      	orrs	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	605a      	str	r2, [r3, #4]
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr

0800046a <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800046a:	b480      	push	{r7}
 800046c:	b083      	sub	sp, #12
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	609a      	str	r2, [r3, #8]
}
 800047e:	bf00      	nop
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	60da      	str	r2, [r3, #12]
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80004a6:	b480      	push	{r7}
 80004a8:	b083      	sub	sp, #12
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	691b      	ldr	r3, [r3, #16]
 80004b2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	615a      	str	r2, [r3, #20]
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	0a1b      	lsrs	r3, r3, #8
 80004de:	b29a      	uxth	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	611a      	str	r2, [r3, #16]
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr

080004ee <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
 80004f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	0a1b      	lsrs	r3, r3, #8
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	615a      	str	r2, [r3, #20]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000518:	4a03      	ldr	r2, [pc, #12]	; (8000528 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 800051a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800051e:	6053      	str	r3, [r2, #4]
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	40010000 	.word	0x40010000

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b09a      	sub	sp, #104	; 0x68
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000532:	2001      	movs	r0, #1
 8000534:	f7ff ff0e 	bl	8000354 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000538:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800053c:	f7ff fef2 	bl	8000324 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000540:	2003      	movs	r0, #3
 8000542:	f7ff fe03 	bl	800014c <__NVIC_SetPriorityGrouping>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000546:	f7ff ffe1 	bl	800050c <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f893 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f959 	bl	8000804 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f901 	bl	8000758 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000556:	f000 f8cd 	bl	80006f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  int count=0;
 800055a:	2300      	movs	r3, #0
 800055c:	667b      	str	r3, [r7, #100]	; 0x64
  char buffer_[15];
  char buffer_2[15];
  unsigned char dotMatrixBoard[ROWS][COLS] = {
 800055e:	4b44      	ldr	r3, [pc, #272]	; (8000670 <main+0x144>)
 8000560:	1d3c      	adds	r4, r7, #4
 8000562:	461d      	mov	r5, r3
 8000564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000570:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000574:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  //LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1); //CCER register CC1E bit. (ENABLE)



  /* choose to which to Off color */
  write_serial_in_parallel_out_register_minus_red(0b11111111);
 8000578:	20ff      	movs	r0, #255	; 0xff
 800057a:	f000 fc47 	bl	8000e0c <write_serial_in_parallel_out_register_minus_red>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //row:0
	  write_serial_in_parallel_out_register_plus(0b10000000);
 800057e:	2080      	movs	r0, #128	; 0x80
 8000580:	f000 f996 	bl	80008b0 <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard, 0));
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f000 fda9 	bl	80010e0 <rowToBinary>
 800058e:	4603      	mov	r3, r0
 8000590:	4618      	mov	r0, r3
 8000592:	f000 fae9 	bl	8000b68 <write_serial_in_parallel_out_register_minus_yellow>
	  //write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard, 0));
	  LL_mDelay(1);
 8000596:	2001      	movs	r0, #1
 8000598:	f001 fa1e 	bl	80019d8 <LL_mDelay>
	  //row:1
	  write_serial_in_parallel_out_register_plus(0b01000000);
 800059c:	2040      	movs	r0, #64	; 0x40
 800059e:	f000 f987 	bl	80008b0 <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard, 1));
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2101      	movs	r1, #1
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fd9a 	bl	80010e0 <rowToBinary>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 fada 	bl	8000b68 <write_serial_in_parallel_out_register_minus_yellow>
	  //write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard, 1));
	  LL_mDelay(1);
 80005b4:	2001      	movs	r0, #1
 80005b6:	f001 fa0f 	bl	80019d8 <LL_mDelay>
	  //row:2
	  write_serial_in_parallel_out_register_plus(0b00100000);
 80005ba:	2020      	movs	r0, #32
 80005bc:	f000 f978 	bl	80008b0 <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard, 2));
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2102      	movs	r1, #2
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 fd8b 	bl	80010e0 <rowToBinary>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 facb 	bl	8000b68 <write_serial_in_parallel_out_register_minus_yellow>
	  //write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard, 2));
	  LL_mDelay(1);
 80005d2:	2001      	movs	r0, #1
 80005d4:	f001 fa00 	bl	80019d8 <LL_mDelay>
	  //row:3
	  write_serial_in_parallel_out_register_plus(0b00010000);
 80005d8:	2010      	movs	r0, #16
 80005da:	f000 f969 	bl	80008b0 <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard, 3));
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2103      	movs	r1, #3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fd7c 	bl	80010e0 <rowToBinary>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fabc 	bl	8000b68 <write_serial_in_parallel_out_register_minus_yellow>
	  //write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard, 3));
	  LL_mDelay(1);
 80005f0:	2001      	movs	r0, #1
 80005f2:	f001 f9f1 	bl	80019d8 <LL_mDelay>
	  //row:4
	  write_serial_in_parallel_out_register_plus(0b00001000);
 80005f6:	2008      	movs	r0, #8
 80005f8:	f000 f95a 	bl	80008b0 <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard, 4));
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2104      	movs	r1, #4
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fd6d 	bl	80010e0 <rowToBinary>
 8000606:	4603      	mov	r3, r0
 8000608:	4618      	mov	r0, r3
 800060a:	f000 faad 	bl	8000b68 <write_serial_in_parallel_out_register_minus_yellow>
	  //write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard, 4));
	  LL_mDelay(1);
 800060e:	2001      	movs	r0, #1
 8000610:	f001 f9e2 	bl	80019d8 <LL_mDelay>
	  //row:5
	  write_serial_in_parallel_out_register_plus(0b00000100);
 8000614:	2004      	movs	r0, #4
 8000616:	f000 f94b 	bl	80008b0 <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard, 5));
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2105      	movs	r1, #5
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fd5e 	bl	80010e0 <rowToBinary>
 8000624:	4603      	mov	r3, r0
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fa9e 	bl	8000b68 <write_serial_in_parallel_out_register_minus_yellow>
	  //write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard, 5));
	  LL_mDelay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f001 f9d3 	bl	80019d8 <LL_mDelay>
	  //row:6
	  write_serial_in_parallel_out_register_plus(0b00000010);
 8000632:	2002      	movs	r0, #2
 8000634:	f000 f93c 	bl	80008b0 <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard, 6));
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2106      	movs	r1, #6
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fd4f 	bl	80010e0 <rowToBinary>
 8000642:	4603      	mov	r3, r0
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fa8f 	bl	8000b68 <write_serial_in_parallel_out_register_minus_yellow>
	  //write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard, 6));
	  LL_mDelay(1);
 800064a:	2001      	movs	r0, #1
 800064c:	f001 f9c4 	bl	80019d8 <LL_mDelay>
	  //row:7
	  write_serial_in_parallel_out_register_plus(0b00000001);
 8000650:	2001      	movs	r0, #1
 8000652:	f000 f92d 	bl	80008b0 <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard, 7));
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2107      	movs	r1, #7
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fd40 	bl	80010e0 <rowToBinary>
 8000660:	4603      	mov	r3, r0
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fa80 	bl	8000b68 <write_serial_in_parallel_out_register_minus_yellow>
	  //write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard, 7));
	  LL_mDelay(1);
 8000668:	2001      	movs	r0, #1
 800066a:	f001 f9b5 	bl	80019d8 <LL_mDelay>
  {
 800066e:	e786      	b.n	800057e <main+0x52>
 8000670:	08001a9c 	.word	0x08001a9c

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000678:	2002      	movs	r0, #2
 800067a:	f7ff fe83 	bl	8000384 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800067e:	bf00      	nop
 8000680:	f7ff fe94 	bl	80003ac <LL_FLASH_GetLatency>
 8000684:	4603      	mov	r3, r0
 8000686:	2b02      	cmp	r3, #2
 8000688:	d1fa      	bne.n	8000680 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800068a:	2010      	movs	r0, #16
 800068c:	f7ff fda2 	bl	80001d4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000690:	f7ff fd80 	bl	8000194 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000694:	bf00      	nop
 8000696:	f7ff fd8b 	bl	80001b0 <LL_RCC_HSI_IsReady>
 800069a:	4603      	mov	r3, r0
 800069c:	2b01      	cmp	r3, #1
 800069e:	d1fa      	bne.n	8000696 <SystemClock_Config+0x22>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
 80006a0:	f44f 1160 	mov.w	r1, #3670016	; 0x380000
 80006a4:	2000      	movs	r0, #0
 80006a6:	f7ff fe25 	bl	80002f4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80006aa:	f7ff fe03 	bl	80002b4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80006ae:	bf00      	nop
 80006b0:	f7ff fe0e 	bl	80002d0 <LL_RCC_PLL_IsReady>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d1fa      	bne.n	80006b0 <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f7ff fdbe 	bl	800023c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80006c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80006c4:	f7ff fdce 	bl	8000264 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80006c8:	2000      	movs	r0, #0
 80006ca:	f7ff fddf 	bl	800028c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80006ce:	2002      	movs	r0, #2
 80006d0:	f7ff fd94 	bl	80001fc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80006d4:	bf00      	nop
 80006d6:	f7ff fda5 	bl	8000224 <LL_RCC_GetSysClkSource>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b08      	cmp	r3, #8
 80006de:	d1fa      	bne.n	80006d6 <SystemClock_Config+0x62>
  {

  }
  LL_Init1msTick(64000000);
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <SystemClock_Config+0x7c>)
 80006e2:	f001 f96b 	bl	80019bc <LL_Init1msTick>
  LL_SetSystemCoreClock(64000000);
 80006e6:	4802      	ldr	r0, [pc, #8]	; (80006f0 <SystemClock_Config+0x7c>)
 80006e8:	f001 f99a 	bl	8001a20 <LL_SetSystemCoreClock>
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	03d09000 	.word	0x03d09000

080006f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000708:	2001      	movs	r0, #1
 800070a:	f7ff fe0b 	bl	8000324 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 63;
 800070e:	233f      	movs	r3, #63	; 0x3f
 8000710:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8000716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800071a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	4619      	mov	r1, r3
 8000724:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000728:	f000 ffda 	bl	80016e0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800072c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000730:	f7ff fe66 	bl	8000400 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000734:	2100      	movs	r1, #0
 8000736:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800073a:	f7ff fe70 	bl	800041e <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800073e:	2100      	movs	r1, #0
 8000740:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000744:	f7ff fe7f 	bl	8000446 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000748:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800074c:	f7ff fe8d 	bl	800046a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
 800076e:	615a      	str	r2, [r3, #20]
 8000770:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	463b      	mov	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000780:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000784:	f7ff fdce 	bl	8000324 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000788:	2004      	movs	r0, #4
 800078a:	f7ff fde3 	bl	8000354 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800078e:	f240 4304 	movw	r3, #1028	; 0x404
 8000792:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000794:	2309      	movs	r3, #9
 8000796:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	4815      	ldr	r0, [pc, #84]	; (80007fc <MX_USART2_UART_Init+0xa4>)
 80007a6:	f000 fdec 	bl	8001382 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80007aa:	f640 0308 	movw	r3, #2056	; 0x808
 80007ae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80007b0:	2304      	movs	r3, #4
 80007b2:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	463b      	mov	r3, r7
 80007b6:	4619      	mov	r1, r3
 80007b8:	4810      	ldr	r0, [pc, #64]	; (80007fc <MX_USART2_UART_Init+0xa4>)
 80007ba:	f000 fde2 	bl	8001382 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80007be:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80007c2:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80007d0:	230c      	movs	r3, #12
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80007d8:	2300      	movs	r3, #0
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	4807      	ldr	r0, [pc, #28]	; (8000800 <MX_USART2_UART_Init+0xa8>)
 80007e4:	f001 f870 	bl	80018c8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_USART2_UART_Init+0xa8>)
 80007ea:	f7ff fe5c 	bl	80004a6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_USART2_UART_Init+0xa8>)
 80007f0:	f7ff fe4a 	bl	8000488 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	3730      	adds	r7, #48	; 0x30
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40010800 	.word	0x40010800
 8000800:	40004400 	.word	0x40004400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000818:	2004      	movs	r0, #4
 800081a:	f7ff fd9b 	bl	8000354 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800081e:	2008      	movs	r0, #8
 8000820:	f7ff fd98 	bl	8000354 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8000824:	2010      	movs	r0, #16
 8000826:	f7ff fd95 	bl	8000354 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, MR_3_Pin|MR_2_Pin|DSA_3_Pin|DSA_1_Pin);
 800082a:	491c      	ldr	r1, [pc, #112]	; (800089c <MX_GPIO_Init+0x98>)
 800082c:	481c      	ldr	r0, [pc, #112]	; (80008a0 <MX_GPIO_Init+0x9c>)
 800082e:	f7ff fe5e 	bl	80004ee <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, CP_2_Pin|DSA_2_Pin|CP_1_Pin|MR_1_Pin);
 8000832:	491c      	ldr	r1, [pc, #112]	; (80008a4 <MX_GPIO_Init+0xa0>)
 8000834:	481c      	ldr	r0, [pc, #112]	; (80008a8 <MX_GPIO_Init+0xa4>)
 8000836:	f7ff fe5a 	bl	80004ee <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CP_3_GPIO_Port, CP_3_Pin);
 800083a:	f248 0180 	movw	r1, #32896	; 0x8080
 800083e:	481b      	ldr	r0, [pc, #108]	; (80008ac <MX_GPIO_Init+0xa8>)
 8000840:	f7ff fe55 	bl	80004ee <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MR_3_Pin|MR_2_Pin|DSA_3_Pin|DSA_1_Pin;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_GPIO_Init+0x98>)
 8000846:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000848:	2301      	movs	r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800084c:	2302      	movs	r3, #2
 800084e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	4619      	mov	r1, r3
 8000858:	4811      	ldr	r0, [pc, #68]	; (80008a0 <MX_GPIO_Init+0x9c>)
 800085a:	f000 fd92 	bl	8001382 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CP_2_Pin|DSA_2_Pin|CP_1_Pin|MR_1_Pin;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_GPIO_Init+0xa0>)
 8000860:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000862:	2301      	movs	r3, #1
 8000864:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000866:	2302      	movs	r3, #2
 8000868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	4619      	mov	r1, r3
 8000872:	480d      	ldr	r0, [pc, #52]	; (80008a8 <MX_GPIO_Init+0xa4>)
 8000874:	f000 fd85 	bl	8001382 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CP_3_Pin;
 8000878:	f248 0380 	movw	r3, #32896	; 0x8080
 800087c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800087e:	2301      	movs	r3, #1
 8000880:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000882:	2302      	movs	r3, #2
 8000884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CP_3_GPIO_Port, &GPIO_InitStruct);
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	4619      	mov	r1, r3
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <MX_GPIO_Init+0xa8>)
 8000890:	f000 fd77 	bl	8001382 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000894:	bf00      	nop
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	04078087 	.word	0x04078087
 80008a0:	40010800 	.word	0x40010800
 80008a4:	04445054 	.word	0x04445054
 80008a8:	40010c00 	.word	0x40010c00
 80008ac:	40011000 	.word	0x40011000

080008b0 <write_serial_in_parallel_out_register_plus>:
	LL_mDelay(100);
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10);
	LL_mDelay(100);
}

void write_serial_in_parallel_out_register_plus(unsigned char data){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	 *      data      1    1   0   0   0  0   0   1
	 *
	 *
	 */
	//all reset
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80008ba:	49a6      	ldr	r1, [pc, #664]	; (8000b54 <write_serial_in_parallel_out_register_plus+0x2a4>)
 80008bc:	48a6      	ldr	r0, [pc, #664]	; (8000b58 <write_serial_in_parallel_out_register_plus+0x2a8>)
 80008be:	f7ff fe16 	bl	80004ee <LL_GPIO_ResetOutputPin>
	delay_us(1);
 80008c2:	2001      	movs	r0, #1
 80008c4:	f000 fc38 	bl	8001138 <delay_us>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80008c8:	49a2      	ldr	r1, [pc, #648]	; (8000b54 <write_serial_in_parallel_out_register_plus+0x2a4>)
 80008ca:	48a3      	ldr	r0, [pc, #652]	; (8000b58 <write_serial_in_parallel_out_register_plus+0x2a8>)
 80008cc:	f7ff fe00 	bl	80004d0 <LL_GPIO_SetOutputPin>

	//Q7
	unsigned int bitValue = bitRead(data, 0);
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]

	switch(bitValue){
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d003      	beq.n	80008e6 <write_serial_in_parallel_out_register_plus+0x36>
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d005      	beq.n	80008f0 <write_serial_in_parallel_out_register_plus+0x40>
 80008e4:	e009      	b.n	80008fa <write_serial_in_parallel_out_register_plus+0x4a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 80008e6:	499d      	ldr	r1, [pc, #628]	; (8000b5c <write_serial_in_parallel_out_register_plus+0x2ac>)
 80008e8:	489d      	ldr	r0, [pc, #628]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 80008ea:	f7ff fe00 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 80008ee:	e004      	b.n	80008fa <write_serial_in_parallel_out_register_plus+0x4a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 80008f0:	499a      	ldr	r1, [pc, #616]	; (8000b5c <write_serial_in_parallel_out_register_plus+0x2ac>)
 80008f2:	489b      	ldr	r0, [pc, #620]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 80008f4:	f7ff fdec 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 80008f8:	bf00      	nop

	}

	delay_us(1);
 80008fa:	2001      	movs	r0, #1
 80008fc:	f000 fc1c 	bl	8001138 <delay_us>

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 1
 8000900:	4998      	ldr	r1, [pc, #608]	; (8000b64 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000902:	4897      	ldr	r0, [pc, #604]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000904:	f7ff fde4 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000908:	2001      	movs	r0, #1
 800090a:	f000 fc15 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 800090e:	4995      	ldr	r1, [pc, #596]	; (8000b64 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000910:	4893      	ldr	r0, [pc, #588]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000912:	f7ff fdec 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000916:	2001      	movs	r0, #1
 8000918:	f000 fc0e 	bl	8001138 <delay_us>

	//Q6
	bitValue = bitRead(data, 1);
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	085b      	lsrs	r3, r3, #1
 8000920:	b2db      	uxtb	r3, r3
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d003      	beq.n	8000936 <write_serial_in_parallel_out_register_plus+0x86>
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d005      	beq.n	8000940 <write_serial_in_parallel_out_register_plus+0x90>
 8000934:	e009      	b.n	800094a <write_serial_in_parallel_out_register_plus+0x9a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000936:	4989      	ldr	r1, [pc, #548]	; (8000b5c <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000938:	4889      	ldr	r0, [pc, #548]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 800093a:	f7ff fdd8 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 800093e:	e004      	b.n	800094a <write_serial_in_parallel_out_register_plus+0x9a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000940:	4986      	ldr	r1, [pc, #536]	; (8000b5c <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000942:	4887      	ldr	r0, [pc, #540]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000944:	f7ff fdc4 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000948:	bf00      	nop

	}

	delay_us(1);
 800094a:	2001      	movs	r0, #1
 800094c:	f000 fbf4 	bl	8001138 <delay_us>

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 2
 8000950:	4984      	ldr	r1, [pc, #528]	; (8000b64 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000952:	4883      	ldr	r0, [pc, #524]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000954:	f7ff fdbc 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000958:	2001      	movs	r0, #1
 800095a:	f000 fbed 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 800095e:	4981      	ldr	r1, [pc, #516]	; (8000b64 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000960:	487f      	ldr	r0, [pc, #508]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000962:	f7ff fdc4 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000966:	2001      	movs	r0, #1
 8000968:	f000 fbe6 	bl	8001138 <delay_us>

	//Q5
	bitValue = bitRead(data, 2);
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	089b      	lsrs	r3, r3, #2
 8000970:	b2db      	uxtb	r3, r3
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d003      	beq.n	8000986 <write_serial_in_parallel_out_register_plus+0xd6>
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d005      	beq.n	8000990 <write_serial_in_parallel_out_register_plus+0xe0>
 8000984:	e009      	b.n	800099a <write_serial_in_parallel_out_register_plus+0xea>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000986:	4975      	ldr	r1, [pc, #468]	; (8000b5c <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000988:	4875      	ldr	r0, [pc, #468]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 800098a:	f7ff fdb0 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 800098e:	e004      	b.n	800099a <write_serial_in_parallel_out_register_plus+0xea>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000990:	4972      	ldr	r1, [pc, #456]	; (8000b5c <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000992:	4873      	ldr	r0, [pc, #460]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000994:	f7ff fd9c 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000998:	bf00      	nop

	}

	delay_us(1);
 800099a:	2001      	movs	r0, #1
 800099c:	f000 fbcc 	bl	8001138 <delay_us>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 3
 80009a0:	4970      	ldr	r1, [pc, #448]	; (8000b64 <write_serial_in_parallel_out_register_plus+0x2b4>)
 80009a2:	486f      	ldr	r0, [pc, #444]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 80009a4:	f7ff fd94 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f000 fbc5 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 80009ae:	496d      	ldr	r1, [pc, #436]	; (8000b64 <write_serial_in_parallel_out_register_plus+0x2b4>)
 80009b0:	486b      	ldr	r0, [pc, #428]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 80009b2:	f7ff fd9c 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 80009b6:	2001      	movs	r0, #1
 80009b8:	f000 fbbe 	bl	8001138 <delay_us>

	//Q4
	bitValue = bitRead(data, 3);
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	08db      	lsrs	r3, r3, #3
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d003      	beq.n	80009d6 <write_serial_in_parallel_out_register_plus+0x126>
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d005      	beq.n	80009e0 <write_serial_in_parallel_out_register_plus+0x130>
 80009d4:	e009      	b.n	80009ea <write_serial_in_parallel_out_register_plus+0x13a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 80009d6:	4961      	ldr	r1, [pc, #388]	; (8000b5c <write_serial_in_parallel_out_register_plus+0x2ac>)
 80009d8:	4861      	ldr	r0, [pc, #388]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 80009da:	f7ff fd88 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 80009de:	e004      	b.n	80009ea <write_serial_in_parallel_out_register_plus+0x13a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 80009e0:	495e      	ldr	r1, [pc, #376]	; (8000b5c <write_serial_in_parallel_out_register_plus+0x2ac>)
 80009e2:	485f      	ldr	r0, [pc, #380]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 80009e4:	f7ff fd74 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 80009e8:	bf00      	nop

	}

	delay_us(1);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f000 fba4 	bl	8001138 <delay_us>

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 4
 80009f0:	495c      	ldr	r1, [pc, #368]	; (8000b64 <write_serial_in_parallel_out_register_plus+0x2b4>)
 80009f2:	485b      	ldr	r0, [pc, #364]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 80009f4:	f7ff fd6c 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f000 fb9d 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 80009fe:	4959      	ldr	r1, [pc, #356]	; (8000b64 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000a00:	4857      	ldr	r0, [pc, #348]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000a02:	f7ff fd74 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000a06:	2001      	movs	r0, #1
 8000a08:	f000 fb96 	bl	8001138 <delay_us>

	//Q3
	bitValue = bitRead(data, 4);
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	091b      	lsrs	r3, r3, #4
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d003      	beq.n	8000a26 <write_serial_in_parallel_out_register_plus+0x176>
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d005      	beq.n	8000a30 <write_serial_in_parallel_out_register_plus+0x180>
 8000a24:	e009      	b.n	8000a3a <write_serial_in_parallel_out_register_plus+0x18a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000a26:	494d      	ldr	r1, [pc, #308]	; (8000b5c <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000a28:	484d      	ldr	r0, [pc, #308]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000a2a:	f7ff fd60 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 8000a2e:	e004      	b.n	8000a3a <write_serial_in_parallel_out_register_plus+0x18a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000a30:	494a      	ldr	r1, [pc, #296]	; (8000b5c <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000a32:	484b      	ldr	r0, [pc, #300]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000a34:	f7ff fd4c 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000a38:	bf00      	nop

	}

	delay_us(1);
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f000 fb7c 	bl	8001138 <delay_us>

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 5
 8000a40:	4948      	ldr	r1, [pc, #288]	; (8000b64 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000a42:	4847      	ldr	r0, [pc, #284]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000a44:	f7ff fd44 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f000 fb75 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000a4e:	4945      	ldr	r1, [pc, #276]	; (8000b64 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000a50:	4843      	ldr	r0, [pc, #268]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000a52:	f7ff fd4c 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000a56:	2001      	movs	r0, #1
 8000a58:	f000 fb6e 	bl	8001138 <delay_us>

	//Q2
	bitValue = bitRead(data, 5);
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	095b      	lsrs	r3, r3, #5
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <write_serial_in_parallel_out_register_plus+0x1c6>
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d005      	beq.n	8000a80 <write_serial_in_parallel_out_register_plus+0x1d0>
 8000a74:	e009      	b.n	8000a8a <write_serial_in_parallel_out_register_plus+0x1da>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000a76:	4939      	ldr	r1, [pc, #228]	; (8000b5c <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000a78:	4839      	ldr	r0, [pc, #228]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000a7a:	f7ff fd38 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 8000a7e:	e004      	b.n	8000a8a <write_serial_in_parallel_out_register_plus+0x1da>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000a80:	4936      	ldr	r1, [pc, #216]	; (8000b5c <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000a82:	4837      	ldr	r0, [pc, #220]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000a84:	f7ff fd24 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000a88:	bf00      	nop

	}

	delay_us(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f000 fb54 	bl	8001138 <delay_us>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 6
 8000a90:	4934      	ldr	r1, [pc, #208]	; (8000b64 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000a92:	4833      	ldr	r0, [pc, #204]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000a94:	f7ff fd1c 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f000 fb4d 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000a9e:	4931      	ldr	r1, [pc, #196]	; (8000b64 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000aa0:	482f      	ldr	r0, [pc, #188]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000aa2:	f7ff fd24 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f000 fb46 	bl	8001138 <delay_us>

	//Q1
	bitValue = bitRead(data, 6);
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	099b      	lsrs	r3, r3, #6
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d003      	beq.n	8000ac6 <write_serial_in_parallel_out_register_plus+0x216>
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d005      	beq.n	8000ad0 <write_serial_in_parallel_out_register_plus+0x220>
 8000ac4:	e009      	b.n	8000ada <write_serial_in_parallel_out_register_plus+0x22a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000ac6:	4925      	ldr	r1, [pc, #148]	; (8000b5c <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000ac8:	4825      	ldr	r0, [pc, #148]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000aca:	f7ff fd10 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 8000ace:	e004      	b.n	8000ada <write_serial_in_parallel_out_register_plus+0x22a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000ad0:	4922      	ldr	r1, [pc, #136]	; (8000b5c <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000ad2:	4823      	ldr	r0, [pc, #140]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000ad4:	f7ff fcfc 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000ad8:	bf00      	nop

	}

	delay_us(1);
 8000ada:	2001      	movs	r0, #1
 8000adc:	f000 fb2c 	bl	8001138 <delay_us>

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 7
 8000ae0:	4920      	ldr	r1, [pc, #128]	; (8000b64 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000ae2:	481f      	ldr	r0, [pc, #124]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000ae4:	f7ff fcf4 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f000 fb25 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000aee:	491d      	ldr	r1, [pc, #116]	; (8000b64 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000af0:	481b      	ldr	r0, [pc, #108]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000af2:	f7ff fcfc 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000af6:	2001      	movs	r0, #1
 8000af8:	f000 fb1e 	bl	8001138 <delay_us>

	//Q0
	bitValue = bitRead(data, 7);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	09db      	lsrs	r3, r3, #7
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <write_serial_in_parallel_out_register_plus+0x266>
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d005      	beq.n	8000b20 <write_serial_in_parallel_out_register_plus+0x270>
 8000b14:	e009      	b.n	8000b2a <write_serial_in_parallel_out_register_plus+0x27a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000b16:	4911      	ldr	r1, [pc, #68]	; (8000b5c <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000b18:	4811      	ldr	r0, [pc, #68]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000b1a:	f7ff fce8 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 8000b1e:	e004      	b.n	8000b2a <write_serial_in_parallel_out_register_plus+0x27a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000b20:	490e      	ldr	r1, [pc, #56]	; (8000b5c <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000b22:	480f      	ldr	r0, [pc, #60]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000b24:	f7ff fcd4 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000b28:	bf00      	nop

	}

	delay_us(1);
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f000 fb04 	bl	8001138 <delay_us>

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 8
 8000b30:	490c      	ldr	r1, [pc, #48]	; (8000b64 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000b32:	480b      	ldr	r0, [pc, #44]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000b34:	f7ff fccc 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f000 fafd 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000b3e:	4909      	ldr	r1, [pc, #36]	; (8000b64 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000b40:	4807      	ldr	r0, [pc, #28]	; (8000b60 <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000b42:	f7ff fcd4 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000b46:	2001      	movs	r0, #1
 8000b48:	f000 faf6 	bl	8001138 <delay_us>

}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	04010001 	.word	0x04010001
 8000b58:	40010800 	.word	0x40010800
 8000b5c:	04400040 	.word	0x04400040
 8000b60:	40010c00 	.word	0x40010c00
 8000b64:	04040004 	.word	0x04040004

08000b68 <write_serial_in_parallel_out_register_minus_yellow>:
	//LL_mDelay(time_gap);
	delay_us(1);

}

void write_serial_in_parallel_out_register_minus_yellow(unsigned char data){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	 *      data      1    1   0   0   0  0   0   1
	 *
	 *
	 */
	//all reset
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8000b72:	f244 0140 	movw	r1, #16448	; 0x4040
 8000b76:	48a2      	ldr	r0, [pc, #648]	; (8000e00 <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000b78:	f7ff fcb9 	bl	80004ee <LL_GPIO_ResetOutputPin>
	delay_us(1);
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f000 fadb 	bl	8001138 <delay_us>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8000b82:	f244 0140 	movw	r1, #16448	; 0x4040
 8000b86:	489e      	ldr	r0, [pc, #632]	; (8000e00 <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000b88:	f7ff fca2 	bl	80004d0 <LL_GPIO_SetOutputPin>

	//Q7
	unsigned int bitValue = bitRead(data, 0);
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]

	switch(bitValue){
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d003      	beq.n	8000ba2 <write_serial_in_parallel_out_register_minus_yellow+0x3a>
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d005      	beq.n	8000bac <write_serial_in_parallel_out_register_minus_yellow+0x44>
 8000ba0:	e009      	b.n	8000bb6 <write_serial_in_parallel_out_register_minus_yellow+0x4e>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8000ba2:	4998      	ldr	r1, [pc, #608]	; (8000e04 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000ba4:	4898      	ldr	r0, [pc, #608]	; (8000e08 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000ba6:	f7ff fca2 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 8000baa:	e004      	b.n	8000bb6 <write_serial_in_parallel_out_register_minus_yellow+0x4e>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8000bac:	4995      	ldr	r1, [pc, #596]	; (8000e04 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000bae:	4896      	ldr	r0, [pc, #600]	; (8000e08 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000bb0:	f7ff fc8e 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000bb4:	bf00      	nop

	}

	//delay_us(1);

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 1
 8000bb6:	f241 0110 	movw	r1, #4112	; 0x1010
 8000bba:	4891      	ldr	r0, [pc, #580]	; (8000e00 <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000bbc:	f7ff fc88 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f000 fab9 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000bc6:	f241 0110 	movw	r1, #4112	; 0x1010
 8000bca:	488d      	ldr	r0, [pc, #564]	; (8000e00 <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000bcc:	f7ff fc8f 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f000 fab1 	bl	8001138 <delay_us>

	//Q6
	bitValue = bitRead(data, 1);
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	085b      	lsrs	r3, r3, #1
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <write_serial_in_parallel_out_register_minus_yellow+0x88>
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d005      	beq.n	8000bfa <write_serial_in_parallel_out_register_minus_yellow+0x92>
 8000bee:	e009      	b.n	8000c04 <write_serial_in_parallel_out_register_minus_yellow+0x9c>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8000bf0:	4984      	ldr	r1, [pc, #528]	; (8000e04 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000bf2:	4885      	ldr	r0, [pc, #532]	; (8000e08 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000bf4:	f7ff fc7b 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 8000bf8:	e004      	b.n	8000c04 <write_serial_in_parallel_out_register_minus_yellow+0x9c>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8000bfa:	4982      	ldr	r1, [pc, #520]	; (8000e04 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000bfc:	4882      	ldr	r0, [pc, #520]	; (8000e08 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000bfe:	f7ff fc67 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000c02:	bf00      	nop

	}

	//delay_us(1);

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 2
 8000c04:	f241 0110 	movw	r1, #4112	; 0x1010
 8000c08:	487d      	ldr	r0, [pc, #500]	; (8000e00 <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000c0a:	f7ff fc61 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f000 fa92 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000c14:	f241 0110 	movw	r1, #4112	; 0x1010
 8000c18:	4879      	ldr	r0, [pc, #484]	; (8000e00 <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000c1a:	f7ff fc68 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f000 fa8a 	bl	8001138 <delay_us>

	//Q5
	bitValue = bitRead(data, 2);
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	089b      	lsrs	r3, r3, #2
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <write_serial_in_parallel_out_register_minus_yellow+0xd6>
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d005      	beq.n	8000c48 <write_serial_in_parallel_out_register_minus_yellow+0xe0>
 8000c3c:	e009      	b.n	8000c52 <write_serial_in_parallel_out_register_minus_yellow+0xea>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8000c3e:	4971      	ldr	r1, [pc, #452]	; (8000e04 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000c40:	4871      	ldr	r0, [pc, #452]	; (8000e08 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000c42:	f7ff fc54 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 8000c46:	e004      	b.n	8000c52 <write_serial_in_parallel_out_register_minus_yellow+0xea>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8000c48:	496e      	ldr	r1, [pc, #440]	; (8000e04 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000c4a:	486f      	ldr	r0, [pc, #444]	; (8000e08 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000c4c:	f7ff fc40 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000c50:	bf00      	nop

	}

	//delay_us(1);

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 3
 8000c52:	f241 0110 	movw	r1, #4112	; 0x1010
 8000c56:	486a      	ldr	r0, [pc, #424]	; (8000e00 <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000c58:	f7ff fc3a 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f000 fa6b 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000c62:	f241 0110 	movw	r1, #4112	; 0x1010
 8000c66:	4866      	ldr	r0, [pc, #408]	; (8000e00 <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000c68:	f7ff fc41 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f000 fa63 	bl	8001138 <delay_us>

	//Q4
	bitValue = bitRead(data, 3);
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	08db      	lsrs	r3, r3, #3
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <write_serial_in_parallel_out_register_minus_yellow+0x124>
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d005      	beq.n	8000c96 <write_serial_in_parallel_out_register_minus_yellow+0x12e>
 8000c8a:	e009      	b.n	8000ca0 <write_serial_in_parallel_out_register_minus_yellow+0x138>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8000c8c:	495d      	ldr	r1, [pc, #372]	; (8000e04 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000c8e:	485e      	ldr	r0, [pc, #376]	; (8000e08 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000c90:	f7ff fc2d 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 8000c94:	e004      	b.n	8000ca0 <write_serial_in_parallel_out_register_minus_yellow+0x138>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8000c96:	495b      	ldr	r1, [pc, #364]	; (8000e04 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000c98:	485b      	ldr	r0, [pc, #364]	; (8000e08 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000c9a:	f7ff fc19 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000c9e:	bf00      	nop

	}

	//delay_us(1);
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);   //clock pulse 4
 8000ca0:	f241 0110 	movw	r1, #4112	; 0x1010
 8000ca4:	4856      	ldr	r0, [pc, #344]	; (8000e00 <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000ca6:	f7ff fc13 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f000 fa44 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000cb0:	f241 0110 	movw	r1, #4112	; 0x1010
 8000cb4:	4852      	ldr	r0, [pc, #328]	; (8000e00 <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000cb6:	f7ff fc1a 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f000 fa3c 	bl	8001138 <delay_us>

	//Q3
	bitValue = bitRead(data, 4);
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	091b      	lsrs	r3, r3, #4
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <write_serial_in_parallel_out_register_minus_yellow+0x172>
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d005      	beq.n	8000ce4 <write_serial_in_parallel_out_register_minus_yellow+0x17c>
 8000cd8:	e009      	b.n	8000cee <write_serial_in_parallel_out_register_minus_yellow+0x186>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8000cda:	494a      	ldr	r1, [pc, #296]	; (8000e04 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000cdc:	484a      	ldr	r0, [pc, #296]	; (8000e08 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000cde:	f7ff fc06 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 8000ce2:	e004      	b.n	8000cee <write_serial_in_parallel_out_register_minus_yellow+0x186>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8000ce4:	4947      	ldr	r1, [pc, #284]	; (8000e04 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000ce6:	4848      	ldr	r0, [pc, #288]	; (8000e08 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000ce8:	f7ff fbf2 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000cec:	bf00      	nop

	}

	//delay_us(1);

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 5
 8000cee:	f241 0110 	movw	r1, #4112	; 0x1010
 8000cf2:	4843      	ldr	r0, [pc, #268]	; (8000e00 <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000cf4:	f7ff fbec 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f000 fa1d 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000cfe:	f241 0110 	movw	r1, #4112	; 0x1010
 8000d02:	483f      	ldr	r0, [pc, #252]	; (8000e00 <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000d04:	f7ff fbf3 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f000 fa15 	bl	8001138 <delay_us>

	//Q2
	bitValue = bitRead(data, 5);
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	095b      	lsrs	r3, r3, #5
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d003      	beq.n	8000d28 <write_serial_in_parallel_out_register_minus_yellow+0x1c0>
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d005      	beq.n	8000d32 <write_serial_in_parallel_out_register_minus_yellow+0x1ca>
 8000d26:	e009      	b.n	8000d3c <write_serial_in_parallel_out_register_minus_yellow+0x1d4>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8000d28:	4936      	ldr	r1, [pc, #216]	; (8000e04 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000d2a:	4837      	ldr	r0, [pc, #220]	; (8000e08 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000d2c:	f7ff fbdf 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 8000d30:	e004      	b.n	8000d3c <write_serial_in_parallel_out_register_minus_yellow+0x1d4>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8000d32:	4934      	ldr	r1, [pc, #208]	; (8000e04 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000d34:	4834      	ldr	r0, [pc, #208]	; (8000e08 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000d36:	f7ff fbcb 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000d3a:	bf00      	nop

	}

	//delay_us(1);
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 6
 8000d3c:	f241 0110 	movw	r1, #4112	; 0x1010
 8000d40:	482f      	ldr	r0, [pc, #188]	; (8000e00 <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000d42:	f7ff fbc5 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000d46:	2001      	movs	r0, #1
 8000d48:	f000 f9f6 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000d4c:	f241 0110 	movw	r1, #4112	; 0x1010
 8000d50:	482b      	ldr	r0, [pc, #172]	; (8000e00 <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000d52:	f7ff fbcc 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f000 f9ee 	bl	8001138 <delay_us>

	//Q1
	bitValue = bitRead(data, 6);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	099b      	lsrs	r3, r3, #6
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d003      	beq.n	8000d76 <write_serial_in_parallel_out_register_minus_yellow+0x20e>
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d005      	beq.n	8000d80 <write_serial_in_parallel_out_register_minus_yellow+0x218>
 8000d74:	e009      	b.n	8000d8a <write_serial_in_parallel_out_register_minus_yellow+0x222>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8000d76:	4923      	ldr	r1, [pc, #140]	; (8000e04 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000d78:	4823      	ldr	r0, [pc, #140]	; (8000e08 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000d7a:	f7ff fbb8 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 8000d7e:	e004      	b.n	8000d8a <write_serial_in_parallel_out_register_minus_yellow+0x222>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8000d80:	4920      	ldr	r1, [pc, #128]	; (8000e04 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000d82:	4821      	ldr	r0, [pc, #132]	; (8000e08 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000d84:	f7ff fba4 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000d88:	bf00      	nop

	}

	//delay_us(1);

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 7
 8000d8a:	f241 0110 	movw	r1, #4112	; 0x1010
 8000d8e:	481c      	ldr	r0, [pc, #112]	; (8000e00 <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000d90:	f7ff fb9e 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000d94:	2001      	movs	r0, #1
 8000d96:	f000 f9cf 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000d9a:	f241 0110 	movw	r1, #4112	; 0x1010
 8000d9e:	4818      	ldr	r0, [pc, #96]	; (8000e00 <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000da0:	f7ff fba5 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f000 f9c7 	bl	8001138 <delay_us>

	//Q0
	bitValue = bitRead(data, 7);
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	09db      	lsrs	r3, r3, #7
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <write_serial_in_parallel_out_register_minus_yellow+0x25c>
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d005      	beq.n	8000dce <write_serial_in_parallel_out_register_minus_yellow+0x266>
 8000dc2:	e009      	b.n	8000dd8 <write_serial_in_parallel_out_register_minus_yellow+0x270>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8000dc4:	490f      	ldr	r1, [pc, #60]	; (8000e04 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000dc6:	4810      	ldr	r0, [pc, #64]	; (8000e08 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000dc8:	f7ff fb91 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 8000dcc:	e004      	b.n	8000dd8 <write_serial_in_parallel_out_register_minus_yellow+0x270>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8000dce:	490d      	ldr	r1, [pc, #52]	; (8000e04 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000dd2:	f7ff fb7d 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000dd6:	bf00      	nop

	}

	//delay_us(1);

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 8
 8000dd8:	f241 0110 	movw	r1, #4112	; 0x1010
 8000ddc:	4808      	ldr	r0, [pc, #32]	; (8000e00 <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000dde:	f7ff fb77 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f000 f9a8 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000de8:	f241 0110 	movw	r1, #4112	; 0x1010
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000dee:	f7ff fb7e 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000df2:	2001      	movs	r0, #1
 8000df4:	f000 f9a0 	bl	8001138 <delay_us>

}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40010c00 	.word	0x40010c00
 8000e04:	04040004 	.word	0x04040004
 8000e08:	40010800 	.word	0x40010800

08000e0c <write_serial_in_parallel_out_register_minus_red>:

void write_serial_in_parallel_out_register_minus_red(unsigned char data){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
	 *      data      1    1   0   0   0  0   0   1
	 *
	 *
	 */
	//all reset
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000e16:	f248 0180 	movw	r1, #32896	; 0x8080
 8000e1a:	48ae      	ldr	r0, [pc, #696]	; (80010d4 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8000e1c:	f7ff fb67 	bl	80004ee <LL_GPIO_ResetOutputPin>
	delay_us(1);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f000 f989 	bl	8001138 <delay_us>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000e26:	f248 0180 	movw	r1, #32896	; 0x8080
 8000e2a:	48aa      	ldr	r0, [pc, #680]	; (80010d4 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8000e2c:	f7ff fb50 	bl	80004d0 <LL_GPIO_SetOutputPin>

	//Q7
	unsigned int bitValue = bitRead(data, 0);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]

	switch(bitValue){
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <write_serial_in_parallel_out_register_minus_red+0x3a>
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d005      	beq.n	8000e50 <write_serial_in_parallel_out_register_minus_red+0x44>
 8000e44:	e009      	b.n	8000e5a <write_serial_in_parallel_out_register_minus_red+0x4e>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 8000e46:	49a4      	ldr	r1, [pc, #656]	; (80010d8 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8000e48:	48a2      	ldr	r0, [pc, #648]	; (80010d4 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8000e4a:	f7ff fb50 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 8000e4e:	e004      	b.n	8000e5a <write_serial_in_parallel_out_register_minus_red+0x4e>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 8000e50:	49a1      	ldr	r1, [pc, #644]	; (80010d8 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8000e52:	48a0      	ldr	r0, [pc, #640]	; (80010d4 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8000e54:	f7ff fb3c 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000e58:	bf00      	nop

	}

	delay_us(1);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f000 f96c 	bl	8001138 <delay_us>

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 1
 8000e60:	f248 0180 	movw	r1, #32896	; 0x8080
 8000e64:	489d      	ldr	r0, [pc, #628]	; (80010dc <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 8000e66:	f7ff fb33 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f000 f964 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 8000e70:	f248 0180 	movw	r1, #32896	; 0x8080
 8000e74:	4899      	ldr	r0, [pc, #612]	; (80010dc <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 8000e76:	f7ff fb3a 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f000 f95c 	bl	8001138 <delay_us>

	//Q6
	bitValue = bitRead(data, 1);
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	085b      	lsrs	r3, r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <write_serial_in_parallel_out_register_minus_red+0x8e>
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d005      	beq.n	8000ea4 <write_serial_in_parallel_out_register_minus_red+0x98>
 8000e98:	e009      	b.n	8000eae <write_serial_in_parallel_out_register_minus_red+0xa2>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 8000e9a:	498f      	ldr	r1, [pc, #572]	; (80010d8 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8000e9c:	488d      	ldr	r0, [pc, #564]	; (80010d4 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8000e9e:	f7ff fb26 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 8000ea2:	e004      	b.n	8000eae <write_serial_in_parallel_out_register_minus_red+0xa2>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 8000ea4:	498c      	ldr	r1, [pc, #560]	; (80010d8 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8000ea6:	488b      	ldr	r0, [pc, #556]	; (80010d4 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8000ea8:	f7ff fb12 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000eac:	bf00      	nop

	}

	delay_us(1);
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f000 f942 	bl	8001138 <delay_us>

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 2
 8000eb4:	f248 0180 	movw	r1, #32896	; 0x8080
 8000eb8:	4888      	ldr	r0, [pc, #544]	; (80010dc <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 8000eba:	f7ff fb09 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f000 f93a 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 8000ec4:	f248 0180 	movw	r1, #32896	; 0x8080
 8000ec8:	4884      	ldr	r0, [pc, #528]	; (80010dc <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 8000eca:	f7ff fb10 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f000 f932 	bl	8001138 <delay_us>

	//Q5
	bitValue = bitRead(data, 2);
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	089b      	lsrs	r3, r3, #2
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <write_serial_in_parallel_out_register_minus_red+0xe2>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d005      	beq.n	8000ef8 <write_serial_in_parallel_out_register_minus_red+0xec>
 8000eec:	e009      	b.n	8000f02 <write_serial_in_parallel_out_register_minus_red+0xf6>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 8000eee:	497a      	ldr	r1, [pc, #488]	; (80010d8 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8000ef0:	4878      	ldr	r0, [pc, #480]	; (80010d4 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8000ef2:	f7ff fafc 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 8000ef6:	e004      	b.n	8000f02 <write_serial_in_parallel_out_register_minus_red+0xf6>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 8000ef8:	4977      	ldr	r1, [pc, #476]	; (80010d8 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8000efa:	4876      	ldr	r0, [pc, #472]	; (80010d4 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8000efc:	f7ff fae8 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000f00:	bf00      	nop

	}

	delay_us(1);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f000 f918 	bl	8001138 <delay_us>

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 3
 8000f08:	f248 0180 	movw	r1, #32896	; 0x8080
 8000f0c:	4873      	ldr	r0, [pc, #460]	; (80010dc <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 8000f0e:	f7ff fadf 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f000 f910 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 8000f18:	f248 0180 	movw	r1, #32896	; 0x8080
 8000f1c:	486f      	ldr	r0, [pc, #444]	; (80010dc <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 8000f1e:	f7ff fae6 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f000 f908 	bl	8001138 <delay_us>

	//Q4
	bitValue = bitRead(data, 3);
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	08db      	lsrs	r3, r3, #3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <write_serial_in_parallel_out_register_minus_red+0x136>
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d005      	beq.n	8000f4c <write_serial_in_parallel_out_register_minus_red+0x140>
 8000f40:	e009      	b.n	8000f56 <write_serial_in_parallel_out_register_minus_red+0x14a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 8000f42:	4965      	ldr	r1, [pc, #404]	; (80010d8 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8000f44:	4863      	ldr	r0, [pc, #396]	; (80010d4 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8000f46:	f7ff fad2 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 8000f4a:	e004      	b.n	8000f56 <write_serial_in_parallel_out_register_minus_red+0x14a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 8000f4c:	4962      	ldr	r1, [pc, #392]	; (80010d8 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8000f4e:	4861      	ldr	r0, [pc, #388]	; (80010d4 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8000f50:	f7ff fabe 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000f54:	bf00      	nop

	}

	delay_us(1);
 8000f56:	2001      	movs	r0, #1
 8000f58:	f000 f8ee 	bl	8001138 <delay_us>
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);   //clock pulse 4
 8000f5c:	f248 0180 	movw	r1, #32896	; 0x8080
 8000f60:	485e      	ldr	r0, [pc, #376]	; (80010dc <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 8000f62:	f7ff fab5 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000f66:	2001      	movs	r0, #1
 8000f68:	f000 f8e6 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 8000f6c:	f248 0180 	movw	r1, #32896	; 0x8080
 8000f70:	485a      	ldr	r0, [pc, #360]	; (80010dc <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 8000f72:	f7ff fabc 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f000 f8de 	bl	8001138 <delay_us>

	//Q3
	bitValue = bitRead(data, 4);
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	091b      	lsrs	r3, r3, #4
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <write_serial_in_parallel_out_register_minus_red+0x18a>
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d005      	beq.n	8000fa0 <write_serial_in_parallel_out_register_minus_red+0x194>
 8000f94:	e009      	b.n	8000faa <write_serial_in_parallel_out_register_minus_red+0x19e>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 8000f96:	4950      	ldr	r1, [pc, #320]	; (80010d8 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8000f98:	484e      	ldr	r0, [pc, #312]	; (80010d4 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8000f9a:	f7ff faa8 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 8000f9e:	e004      	b.n	8000faa <write_serial_in_parallel_out_register_minus_red+0x19e>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 8000fa0:	494d      	ldr	r1, [pc, #308]	; (80010d8 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8000fa2:	484c      	ldr	r0, [pc, #304]	; (80010d4 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8000fa4:	f7ff fa94 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000fa8:	bf00      	nop

	}

	delay_us(1);
 8000faa:	2001      	movs	r0, #1
 8000fac:	f000 f8c4 	bl	8001138 <delay_us>

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 5
 8000fb0:	f248 0180 	movw	r1, #32896	; 0x8080
 8000fb4:	4849      	ldr	r0, [pc, #292]	; (80010dc <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 8000fb6:	f7ff fa8b 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f000 f8bc 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 8000fc0:	f248 0180 	movw	r1, #32896	; 0x8080
 8000fc4:	4845      	ldr	r0, [pc, #276]	; (80010dc <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 8000fc6:	f7ff fa92 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f000 f8b4 	bl	8001138 <delay_us>

	//Q2
	bitValue = bitRead(data, 5);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <write_serial_in_parallel_out_register_minus_red+0x1de>
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d005      	beq.n	8000ff4 <write_serial_in_parallel_out_register_minus_red+0x1e8>
 8000fe8:	e009      	b.n	8000ffe <write_serial_in_parallel_out_register_minus_red+0x1f2>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 8000fea:	493b      	ldr	r1, [pc, #236]	; (80010d8 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8000fec:	4839      	ldr	r0, [pc, #228]	; (80010d4 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8000fee:	f7ff fa7e 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 8000ff2:	e004      	b.n	8000ffe <write_serial_in_parallel_out_register_minus_red+0x1f2>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 8000ff4:	4938      	ldr	r1, [pc, #224]	; (80010d8 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8000ff6:	4837      	ldr	r0, [pc, #220]	; (80010d4 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8000ff8:	f7ff fa6a 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8000ffc:	bf00      	nop

	}

	delay_us(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f000 f89a 	bl	8001138 <delay_us>
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 6
 8001004:	f248 0180 	movw	r1, #32896	; 0x8080
 8001008:	4834      	ldr	r0, [pc, #208]	; (80010dc <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 800100a:	f7ff fa61 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 800100e:	2001      	movs	r0, #1
 8001010:	f000 f892 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 8001014:	f248 0180 	movw	r1, #32896	; 0x8080
 8001018:	4830      	ldr	r0, [pc, #192]	; (80010dc <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 800101a:	f7ff fa68 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f000 f88a 	bl	8001138 <delay_us>

	//Q1
	bitValue = bitRead(data, 6);
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	099b      	lsrs	r3, r3, #6
 8001028:	b2db      	uxtb	r3, r3
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <write_serial_in_parallel_out_register_minus_red+0x232>
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d005      	beq.n	8001048 <write_serial_in_parallel_out_register_minus_red+0x23c>
 800103c:	e009      	b.n	8001052 <write_serial_in_parallel_out_register_minus_red+0x246>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 800103e:	4926      	ldr	r1, [pc, #152]	; (80010d8 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8001040:	4824      	ldr	r0, [pc, #144]	; (80010d4 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8001042:	f7ff fa54 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 8001046:	e004      	b.n	8001052 <write_serial_in_parallel_out_register_minus_red+0x246>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 8001048:	4923      	ldr	r1, [pc, #140]	; (80010d8 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 800104a:	4822      	ldr	r0, [pc, #136]	; (80010d4 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 800104c:	f7ff fa40 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 8001050:	bf00      	nop

	}

	delay_us(1);
 8001052:	2001      	movs	r0, #1
 8001054:	f000 f870 	bl	8001138 <delay_us>

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 7
 8001058:	f248 0180 	movw	r1, #32896	; 0x8080
 800105c:	481f      	ldr	r0, [pc, #124]	; (80010dc <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 800105e:	f7ff fa37 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f000 f868 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 8001068:	f248 0180 	movw	r1, #32896	; 0x8080
 800106c:	481b      	ldr	r0, [pc, #108]	; (80010dc <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 800106e:	f7ff fa3e 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8001072:	2001      	movs	r0, #1
 8001074:	f000 f860 	bl	8001138 <delay_us>

	//Q0
	bitValue = bitRead(data, 7);
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	09db      	lsrs	r3, r3, #7
 800107c:	b2db      	uxtb	r3, r3
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <write_serial_in_parallel_out_register_minus_red+0x286>
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d005      	beq.n	800109c <write_serial_in_parallel_out_register_minus_red+0x290>
 8001090:	e009      	b.n	80010a6 <write_serial_in_parallel_out_register_minus_red+0x29a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 8001092:	4911      	ldr	r1, [pc, #68]	; (80010d8 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8001094:	480f      	ldr	r0, [pc, #60]	; (80010d4 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8001096:	f7ff fa2a 	bl	80004ee <LL_GPIO_ResetOutputPin>
			break;
 800109a:	e004      	b.n	80010a6 <write_serial_in_parallel_out_register_minus_red+0x29a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 800109c:	490e      	ldr	r1, [pc, #56]	; (80010d8 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 80010a0:	f7ff fa16 	bl	80004d0 <LL_GPIO_SetOutputPin>
			break;
 80010a4:	bf00      	nop

	}

	delay_us(1);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f000 f846 	bl	8001138 <delay_us>

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 8
 80010ac:	f248 0180 	movw	r1, #32896	; 0x8080
 80010b0:	480a      	ldr	r0, [pc, #40]	; (80010dc <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 80010b2:	f7ff fa0d 	bl	80004d0 <LL_GPIO_SetOutputPin>

	delay_us(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f000 f83e 	bl	8001138 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 80010bc:	f248 0180 	movw	r1, #32896	; 0x8080
 80010c0:	4806      	ldr	r0, [pc, #24]	; (80010dc <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 80010c2:	f7ff fa14 	bl	80004ee <LL_GPIO_ResetOutputPin>

	delay_us(1);
 80010c6:	2001      	movs	r0, #1
 80010c8:	f000 f836 	bl	8001138 <delay_us>

}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40010800 	.word	0x40010800
 80010d8:	04020002 	.word	0x04020002
 80010dc:	40011000 	.word	0x40011000

080010e0 <rowToBinary>:


unsigned char rowToBinary(unsigned char (*ptr)[8], int row) {
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	unsigned char binaryValue = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]
	for (int col = 0; col < COLS; col++) {
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	e015      	b.n	8001120 <rowToBinary+0x40>
		binaryValue |= (ptr[row][col] << (COLS - 1 - col));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	441a      	add	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4413      	add	r3, r2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	f1c3 0307 	rsb	r3, r3, #7
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	b25a      	sxtb	r2, r3
 8001110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001114:	4313      	orrs	r3, r2
 8001116:	b25b      	sxtb	r3, r3
 8001118:	73fb      	strb	r3, [r7, #15]
	for (int col = 0; col < COLS; col++) {
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	3301      	adds	r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	2b07      	cmp	r3, #7
 8001124:	dde6      	ble.n	80010f4 <rowToBinary+0x14>
	}
	binaryValue = ~binaryValue;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	43db      	mvns	r3, r3
 800112a:	73fb      	strb	r3, [r7, #15]

	return binaryValue;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <delay_us>:


static void inline delay_us(unsigned int delay){
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	 * USAGE : please use delay variable that is ccr register.
	 */
	char buffer_delay_us[20];  //make buffer


	TIM2->CNT = 0; //clear
 8001140:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001144:	2200      	movs	r2, #0
 8001146:	625a      	str	r2, [r3, #36]	; 0x24

	LL_TIM_EnableCounter(TIM2); //CR1 register CEN bit (ENABLE)
 8001148:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800114c:	f7ff f93a 	bl	80003c4 <LL_TIM_EnableCounter>

	while(TIM2->CNT < delay){
 8001150:	bf00      	nop
 8001152:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	429a      	cmp	r2, r3
 800115c:	d8f9      	bhi.n	8001152 <delay_us+0x1a>
//		UART2_TX_string(buffer_delay_us);
//		UART2_TX_string("\r\n");

	}

	LL_TIM_DisableCounter(TIM2);   //disable.
 800115e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001162:	f7ff f93e 	bl	80003e2 <LL_TIM_DisableCounter>

}
 8001166:	bf00      	nop
 8001168:	3720      	adds	r7, #32
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001172:	e7fe      	b.n	8001172 <NMI_Handler+0x4>

08001174 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <HardFault_Handler+0x4>

0800117a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <MemManage_Handler+0x4>

08001180 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <BusFault_Handler+0x4>

08001186 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <UsageFault_Handler+0x4>

0800118c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011c8:	f7ff fff8 	bl	80011bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011cc:	480b      	ldr	r0, [pc, #44]	; (80011fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011ce:	490c      	ldr	r1, [pc, #48]	; (8001200 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011d0:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a09      	ldr	r2, [pc, #36]	; (8001208 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011e4:	4c09      	ldr	r4, [pc, #36]	; (800120c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f2:	f000 fc23 	bl	8001a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011f6:	f7ff f999 	bl	800052c <main>
  bx lr
 80011fa:	4770      	bx	lr
  ldr r0, =_sdata
 80011fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001200:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001204:	08001afc 	.word	0x08001afc
  ldr r2, =_sbss
 8001208:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800120c:	20000020 	.word	0x20000020

08001210 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC1_2_IRQHandler>

08001212 <LL_GPIO_SetPinMode>:
{
 8001212:	b490      	push	{r4, r7}
 8001214:	b088      	sub	sp, #32
 8001216:	af00      	add	r7, sp, #0
 8001218:	60f8      	str	r0, [r7, #12]
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	461a      	mov	r2, r3
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	0e1b      	lsrs	r3, r3, #24
 8001226:	4413      	add	r3, r2
 8001228:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800122a:	6822      	ldr	r2, [r4, #0]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa93 f3a3 	rbit	r3, r3
 8001236:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	fab3 f383 	clz	r3, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	210f      	movs	r1, #15
 8001244:	fa01 f303 	lsl.w	r3, r1, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	401a      	ands	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	fa93 f3a3 	rbit	r3, r3
 8001256:	61bb      	str	r3, [r7, #24]
  return result;
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	fab3 f383 	clz	r3, r3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	6023      	str	r3, [r4, #0]
}
 800126c:	bf00      	nop
 800126e:	3720      	adds	r7, #32
 8001270:	46bd      	mov	sp, r7
 8001272:	bc90      	pop	{r4, r7}
 8001274:	4770      	bx	lr

08001276 <LL_GPIO_SetPinSpeed>:
{
 8001276:	b490      	push	{r4, r7}
 8001278:	b088      	sub	sp, #32
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	461a      	mov	r2, r3
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	0e1b      	lsrs	r3, r3, #24
 800128a:	4413      	add	r3, r2
 800128c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800128e:	6822      	ldr	r2, [r4, #0]
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	613b      	str	r3, [r7, #16]
  return result;
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	fab3 f383 	clz	r3, r3
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	2103      	movs	r1, #3
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	401a      	ands	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	fa93 f3a3 	rbit	r3, r3
 80012ba:	61bb      	str	r3, [r7, #24]
  return result;
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fab3 f383 	clz	r3, r3
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	6023      	str	r3, [r4, #0]
}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc90      	pop	{r4, r7}
 80012d8:	4770      	bx	lr

080012da <LL_GPIO_SetPinOutputType>:
{
 80012da:	b490      	push	{r4, r7}
 80012dc:	b088      	sub	sp, #32
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	461a      	mov	r2, r3
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	0e1b      	lsrs	r3, r3, #24
 80012ee:	4413      	add	r3, r2
 80012f0:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80012f2:	6822      	ldr	r2, [r4, #0]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa93 f3a3 	rbit	r3, r3
 80012fe:	613b      	str	r3, [r7, #16]
  return result;
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	fab3 f383 	clz	r3, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	2104      	movs	r1, #4
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	401a      	ands	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	fa93 f3a3 	rbit	r3, r3
 800131e:	61bb      	str	r3, [r7, #24]
  return result;
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	fab3 f383 	clz	r3, r3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	fa01 f303 	lsl.w	r3, r1, r3
 8001330:	4313      	orrs	r3, r2
 8001332:	6023      	str	r3, [r4, #0]
}
 8001334:	bf00      	nop
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bc90      	pop	{r4, r7}
 800133c:	4770      	bx	lr

0800133e <LL_GPIO_SetPinPull>:
{
 800133e:	b480      	push	{r7}
 8001340:	b087      	sub	sp, #28
 8001342:	af00      	add	r7, sp, #0
 8001344:	60f8      	str	r0, [r7, #12]
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	43db      	mvns	r3, r3
 8001354:	401a      	ands	r2, r3
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa93 f3a3 	rbit	r3, r3
 8001362:	613b      	str	r3, [r7, #16]
  return result;
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	fab3 f383 	clz	r3, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	4619      	mov	r1, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	408b      	lsls	r3, r1
 8001372:	431a      	orrs	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	60da      	str	r2, [r3, #12]
}
 8001378:	bf00      	nop
 800137a:	371c      	adds	r7, #28
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b088      	sub	sp, #32
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	0c1b      	lsrs	r3, r3, #16
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	fa93 f3a3 	rbit	r3, r3
 80013a0:	60fb      	str	r3, [r7, #12]
  return result;
 80013a2:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80013a4:	fab3 f383 	clz	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80013ac:	e044      	b.n	8001438 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80013ae:	2201      	movs	r2, #1
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	409a      	lsls	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d03a      	beq.n	8001432 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	2b07      	cmp	r3, #7
 80013c0:	d806      	bhi.n	80013d0 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80013c2:	f240 1201 	movw	r2, #257	; 0x101
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	e008      	b.n	80013e2 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	3b08      	subs	r3, #8
 80013d4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013e0:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d106      	bne.n	80013f8 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	461a      	mov	r2, r3
 80013f0:	69b9      	ldr	r1, [r7, #24]
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffa3 	bl	800133e <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	461a      	mov	r2, r3
 80013fe:	69b9      	ldr	r1, [r7, #24]
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff06 	bl	8001212 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d003      	beq.n	8001416 <LL_GPIO_Init+0x94>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b09      	cmp	r3, #9
 8001414:	d10d      	bne.n	8001432 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	461a      	mov	r2, r3
 800141c:	69b9      	ldr	r1, [r7, #24]
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ff29 	bl	8001276 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	461a      	mov	r2, r3
 800142a:	69b9      	ldr	r1, [r7, #24]
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff54 	bl	80012da <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3301      	adds	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa22 f303 	lsr.w	r3, r2, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1b4      	bne.n	80013ae <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3720      	adds	r7, #32
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <LL_RCC_GetSysClkSource>:
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <LL_RCC_GetSysClkSource+0x14>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 030c 	and.w	r3, r3, #12
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	40021000 	.word	0x40021000

08001468 <LL_RCC_GetAHBPrescaler>:
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <LL_RCC_GetAHBPrescaler+0x14>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	40021000 	.word	0x40021000

08001480 <LL_RCC_GetAPB1Prescaler>:
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	40021000 	.word	0x40021000

08001498 <LL_RCC_GetAPB2Prescaler>:
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <LL_RCC_GetAPB2Prescaler+0x14>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	40021000 	.word	0x40021000

080014b0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80014b4:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <LL_RCC_PLL_GetMainSource+0x14>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	40021000 	.word	0x40021000

080014c8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <LL_RCC_PLL_GetMultiplicator+0x14>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	40021000 	.word	0x40021000

080014e0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <LL_RCC_PLL_GetPrediv+0x18>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	0c5b      	lsrs	r3, r3, #17
 80014ea:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000

080014fc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001504:	f000 f820 	bl	8001548 <RCC_GetSystemClockFreq>
 8001508:	4602      	mov	r2, r0
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f83e 	bl	8001594 <RCC_GetHCLKClockFreq>
 8001518:	4602      	mov	r2, r0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4618      	mov	r0, r3
 8001524:	f000 f84c 	bl	80015c0 <RCC_GetPCLK1ClockFreq>
 8001528:	4602      	mov	r2, r0
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f858 	bl	80015e8 <RCC_GetPCLK2ClockFreq>
 8001538:	4602      	mov	r2, r0
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	60da      	str	r2, [r3, #12]
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001552:	f7ff ff7d 	bl	8001450 <LL_RCC_GetSysClkSource>
 8001556:	4603      	mov	r3, r0
 8001558:	2b08      	cmp	r3, #8
 800155a:	d00c      	beq.n	8001576 <RCC_GetSystemClockFreq+0x2e>
 800155c:	2b08      	cmp	r3, #8
 800155e:	d80e      	bhi.n	800157e <RCC_GetSystemClockFreq+0x36>
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <RCC_GetSystemClockFreq+0x22>
 8001564:	2b04      	cmp	r3, #4
 8001566:	d003      	beq.n	8001570 <RCC_GetSystemClockFreq+0x28>
 8001568:	e009      	b.n	800157e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <RCC_GetSystemClockFreq+0x48>)
 800156c:	607b      	str	r3, [r7, #4]
      break;
 800156e:	e009      	b.n	8001584 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <RCC_GetSystemClockFreq+0x48>)
 8001572:	607b      	str	r3, [r7, #4]
      break;
 8001574:	e006      	b.n	8001584 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001576:	f000 f84b 	bl	8001610 <RCC_PLL_GetFreqDomain_SYS>
 800157a:	6078      	str	r0, [r7, #4]
      break;
 800157c:	e002      	b.n	8001584 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <RCC_GetSystemClockFreq+0x48>)
 8001580:	607b      	str	r3, [r7, #4]
      break;
 8001582:	bf00      	nop
  }

  return frequency;
 8001584:	687b      	ldr	r3, [r7, #4]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	007a1200 	.word	0x007a1200

08001594 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800159c:	f7ff ff64 	bl	8001468 <LL_RCC_GetAHBPrescaler>
 80015a0:	4603      	mov	r3, r0
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	f003 030f 	and.w	r3, r3, #15
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <RCC_GetHCLKClockFreq+0x28>)
 80015aa:	5cd3      	ldrb	r3, [r2, r3]
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	40d3      	lsrs	r3, r2
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	08001adc 	.word	0x08001adc

080015c0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80015c8:	f7ff ff5a 	bl	8001480 <LL_RCC_GetAPB1Prescaler>
 80015cc:	4603      	mov	r3, r0
 80015ce:	0a1b      	lsrs	r3, r3, #8
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <RCC_GetPCLK1ClockFreq+0x24>)
 80015d2:	5cd3      	ldrb	r3, [r2, r3]
 80015d4:	461a      	mov	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	40d3      	lsrs	r3, r2
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	08001aec 	.word	0x08001aec

080015e8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80015f0:	f7ff ff52 	bl	8001498 <LL_RCC_GetAPB2Prescaler>
 80015f4:	4603      	mov	r3, r0
 80015f6:	0adb      	lsrs	r3, r3, #11
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <RCC_GetPCLK2ClockFreq+0x24>)
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	461a      	mov	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	40d3      	lsrs	r3, r2
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	08001aec 	.word	0x08001aec

08001610 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	2300      	movs	r3, #0
 800161c:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800161e:	f7ff ff47 	bl	80014b0 <LL_RCC_PLL_GetMainSource>
 8001622:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d004      	beq.n	8001634 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001630:	d003      	beq.n	800163a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001632:	e00b      	b.n	800164c <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001634:	4b0d      	ldr	r3, [pc, #52]	; (800166c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001636:	607b      	str	r3, [r7, #4]
      break;
 8001638:	e00b      	b.n	8001652 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800163a:	f7ff ff51 	bl	80014e0 <LL_RCC_PLL_GetPrediv>
 800163e:	4603      	mov	r3, r0
 8001640:	3301      	adds	r3, #1
 8001642:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
 8001648:	607b      	str	r3, [r7, #4]
      break;
 800164a:	e002      	b.n	8001652 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800164e:	607b      	str	r3, [r7, #4]
      break;
 8001650:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8001652:	f7ff ff39 	bl	80014c8 <LL_RCC_PLL_GetMultiplicator>
 8001656:	4603      	mov	r3, r0
 8001658:	0c9b      	lsrs	r3, r3, #18
 800165a:	3302      	adds	r3, #2
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	fb02 f303 	mul.w	r3, r2, r3
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	003d0900 	.word	0x003d0900
 8001670:	007a1200 	.word	0x007a1200

08001674 <LL_TIM_SetPrescaler>:
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr

0800168e <LL_TIM_SetAutoReload>:
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <LL_TIM_SetRepetitionCounter>:
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f043 0201 	orr.w	r2, r3, #1
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	615a      	str	r2, [r3, #20]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a27      	ldr	r2, [pc, #156]	; (8001790 <LL_TIM_Init+0xb0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d00b      	beq.n	8001710 <LL_TIM_Init+0x30>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016fe:	d007      	beq.n	8001710 <LL_TIM_Init+0x30>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a24      	ldr	r2, [pc, #144]	; (8001794 <LL_TIM_Init+0xb4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d003      	beq.n	8001710 <LL_TIM_Init+0x30>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a23      	ldr	r2, [pc, #140]	; (8001798 <LL_TIM_Init+0xb8>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d106      	bne.n	800171e <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4313      	orrs	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a1b      	ldr	r2, [pc, #108]	; (8001790 <LL_TIM_Init+0xb0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00b      	beq.n	800173e <LL_TIM_Init+0x5e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800172c:	d007      	beq.n	800173e <LL_TIM_Init+0x5e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a18      	ldr	r2, [pc, #96]	; (8001794 <LL_TIM_Init+0xb4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d003      	beq.n	800173e <LL_TIM_Init+0x5e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <LL_TIM_Init+0xb8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d106      	bne.n	800174c <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4313      	orrs	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	4619      	mov	r1, r3
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ff98 	bl	800168e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	4619      	mov	r1, r3
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff85 	bl	8001674 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a08      	ldr	r2, [pc, #32]	; (8001790 <LL_TIM_Init+0xb0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d105      	bne.n	800177e <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	4619      	mov	r1, r3
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ff95 	bl	80016a8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ff9f 	bl	80016c2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40012c00 	.word	0x40012c00
 8001794:	40000400 	.word	0x40000400
 8001798:	40000800 	.word	0x40000800

0800179c <LL_USART_IsEnabled>:
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017b0:	bf0c      	ite	eq
 80017b2:	2301      	moveq	r3, #1
 80017b4:	2300      	movne	r3, #0
 80017b6:	b2db      	uxtb	r3, r3
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <LL_USART_SetStopBitsLength>:
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	611a      	str	r2, [r3, #16]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <LL_USART_SetHWFlowCtrl>:
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	615a      	str	r2, [r3, #20]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
	...

0800180c <LL_USART_SetBaudRate>:
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	009a      	lsls	r2, r3, #2
 8001822:	441a      	add	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	fbb2 f3f3 	udiv	r3, r2, r3
 800182c:	4a25      	ldr	r2, [pc, #148]	; (80018c4 <LL_USART_SetBaudRate+0xb8>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	b29b      	uxth	r3, r3
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	b299      	uxth	r1, r3
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	009a      	lsls	r2, r3, #2
 8001844:	441a      	add	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	fbb2 f2f3 	udiv	r2, r2, r3
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <LL_USART_SetBaudRate+0xb8>)
 8001850:	fba3 0302 	umull	r0, r3, r3, r2
 8001854:	095b      	lsrs	r3, r3, #5
 8001856:	2064      	movs	r0, #100	; 0x64
 8001858:	fb00 f303 	mul.w	r3, r0, r3
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	3332      	adds	r3, #50	; 0x32
 8001862:	4a18      	ldr	r2, [pc, #96]	; (80018c4 <LL_USART_SetBaudRate+0xb8>)
 8001864:	fba2 2303 	umull	r2, r3, r2, r3
 8001868:	095b      	lsrs	r3, r3, #5
 800186a:	b29b      	uxth	r3, r3
 800186c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001870:	b29b      	uxth	r3, r3
 8001872:	440b      	add	r3, r1
 8001874:	b299      	uxth	r1, r3
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	009a      	lsls	r2, r3, #2
 8001880:	441a      	add	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	fbb2 f2f3 	udiv	r2, r2, r3
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <LL_USART_SetBaudRate+0xb8>)
 800188c:	fba3 0302 	umull	r0, r3, r3, r2
 8001890:	095b      	lsrs	r3, r3, #5
 8001892:	2064      	movs	r0, #100	; 0x64
 8001894:	fb00 f303 	mul.w	r3, r0, r3
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	3332      	adds	r3, #50	; 0x32
 800189e:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <LL_USART_SetBaudRate+0xb8>)
 80018a0:	fba2 2303 	umull	r2, r3, r2, r3
 80018a4:	095b      	lsrs	r3, r3, #5
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	440b      	add	r3, r1
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	609a      	str	r2, [r3, #8]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	51eb851f 	.word	0x51eb851f

080018c8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ff5e 	bl	800179c <LL_USART_IsEnabled>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d145      	bne.n	8001972 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80018ee:	f023 030c 	bic.w	r3, r3, #12
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	6851      	ldr	r1, [r2, #4]
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	68d2      	ldr	r2, [r2, #12]
 80018fa:	4311      	orrs	r1, r2
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	6912      	ldr	r2, [r2, #16]
 8001900:	430a      	orrs	r2, r1
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4619      	mov	r1, r3
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ff57 	bl	80017c2 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	4619      	mov	r1, r3
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ff63 	bl	80017e6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001920:	f107 0308 	add.w	r3, r7, #8
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fde9 	bl	80014fc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a13      	ldr	r2, [pc, #76]	; (800197c <LL_USART_Init+0xb4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d102      	bne.n	8001938 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	61bb      	str	r3, [r7, #24]
 8001936:	e00c      	b.n	8001952 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a11      	ldr	r2, [pc, #68]	; (8001980 <LL_USART_Init+0xb8>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d102      	bne.n	8001946 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	e005      	b.n	8001952 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <LL_USART_Init+0xbc>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d101      	bne.n	8001952 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00c      	beq.n	8001972 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8001960:	2300      	movs	r3, #0
 8001962:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001968:	461a      	mov	r2, r3
 800196a:	69b9      	ldr	r1, [r7, #24]
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff4d 	bl	800180c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001972:	7ffb      	ldrb	r3, [r7, #31]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3720      	adds	r7, #32
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40013800 	.word	0x40013800
 8001980:	40004400 	.word	0x40004400
 8001984:	40004800 	.word	0x40004800

08001988 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <LL_InitTick+0x30>)
 800199c:	3b01      	subs	r3, #1
 800199e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <LL_InitTick+0x30>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <LL_InitTick+0x30>)
 80019a8:	2205      	movs	r2, #5
 80019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e010 	.word	0xe000e010

080019bc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80019c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ffdd 	bl	8001988 <LL_InitTick>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <LL_mDelay+0x44>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80019e6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ee:	d00c      	beq.n	8001a0a <LL_mDelay+0x32>
  {
    Delay++;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3301      	adds	r3, #1
 80019f4:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80019f6:	e008      	b.n	8001a0a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <LL_mDelay+0x44>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <LL_mDelay+0x32>
    {
      Delay--;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f3      	bne.n	80019f8 <LL_mDelay+0x20>
    }
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e010 	.word	0xe000e010

08001a20 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001a28:	4a03      	ldr	r2, [pc, #12]	; (8001a38 <LL_SetSystemCoreClock+0x18>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6013      	str	r3, [r2, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	20000000 	.word	0x20000000

08001a3c <__libc_init_array>:
 8001a3c:	b570      	push	{r4, r5, r6, lr}
 8001a3e:	2600      	movs	r6, #0
 8001a40:	4d0c      	ldr	r5, [pc, #48]	; (8001a74 <__libc_init_array+0x38>)
 8001a42:	4c0d      	ldr	r4, [pc, #52]	; (8001a78 <__libc_init_array+0x3c>)
 8001a44:	1b64      	subs	r4, r4, r5
 8001a46:	10a4      	asrs	r4, r4, #2
 8001a48:	42a6      	cmp	r6, r4
 8001a4a:	d109      	bne.n	8001a60 <__libc_init_array+0x24>
 8001a4c:	f000 f81a 	bl	8001a84 <_init>
 8001a50:	2600      	movs	r6, #0
 8001a52:	4d0a      	ldr	r5, [pc, #40]	; (8001a7c <__libc_init_array+0x40>)
 8001a54:	4c0a      	ldr	r4, [pc, #40]	; (8001a80 <__libc_init_array+0x44>)
 8001a56:	1b64      	subs	r4, r4, r5
 8001a58:	10a4      	asrs	r4, r4, #2
 8001a5a:	42a6      	cmp	r6, r4
 8001a5c:	d105      	bne.n	8001a6a <__libc_init_array+0x2e>
 8001a5e:	bd70      	pop	{r4, r5, r6, pc}
 8001a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a64:	4798      	blx	r3
 8001a66:	3601      	adds	r6, #1
 8001a68:	e7ee      	b.n	8001a48 <__libc_init_array+0xc>
 8001a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a6e:	4798      	blx	r3
 8001a70:	3601      	adds	r6, #1
 8001a72:	e7f2      	b.n	8001a5a <__libc_init_array+0x1e>
 8001a74:	08001af4 	.word	0x08001af4
 8001a78:	08001af4 	.word	0x08001af4
 8001a7c:	08001af4 	.word	0x08001af4
 8001a80:	08001af8 	.word	0x08001af8

08001a84 <_init>:
 8001a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a86:	bf00      	nop
 8001a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a8a:	bc08      	pop	{r3}
 8001a8c:	469e      	mov	lr, r3
 8001a8e:	4770      	bx	lr

08001a90 <_fini>:
 8001a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a92:	bf00      	nop
 8001a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a96:	bc08      	pop	{r3}
 8001a98:	469e      	mov	lr, r3
 8001a9a:	4770      	bx	lr
