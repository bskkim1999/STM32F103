
Test_LL_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000269c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080027a8  080027a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027c0  080027c0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080027c0  080027c0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027c0  080027c0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027c0  080027c0  000127c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027c4  080027c4  000127c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080027c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000084  0800284c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  0800284c  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000480a  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012e5  00000000  00000000  000248fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000720  00000000  00000000  00025be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000545  00000000  00000000  00026300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001274d  00000000  00000000  00026845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005668  00000000  00000000  00038f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00060525  00000000  00000000  0003e5fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ccc  00000000  00000000  0009eb20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000a07ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08002790 	.word	0x08002790

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08002790 	.word	0x08002790

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__NVIC_GetPriorityGrouping+0x18>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	0a1b      	lsrs	r3, r3, #8
 800019e:	f003 0307 	and.w	r3, r3, #7
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	e000ed00 	.word	0xe000ed00

080001b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	db0b      	blt.n	80001da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	f003 021f 	and.w	r2, r3, #31
 80001c8:	4906      	ldr	r1, [pc, #24]	; (80001e4 <__NVIC_EnableIRQ+0x34>)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	095b      	lsrs	r3, r3, #5
 80001d0:	2001      	movs	r0, #1
 80001d2:	fa00 f202 	lsl.w	r2, r0, r2
 80001d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	e000e100 	.word	0xe000e100

080001e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db0a      	blt.n	8000212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	490c      	ldr	r1, [pc, #48]	; (8000234 <__NVIC_SetPriority+0x4c>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	0112      	lsls	r2, r2, #4
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	440b      	add	r3, r1
 800020c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000210:	e00a      	b.n	8000228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4908      	ldr	r1, [pc, #32]	; (8000238 <__NVIC_SetPriority+0x50>)
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f003 030f 	and.w	r3, r3, #15
 800021e:	3b04      	subs	r3, #4
 8000220:	0112      	lsls	r2, r2, #4
 8000222:	b2d2      	uxtb	r2, r2
 8000224:	440b      	add	r3, r1
 8000226:	761a      	strb	r2, [r3, #24]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800023c:	b480      	push	{r7}
 800023e:	b089      	sub	sp, #36	; 0x24
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	f003 0307 	and.w	r3, r3, #7
 800024e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000250:	69fb      	ldr	r3, [r7, #28]
 8000252:	f1c3 0307 	rsb	r3, r3, #7
 8000256:	2b04      	cmp	r3, #4
 8000258:	bf28      	it	cs
 800025a:	2304      	movcs	r3, #4
 800025c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	3304      	adds	r3, #4
 8000262:	2b06      	cmp	r3, #6
 8000264:	d902      	bls.n	800026c <NVIC_EncodePriority+0x30>
 8000266:	69fb      	ldr	r3, [r7, #28]
 8000268:	3b03      	subs	r3, #3
 800026a:	e000      	b.n	800026e <NVIC_EncodePriority+0x32>
 800026c:	2300      	movs	r3, #0
 800026e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000270:	f04f 32ff 	mov.w	r2, #4294967295
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	43da      	mvns	r2, r3
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	401a      	ands	r2, r3
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000284:	f04f 31ff 	mov.w	r1, #4294967295
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	fa01 f303 	lsl.w	r3, r1, r3
 800028e:	43d9      	mvns	r1, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000294:	4313      	orrs	r3, r2
         );
}
 8000296:	4618      	mov	r0, r3
 8000298:	3724      	adds	r7, #36	; 0x24
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <LL_RCC_HSI_Enable+0x18>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a03      	ldr	r2, [pc, #12]	; (80002b8 <LL_RCC_HSI_Enable+0x18>)
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	40021000 	.word	0x40021000

080002bc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <LL_RCC_HSI_IsReady+0x20>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f003 0302 	and.w	r3, r3, #2
 80002c8:	2b02      	cmp	r3, #2
 80002ca:	bf0c      	ite	eq
 80002cc:	2301      	moveq	r3, #1
 80002ce:	2300      	movne	r3, #0
 80002d0:	b2db      	uxtb	r3, r3
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000

080002e0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	00db      	lsls	r3, r3, #3
 80002f4:	4903      	ldr	r1, [pc, #12]	; (8000304 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80002f6:	4313      	orrs	r3, r2
 80002f8:	600b      	str	r3, [r1, #0]
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	40021000 	.word	0x40021000

08000308 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <LL_RCC_SetSysClkSource+0x24>)
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	f023 0203 	bic.w	r2, r3, #3
 8000318:	4904      	ldr	r1, [pc, #16]	; (800032c <LL_RCC_SetSysClkSource+0x24>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4313      	orrs	r3, r2
 800031e:	604b      	str	r3, [r1, #4]
}
 8000320:	bf00      	nop
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000

08000330 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <LL_RCC_GetSysClkSource+0x14>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	f003 030c 	and.w	r3, r3, #12
}
 800033c:	4618      	mov	r0, r3
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	40021000 	.word	0x40021000

08000348 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <LL_RCC_SetAHBPrescaler+0x24>)
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000358:	4904      	ldr	r1, [pc, #16]	; (800036c <LL_RCC_SetAHBPrescaler+0x24>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4313      	orrs	r3, r2
 800035e:	604b      	str	r3, [r1, #4]
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <LL_RCC_SetAPB1Prescaler+0x24>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000380:	4904      	ldr	r1, [pc, #16]	; (8000394 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4313      	orrs	r3, r2
 8000386:	604b      	str	r3, [r1, #4]
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000

08000398 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80003a8:	4904      	ldr	r1, [pc, #16]	; (80003bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4313      	orrs	r3, r2
 80003ae:	604b      	str	r3, [r1, #4]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000

080003c0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80003c4:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <LL_RCC_PLL_Enable+0x18>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a03      	ldr	r2, [pc, #12]	; (80003d8 <LL_RCC_PLL_Enable+0x18>)
 80003ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003ce:	6013      	str	r3, [r2, #0]
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	40021000 	.word	0x40021000

080003dc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <LL_RCC_PLL_IsReady+0x20>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80003ec:	bf0c      	ite	eq
 80003ee:	2301      	moveq	r3, #1
 80003f0:	2300      	movne	r3, #0
 80003f2:	b2db      	uxtb	r3, r3
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40021000 	.word	0x40021000

08000400 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	430b      	orrs	r3, r1
 800041c:	4903      	ldr	r1, [pc, #12]	; (800042c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800041e:	4313      	orrs	r3, r2
 8000420:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40021000 	.word	0x40021000

08000430 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000430:	b480      	push	{r7}
 8000432:	b085      	sub	sp, #20
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <LL_APB1_GRP1_EnableClock+0x2c>)
 800043a:	69da      	ldr	r2, [r3, #28]
 800043c:	4907      	ldr	r1, [pc, #28]	; (800045c <LL_APB1_GRP1_EnableClock+0x2c>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000446:	69da      	ldr	r2, [r3, #28]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4013      	ands	r3, r2
 800044c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800044e:	68fb      	ldr	r3, [r7, #12]
}
 8000450:	bf00      	nop
 8000452:	3714      	adds	r7, #20
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000468:	4b08      	ldr	r3, [pc, #32]	; (800048c <LL_APB2_GRP1_EnableClock+0x2c>)
 800046a:	699a      	ldr	r2, [r3, #24]
 800046c:	4907      	ldr	r1, [pc, #28]	; (800048c <LL_APB2_GRP1_EnableClock+0x2c>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4313      	orrs	r3, r2
 8000472:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000476:	699a      	ldr	r2, [r3, #24]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4013      	ands	r3, r2
 800047c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800047e:	68fb      	ldr	r3, [r7, #12]
}
 8000480:	bf00      	nop
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40021000 	.word	0x40021000

08000490 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <LL_FLASH_SetLatency+0x24>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f023 0207 	bic.w	r2, r3, #7
 80004a0:	4904      	ldr	r1, [pc, #16]	; (80004b4 <LL_FLASH_SetLatency+0x24>)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4313      	orrs	r3, r2
 80004a6:	600b      	str	r3, [r1, #0]
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40022000 	.word	0x40022000

080004b8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80004bc:	4b03      	ldr	r3, [pc, #12]	; (80004cc <LL_FLASH_GetLatency+0x14>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f003 0307 	and.w	r3, r3, #7
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	40022000 	.word	0x40022000

080004d0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f043 0201 	orr.w	r2, r3, #1
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	601a      	str	r2, [r3, #0]
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr

080004ee <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f023 0201 	bic.w	r2, r3, #1
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	601a      	str	r2, [r3, #0]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	601a      	str	r2, [r3, #0]
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr

0800052a <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800052a:	b480      	push	{r7}
 800052c:	b083      	sub	sp, #12
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
 8000532:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800053c:	f023 0307 	bic.w	r3, r3, #7
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	431a      	orrs	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	609a      	str	r2, [r3, #8]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
 800055a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	431a      	orrs	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	605a      	str	r2, [r3, #4]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr

08000576 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	609a      	str	r2, [r3, #8]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	f043 0201 	orr.w	r2, r3, #1
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	60da      	str	r2, [r3, #12]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	60da      	str	r2, [r3, #12]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	691b      	ldr	r3, [r3, #16]
 80005dc:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	695b      	ldr	r3, [r3, #20]
 80005e8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	615a      	str	r2, [r3, #20]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr

080005fa <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80005fa:	b490      	push	{r4, r7}
 80005fc:	b088      	sub	sp, #32
 80005fe:	af00      	add	r7, sp, #0
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	461a      	mov	r2, r3
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	0e1b      	lsrs	r3, r3, #24
 800060e:	4413      	add	r3, r2
 8000610:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000612:	6822      	ldr	r2, [r4, #0]
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	fa93 f3a3 	rbit	r3, r3
 800061e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	fab3 f383 	clz	r3, r3
 8000626:	b2db      	uxtb	r3, r3
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	210f      	movs	r1, #15
 800062c:	fa01 f303 	lsl.w	r3, r1, r3
 8000630:	43db      	mvns	r3, r3
 8000632:	401a      	ands	r2, r3
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	fa93 f3a3 	rbit	r3, r3
 800063e:	61bb      	str	r3, [r7, #24]
  return result;
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	fab3 f383 	clz	r3, r3
 8000646:	b2db      	uxtb	r3, r3
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	fa01 f303 	lsl.w	r3, r1, r3
 8000650:	4313      	orrs	r3, r2
 8000652:	6023      	str	r3, [r4, #0]
}
 8000654:	bf00      	nop
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bc90      	pop	{r4, r7}
 800065c:	4770      	bx	lr

0800065e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800065e:	b480      	push	{r7}
 8000660:	b083      	sub	sp, #12
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
 8000666:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	0a1b      	lsrs	r3, r3, #8
 800066c:	b29a      	uxth	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	611a      	str	r2, [r3, #16]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr

0800067c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	b29a      	uxth	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	615a      	str	r2, [r3, #20]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
	...

0800069c <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006a8:	4a03      	ldr	r2, [pc, #12]	; (80006b8 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 80006aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ae:	6053      	str	r3, [r2, #4]
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	40010000 	.word	0x40010000

080006bc <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <LL_GPIO_AF_SetEXTISource+0x58>)
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	3302      	adds	r3, #2
 80006ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	0c1b      	lsrs	r3, r3, #16
 80006d6:	43db      	mvns	r3, r3
 80006d8:	ea02 0103 	and.w	r1, r2, r3
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	0c1b      	lsrs	r3, r3, #16
 80006e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	fa93 f3a3 	rbit	r3, r3
 80006e8:	60bb      	str	r3, [r7, #8]
  return result;
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	fab3 f383 	clz	r3, r3
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	461a      	mov	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	fa03 f202 	lsl.w	r2, r3, r2
 80006fa:	4806      	ldr	r0, [pc, #24]	; (8000714 <LL_GPIO_AF_SetEXTISource+0x58>)
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	430a      	orrs	r2, r1
 8000702:	3302      	adds	r3, #2
 8000704:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000708:	bf00      	nop
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40010000 	.word	0x40010000

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 800071e:	2001      	movs	r0, #1
 8000720:	f7ff fe9e 	bl	8000460 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000724:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000728:	f7ff fe82 	bl	8000430 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f7ff fd0d 	bl	800014c <__NVIC_SetPriorityGrouping>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000732:	f7ff ffb3 	bl	800069c <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f8c5 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073a:	f000 f9cb 	bl	8000ad4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800073e:	f000 f973 	bl	8000a28 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000742:	f000 f8ff 	bl	8000944 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000746:	f000 f92f 	bl	80009a8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  int count=0;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  //WRITE_REG(TIM2->CCR1, 100);

  //LL_TIM_DisableIT_UPDATE(TIM2);
  //LL_TIM_EnableIT_CC1(TIM2);  //TIM2->DIER register CC1IE bit. (ENABLE)
  //LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1); //CCER register CC1E bit. (ENABLE)
  LL_TIM_EnableIT_UPDATE(TIM3); //TIM3->DIER register UIE bit (ENABLE)
 800074e:	485a      	ldr	r0, [pc, #360]	; (80008b8 <main+0x1a0>)
 8000750:	f7ff ff20 	bl	8000594 <LL_TIM_EnableIT_UPDATE>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //row:0
	  write_serial_in_parallel_out_register_plus(0b10000000);
 8000754:	2080      	movs	r0, #128	; 0x80
 8000756:	f000 fa41 	bl	8000bdc <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard_yellow, 0));
 800075a:	2100      	movs	r1, #0
 800075c:	4857      	ldr	r0, [pc, #348]	; (80008bc <main+0x1a4>)
 800075e:	f000 fe55 	bl	800140c <rowToBinary>
 8000762:	4603      	mov	r3, r0
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fb95 	bl	8000e94 <write_serial_in_parallel_out_register_minus_yellow>
	  write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard_red, 0));
 800076a:	2100      	movs	r1, #0
 800076c:	4854      	ldr	r0, [pc, #336]	; (80008c0 <main+0x1a8>)
 800076e:	f000 fe4d 	bl	800140c <rowToBinary>
 8000772:	4603      	mov	r3, r0
 8000774:	4618      	mov	r0, r3
 8000776:	f000 fcdf 	bl	8001138 <write_serial_in_parallel_out_register_minus_red>
	  LL_mDelay(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f001 ffb2 	bl	80026e4 <LL_mDelay>
	  //row:1
	  write_serial_in_parallel_out_register_plus(0b01000000);
 8000780:	2040      	movs	r0, #64	; 0x40
 8000782:	f000 fa2b 	bl	8000bdc <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard_yellow, 1));
 8000786:	2101      	movs	r1, #1
 8000788:	484c      	ldr	r0, [pc, #304]	; (80008bc <main+0x1a4>)
 800078a:	f000 fe3f 	bl	800140c <rowToBinary>
 800078e:	4603      	mov	r3, r0
 8000790:	4618      	mov	r0, r3
 8000792:	f000 fb7f 	bl	8000e94 <write_serial_in_parallel_out_register_minus_yellow>
	  write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard_red, 1));
 8000796:	2101      	movs	r1, #1
 8000798:	4849      	ldr	r0, [pc, #292]	; (80008c0 <main+0x1a8>)
 800079a:	f000 fe37 	bl	800140c <rowToBinary>
 800079e:	4603      	mov	r3, r0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 fcc9 	bl	8001138 <write_serial_in_parallel_out_register_minus_red>
	  LL_mDelay(1);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f001 ff9c 	bl	80026e4 <LL_mDelay>
	  //row:2
	  write_serial_in_parallel_out_register_plus(0b00100000);
 80007ac:	2020      	movs	r0, #32
 80007ae:	f000 fa15 	bl	8000bdc <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard_yellow, 2));
 80007b2:	2102      	movs	r1, #2
 80007b4:	4841      	ldr	r0, [pc, #260]	; (80008bc <main+0x1a4>)
 80007b6:	f000 fe29 	bl	800140c <rowToBinary>
 80007ba:	4603      	mov	r3, r0
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fb69 	bl	8000e94 <write_serial_in_parallel_out_register_minus_yellow>
	  write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard_red, 2));
 80007c2:	2102      	movs	r1, #2
 80007c4:	483e      	ldr	r0, [pc, #248]	; (80008c0 <main+0x1a8>)
 80007c6:	f000 fe21 	bl	800140c <rowToBinary>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fcb3 	bl	8001138 <write_serial_in_parallel_out_register_minus_red>
	  LL_mDelay(1);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f001 ff86 	bl	80026e4 <LL_mDelay>
	  //row:3
	  write_serial_in_parallel_out_register_plus(0b00010000);
 80007d8:	2010      	movs	r0, #16
 80007da:	f000 f9ff 	bl	8000bdc <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard_yellow, 3));
 80007de:	2103      	movs	r1, #3
 80007e0:	4836      	ldr	r0, [pc, #216]	; (80008bc <main+0x1a4>)
 80007e2:	f000 fe13 	bl	800140c <rowToBinary>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fb53 	bl	8000e94 <write_serial_in_parallel_out_register_minus_yellow>
	  write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard_red, 3));
 80007ee:	2103      	movs	r1, #3
 80007f0:	4833      	ldr	r0, [pc, #204]	; (80008c0 <main+0x1a8>)
 80007f2:	f000 fe0b 	bl	800140c <rowToBinary>
 80007f6:	4603      	mov	r3, r0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fc9d 	bl	8001138 <write_serial_in_parallel_out_register_minus_red>
	  LL_mDelay(1);
 80007fe:	2001      	movs	r0, #1
 8000800:	f001 ff70 	bl	80026e4 <LL_mDelay>
	  //row:4
	  write_serial_in_parallel_out_register_plus(0b00001000);
 8000804:	2008      	movs	r0, #8
 8000806:	f000 f9e9 	bl	8000bdc <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard_yellow, 4));
 800080a:	2104      	movs	r1, #4
 800080c:	482b      	ldr	r0, [pc, #172]	; (80008bc <main+0x1a4>)
 800080e:	f000 fdfd 	bl	800140c <rowToBinary>
 8000812:	4603      	mov	r3, r0
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fb3d 	bl	8000e94 <write_serial_in_parallel_out_register_minus_yellow>
	  write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard_red, 4));
 800081a:	2104      	movs	r1, #4
 800081c:	4828      	ldr	r0, [pc, #160]	; (80008c0 <main+0x1a8>)
 800081e:	f000 fdf5 	bl	800140c <rowToBinary>
 8000822:	4603      	mov	r3, r0
 8000824:	4618      	mov	r0, r3
 8000826:	f000 fc87 	bl	8001138 <write_serial_in_parallel_out_register_minus_red>
	  LL_mDelay(1);
 800082a:	2001      	movs	r0, #1
 800082c:	f001 ff5a 	bl	80026e4 <LL_mDelay>
	  //row:5
	  write_serial_in_parallel_out_register_plus(0b00000100);
 8000830:	2004      	movs	r0, #4
 8000832:	f000 f9d3 	bl	8000bdc <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard_yellow, 5));
 8000836:	2105      	movs	r1, #5
 8000838:	4820      	ldr	r0, [pc, #128]	; (80008bc <main+0x1a4>)
 800083a:	f000 fde7 	bl	800140c <rowToBinary>
 800083e:	4603      	mov	r3, r0
 8000840:	4618      	mov	r0, r3
 8000842:	f000 fb27 	bl	8000e94 <write_serial_in_parallel_out_register_minus_yellow>
	  write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard_red, 5));
 8000846:	2105      	movs	r1, #5
 8000848:	481d      	ldr	r0, [pc, #116]	; (80008c0 <main+0x1a8>)
 800084a:	f000 fddf 	bl	800140c <rowToBinary>
 800084e:	4603      	mov	r3, r0
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fc71 	bl	8001138 <write_serial_in_parallel_out_register_minus_red>
	  LL_mDelay(1);
 8000856:	2001      	movs	r0, #1
 8000858:	f001 ff44 	bl	80026e4 <LL_mDelay>
	  //row:6
	  write_serial_in_parallel_out_register_plus(0b00000010);
 800085c:	2002      	movs	r0, #2
 800085e:	f000 f9bd 	bl	8000bdc <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard_yellow, 6));
 8000862:	2106      	movs	r1, #6
 8000864:	4815      	ldr	r0, [pc, #84]	; (80008bc <main+0x1a4>)
 8000866:	f000 fdd1 	bl	800140c <rowToBinary>
 800086a:	4603      	mov	r3, r0
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fb11 	bl	8000e94 <write_serial_in_parallel_out_register_minus_yellow>
	  write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard_red, 6));
 8000872:	2106      	movs	r1, #6
 8000874:	4812      	ldr	r0, [pc, #72]	; (80008c0 <main+0x1a8>)
 8000876:	f000 fdc9 	bl	800140c <rowToBinary>
 800087a:	4603      	mov	r3, r0
 800087c:	4618      	mov	r0, r3
 800087e:	f000 fc5b 	bl	8001138 <write_serial_in_parallel_out_register_minus_red>
	  LL_mDelay(1);
 8000882:	2001      	movs	r0, #1
 8000884:	f001 ff2e 	bl	80026e4 <LL_mDelay>
	  //row:7
	  write_serial_in_parallel_out_register_plus(0b00000001);
 8000888:	2001      	movs	r0, #1
 800088a:	f000 f9a7 	bl	8000bdc <write_serial_in_parallel_out_register_plus>
	  write_serial_in_parallel_out_register_minus_yellow(rowToBinary(dotMatrixBoard_yellow, 7));
 800088e:	2107      	movs	r1, #7
 8000890:	480a      	ldr	r0, [pc, #40]	; (80008bc <main+0x1a4>)
 8000892:	f000 fdbb 	bl	800140c <rowToBinary>
 8000896:	4603      	mov	r3, r0
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fafb 	bl	8000e94 <write_serial_in_parallel_out_register_minus_yellow>
	  write_serial_in_parallel_out_register_minus_red(rowToBinary(dotMatrixBoard_red, 7));
 800089e:	2107      	movs	r1, #7
 80008a0:	4807      	ldr	r0, [pc, #28]	; (80008c0 <main+0x1a8>)
 80008a2:	f000 fdb3 	bl	800140c <rowToBinary>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 fc45 	bl	8001138 <write_serial_in_parallel_out_register_minus_red>
	  LL_mDelay(1);
 80008ae:	2001      	movs	r0, #1
 80008b0:	f001 ff18 	bl	80026e4 <LL_mDelay>
	  write_serial_in_parallel_out_register_plus(0b10000000);
 80008b4:	e74e      	b.n	8000754 <main+0x3c>
 80008b6:	bf00      	nop
 80008b8:	40000400 	.word	0x40000400
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000040 	.word	0x20000040

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80008c8:	2002      	movs	r0, #2
 80008ca:	f7ff fde1 	bl	8000490 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80008ce:	bf00      	nop
 80008d0:	f7ff fdf2 	bl	80004b8 <LL_FLASH_GetLatency>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d1fa      	bne.n	80008d0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80008da:	2010      	movs	r0, #16
 80008dc:	f7ff fd00 	bl	80002e0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80008e0:	f7ff fcde 	bl	80002a0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80008e4:	bf00      	nop
 80008e6:	f7ff fce9 	bl	80002bc <LL_RCC_HSI_IsReady>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d1fa      	bne.n	80008e6 <SystemClock_Config+0x22>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
 80008f0:	f44f 1160 	mov.w	r1, #3670016	; 0x380000
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff fd83 	bl	8000400 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80008fa:	f7ff fd61 	bl	80003c0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80008fe:	bf00      	nop
 8000900:	f7ff fd6c 	bl	80003dc <LL_RCC_PLL_IsReady>
 8000904:	4603      	mov	r3, r0
 8000906:	2b01      	cmp	r3, #1
 8000908:	d1fa      	bne.n	8000900 <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff fd1c 	bl	8000348 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000910:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000914:	f7ff fd2c 	bl	8000370 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000918:	2000      	movs	r0, #0
 800091a:	f7ff fd3d 	bl	8000398 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800091e:	2002      	movs	r0, #2
 8000920:	f7ff fcf2 	bl	8000308 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000924:	bf00      	nop
 8000926:	f7ff fd03 	bl	8000330 <LL_RCC_GetSysClkSource>
 800092a:	4603      	mov	r3, r0
 800092c:	2b08      	cmp	r3, #8
 800092e:	d1fa      	bne.n	8000926 <SystemClock_Config+0x62>
  {

  }
  LL_Init1msTick(64000000);
 8000930:	4803      	ldr	r0, [pc, #12]	; (8000940 <SystemClock_Config+0x7c>)
 8000932:	f001 fec9 	bl	80026c8 <LL_Init1msTick>
  LL_SetSystemCoreClock(64000000);
 8000936:	4802      	ldr	r0, [pc, #8]	; (8000940 <SystemClock_Config+0x7c>)
 8000938:	f001 fef8 	bl	800272c <LL_SetSystemCoreClock>
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	03d09000 	.word	0x03d09000

08000944 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000958:	2001      	movs	r0, #1
 800095a:	f7ff fd69 	bl	8000430 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 63;
 800095e:	233f      	movs	r3, #63	; 0x3f
 8000960:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8000966:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800096a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4619      	mov	r1, r3
 8000974:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000978:	f001 fd38 	bl	80023ec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800097c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000980:	f7ff fdc4 	bl	800050c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000984:	2100      	movs	r1, #0
 8000986:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800098a:	f7ff fdce 	bl	800052a <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800098e:	2100      	movs	r1, #0
 8000990:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000994:	f7ff fddd 	bl	8000552 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000998:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800099c:	f7ff fdeb 	bl	8000576 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80009bc:	2002      	movs	r0, #2
 80009be:	f7ff fd37 	bl	8000430 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80009c2:	f7ff fbe7 	bl	8000194 <__NVIC_GetPriorityGrouping>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fc35 	bl	800023c <NVIC_EncodePriority>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4619      	mov	r1, r3
 80009d6:	201d      	movs	r0, #29
 80009d8:	f7ff fc06 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80009dc:	201d      	movs	r0, #29
 80009de:	f7ff fbe7 	bl	80001b0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 64000-LL_TIM_IC_FILTER_FDIV1_N2;
 80009e2:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 80009e6:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 200;
 80009ec:	23c8      	movs	r3, #200	; 0xc8
 80009ee:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	4619      	mov	r1, r3
 80009f8:	480a      	ldr	r0, [pc, #40]	; (8000a24 <MX_TIM3_Init+0x7c>)
 80009fa:	f001 fcf7 	bl	80023ec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80009fe:	4809      	ldr	r0, [pc, #36]	; (8000a24 <MX_TIM3_Init+0x7c>)
 8000a00:	f7ff fd84 	bl	800050c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000a04:	2100      	movs	r1, #0
 8000a06:	4807      	ldr	r0, [pc, #28]	; (8000a24 <MX_TIM3_Init+0x7c>)
 8000a08:	f7ff fd8f 	bl	800052a <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_TIM3_Init+0x7c>)
 8000a10:	f7ff fd9f 	bl	8000552 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8000a14:	4803      	ldr	r0, [pc, #12]	; (8000a24 <MX_TIM3_Init+0x7c>)
 8000a16:	f7ff fdae 	bl	8000576 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40000400 	.word	0x40000400

08000a28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	; 0x30
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]
 8000a3e:	615a      	str	r2, [r3, #20]
 8000a40:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	463b      	mov	r3, r7
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000a50:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a54:	f7ff fcec 	bl	8000430 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000a58:	2004      	movs	r0, #4
 8000a5a:	f7ff fd01 	bl	8000460 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000a5e:	f240 4304 	movw	r3, #1028	; 0x404
 8000a62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a64:	2309      	movs	r3, #9
 8000a66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	463b      	mov	r3, r7
 8000a72:	4619      	mov	r1, r3
 8000a74:	4815      	ldr	r0, [pc, #84]	; (8000acc <MX_USART2_UART_Init+0xa4>)
 8000a76:	f001 fb0a 	bl	800208e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000a7a:	f640 0308 	movw	r3, #2056	; 0x808
 8000a7e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000a80:	2304      	movs	r3, #4
 8000a82:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	463b      	mov	r3, r7
 8000a86:	4619      	mov	r1, r3
 8000a88:	4810      	ldr	r0, [pc, #64]	; (8000acc <MX_USART2_UART_Init+0xa4>)
 8000a8a:	f001 fb00 	bl	800208e <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000a8e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000a92:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000aa0:	230c      	movs	r3, #12
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <MX_USART2_UART_Init+0xa8>)
 8000ab4:	f001 fd8e 	bl	80025d4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000ab8:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_USART2_UART_Init+0xa8>)
 8000aba:	f7ff fd89 	bl	80005d0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000abe:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_USART2_UART_Init+0xa8>)
 8000ac0:	f7ff fd77 	bl	80005b2 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	3730      	adds	r7, #48	; 0x30
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40010800 	.word	0x40010800
 8000ad0:	40004400 	.word	0x40004400

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000ada:	f107 0318 	add.w	r3, r7, #24
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000af2:	2004      	movs	r0, #4
 8000af4:	f7ff fcb4 	bl	8000460 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8000af8:	2010      	movs	r0, #16
 8000afa:	f7ff fcb1 	bl	8000460 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000afe:	2008      	movs	r0, #8
 8000b00:	f7ff fcae 	bl	8000460 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, MR_3_Pin|MR_2_Pin|DSA_3_Pin|DSA_1_Pin);
 8000b04:	492f      	ldr	r1, [pc, #188]	; (8000bc4 <MX_GPIO_Init+0xf0>)
 8000b06:	4830      	ldr	r0, [pc, #192]	; (8000bc8 <MX_GPIO_Init+0xf4>)
 8000b08:	f7ff fdb8 	bl	800067c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, CP_2_Pin|DSA_2_Pin|CP_1_Pin|MR_1_Pin);
 8000b0c:	492f      	ldr	r1, [pc, #188]	; (8000bcc <MX_GPIO_Init+0xf8>)
 8000b0e:	4830      	ldr	r0, [pc, #192]	; (8000bd0 <MX_GPIO_Init+0xfc>)
 8000b10:	f7ff fdb4 	bl	800067c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CP_3_GPIO_Port, CP_3_Pin);
 8000b14:	f248 0180 	movw	r1, #32896	; 0x8080
 8000b18:	482e      	ldr	r0, [pc, #184]	; (8000bd4 <MX_GPIO_Init+0x100>)
 8000b1a:	f7ff fdaf 	bl	800067c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MR_3_Pin|MR_2_Pin|DSA_3_Pin|DSA_1_Pin;
 8000b1e:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <MX_GPIO_Init+0xf0>)
 8000b20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b22:	2301      	movs	r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b26:	2302      	movs	r3, #2
 8000b28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	4619      	mov	r1, r3
 8000b32:	4825      	ldr	r0, [pc, #148]	; (8000bc8 <MX_GPIO_Init+0xf4>)
 8000b34:	f001 faab 	bl	800208e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CP_2_Pin|DSA_2_Pin|CP_1_Pin|MR_1_Pin;
 8000b38:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <MX_GPIO_Init+0xf8>)
 8000b3a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b40:	2302      	movs	r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4820      	ldr	r0, [pc, #128]	; (8000bd0 <MX_GPIO_Init+0xfc>)
 8000b4e:	f001 fa9e 	bl	800208e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CP_3_Pin;
 8000b52:	f248 0380 	movw	r3, #32896	; 0x8080
 8000b56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CP_3_GPIO_Port, &GPIO_InitStruct);
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	4619      	mov	r1, r3
 8000b68:	481a      	ldr	r0, [pc, #104]	; (8000bd4 <MX_GPIO_Init+0x100>)
 8000b6a:	f001 fa90 	bl	800208e <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTC, LL_GPIO_AF_EXTI_LINE4);
 8000b6e:	491a      	ldr	r1, [pc, #104]	; (8000bd8 <MX_GPIO_Init+0x104>)
 8000b70:	2002      	movs	r0, #2
 8000b72:	f7ff fda3 	bl	80006bc <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8000b76:	2310      	movs	r3, #16
 8000b78:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000b82:	2302      	movs	r3, #2
 8000b84:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000b86:	f107 0318 	add.w	r3, r7, #24
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 f948 	bl	8001e20 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(tact_switch_GPIO_Port, tact_switch_Pin, LL_GPIO_MODE_FLOATING);
 8000b90:	2204      	movs	r2, #4
 8000b92:	f241 0110 	movw	r1, #4112	; 0x1010
 8000b96:	480f      	ldr	r0, [pc, #60]	; (8000bd4 <MX_GPIO_Init+0x100>)
 8000b98:	f7ff fd2f 	bl	80005fa <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b9c:	f7ff fafa 	bl	8000194 <__NVIC_GetPriorityGrouping>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fb48 	bl	800023c <NVIC_EncodePriority>
 8000bac:	4603      	mov	r3, r0
 8000bae:	4619      	mov	r1, r3
 8000bb0:	200a      	movs	r0, #10
 8000bb2:	f7ff fb19 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 8000bb6:	200a      	movs	r0, #10
 8000bb8:	f7ff fafa 	bl	80001b0 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bbc:	bf00      	nop
 8000bbe:	3720      	adds	r7, #32
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	04078087 	.word	0x04078087
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	04445054 	.word	0x04445054
 8000bd0:	40010c00 	.word	0x40010c00
 8000bd4:	40011000 	.word	0x40011000
 8000bd8:	000f0001 	.word	0x000f0001

08000bdc <write_serial_in_parallel_out_register_plus>:
	LL_mDelay(100);
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10);
	LL_mDelay(100);
}

void write_serial_in_parallel_out_register_plus(unsigned char data){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
	 *      data      1    1   0   0   0  0   0   1
	 *
	 *
	 */
	//all reset
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000be6:	49a6      	ldr	r1, [pc, #664]	; (8000e80 <write_serial_in_parallel_out_register_plus+0x2a4>)
 8000be8:	48a6      	ldr	r0, [pc, #664]	; (8000e84 <write_serial_in_parallel_out_register_plus+0x2a8>)
 8000bea:	f7ff fd47 	bl	800067c <LL_GPIO_ResetOutputPin>
	delay_us(1);
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f000 ff76 	bl	8001ae0 <delay_us>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000bf4:	49a2      	ldr	r1, [pc, #648]	; (8000e80 <write_serial_in_parallel_out_register_plus+0x2a4>)
 8000bf6:	48a3      	ldr	r0, [pc, #652]	; (8000e84 <write_serial_in_parallel_out_register_plus+0x2a8>)
 8000bf8:	f7ff fd31 	bl	800065e <LL_GPIO_SetOutputPin>

	//Q7
	unsigned int bitValue = bitRead(data, 0);
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]

	switch(bitValue){
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <write_serial_in_parallel_out_register_plus+0x36>
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d005      	beq.n	8000c1c <write_serial_in_parallel_out_register_plus+0x40>
 8000c10:	e009      	b.n	8000c26 <write_serial_in_parallel_out_register_plus+0x4a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000c12:	499d      	ldr	r1, [pc, #628]	; (8000e88 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000c14:	489d      	ldr	r0, [pc, #628]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000c16:	f7ff fd31 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 8000c1a:	e004      	b.n	8000c26 <write_serial_in_parallel_out_register_plus+0x4a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000c1c:	499a      	ldr	r1, [pc, #616]	; (8000e88 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000c1e:	489b      	ldr	r0, [pc, #620]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000c20:	f7ff fd1d 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 8000c24:	bf00      	nop

	}

	delay_us(1);
 8000c26:	2001      	movs	r0, #1
 8000c28:	f000 ff5a 	bl	8001ae0 <delay_us>

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 1
 8000c2c:	4998      	ldr	r1, [pc, #608]	; (8000e90 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000c2e:	4897      	ldr	r0, [pc, #604]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000c30:	f7ff fd15 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 ff53 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000c3a:	4995      	ldr	r1, [pc, #596]	; (8000e90 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000c3c:	4893      	ldr	r0, [pc, #588]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000c3e:	f7ff fd1d 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000c42:	2001      	movs	r0, #1
 8000c44:	f000 ff4c 	bl	8001ae0 <delay_us>

	//Q6
	bitValue = bitRead(data, 1);
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	085b      	lsrs	r3, r3, #1
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d003      	beq.n	8000c62 <write_serial_in_parallel_out_register_plus+0x86>
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d005      	beq.n	8000c6c <write_serial_in_parallel_out_register_plus+0x90>
 8000c60:	e009      	b.n	8000c76 <write_serial_in_parallel_out_register_plus+0x9a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000c62:	4989      	ldr	r1, [pc, #548]	; (8000e88 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000c64:	4889      	ldr	r0, [pc, #548]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000c66:	f7ff fd09 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 8000c6a:	e004      	b.n	8000c76 <write_serial_in_parallel_out_register_plus+0x9a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000c6c:	4986      	ldr	r1, [pc, #536]	; (8000e88 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000c6e:	4887      	ldr	r0, [pc, #540]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000c70:	f7ff fcf5 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 8000c74:	bf00      	nop

	}

	delay_us(1);
 8000c76:	2001      	movs	r0, #1
 8000c78:	f000 ff32 	bl	8001ae0 <delay_us>

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 2
 8000c7c:	4984      	ldr	r1, [pc, #528]	; (8000e90 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000c7e:	4883      	ldr	r0, [pc, #524]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000c80:	f7ff fced 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f000 ff2b 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000c8a:	4981      	ldr	r1, [pc, #516]	; (8000e90 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000c8c:	487f      	ldr	r0, [pc, #508]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000c8e:	f7ff fcf5 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000c92:	2001      	movs	r0, #1
 8000c94:	f000 ff24 	bl	8001ae0 <delay_us>

	//Q5
	bitValue = bitRead(data, 2);
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	089b      	lsrs	r3, r3, #2
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <write_serial_in_parallel_out_register_plus+0xd6>
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d005      	beq.n	8000cbc <write_serial_in_parallel_out_register_plus+0xe0>
 8000cb0:	e009      	b.n	8000cc6 <write_serial_in_parallel_out_register_plus+0xea>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000cb2:	4975      	ldr	r1, [pc, #468]	; (8000e88 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000cb4:	4875      	ldr	r0, [pc, #468]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000cb6:	f7ff fce1 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 8000cba:	e004      	b.n	8000cc6 <write_serial_in_parallel_out_register_plus+0xea>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000cbc:	4972      	ldr	r1, [pc, #456]	; (8000e88 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000cbe:	4873      	ldr	r0, [pc, #460]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000cc0:	f7ff fccd 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 8000cc4:	bf00      	nop

	}

	delay_us(1);
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f000 ff0a 	bl	8001ae0 <delay_us>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 3
 8000ccc:	4970      	ldr	r1, [pc, #448]	; (8000e90 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000cce:	486f      	ldr	r0, [pc, #444]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000cd0:	f7ff fcc5 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f000 ff03 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000cda:	496d      	ldr	r1, [pc, #436]	; (8000e90 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000cdc:	486b      	ldr	r0, [pc, #428]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000cde:	f7ff fccd 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f000 fefc 	bl	8001ae0 <delay_us>

	//Q4
	bitValue = bitRead(data, 3);
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <write_serial_in_parallel_out_register_plus+0x126>
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d005      	beq.n	8000d0c <write_serial_in_parallel_out_register_plus+0x130>
 8000d00:	e009      	b.n	8000d16 <write_serial_in_parallel_out_register_plus+0x13a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000d02:	4961      	ldr	r1, [pc, #388]	; (8000e88 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000d04:	4861      	ldr	r0, [pc, #388]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000d06:	f7ff fcb9 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 8000d0a:	e004      	b.n	8000d16 <write_serial_in_parallel_out_register_plus+0x13a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000d0c:	495e      	ldr	r1, [pc, #376]	; (8000e88 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000d0e:	485f      	ldr	r0, [pc, #380]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000d10:	f7ff fca5 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 8000d14:	bf00      	nop

	}

	delay_us(1);
 8000d16:	2001      	movs	r0, #1
 8000d18:	f000 fee2 	bl	8001ae0 <delay_us>

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 4
 8000d1c:	495c      	ldr	r1, [pc, #368]	; (8000e90 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000d1e:	485b      	ldr	r0, [pc, #364]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000d20:	f7ff fc9d 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000d24:	2001      	movs	r0, #1
 8000d26:	f000 fedb 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000d2a:	4959      	ldr	r1, [pc, #356]	; (8000e90 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000d2c:	4857      	ldr	r0, [pc, #348]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000d2e:	f7ff fca5 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000d32:	2001      	movs	r0, #1
 8000d34:	f000 fed4 	bl	8001ae0 <delay_us>

	//Q3
	bitValue = bitRead(data, 4);
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	091b      	lsrs	r3, r3, #4
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <write_serial_in_parallel_out_register_plus+0x176>
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d005      	beq.n	8000d5c <write_serial_in_parallel_out_register_plus+0x180>
 8000d50:	e009      	b.n	8000d66 <write_serial_in_parallel_out_register_plus+0x18a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000d52:	494d      	ldr	r1, [pc, #308]	; (8000e88 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000d54:	484d      	ldr	r0, [pc, #308]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000d56:	f7ff fc91 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 8000d5a:	e004      	b.n	8000d66 <write_serial_in_parallel_out_register_plus+0x18a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000d5c:	494a      	ldr	r1, [pc, #296]	; (8000e88 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000d5e:	484b      	ldr	r0, [pc, #300]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000d60:	f7ff fc7d 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 8000d64:	bf00      	nop

	}

	delay_us(1);
 8000d66:	2001      	movs	r0, #1
 8000d68:	f000 feba 	bl	8001ae0 <delay_us>

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 5
 8000d6c:	4948      	ldr	r1, [pc, #288]	; (8000e90 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000d6e:	4847      	ldr	r0, [pc, #284]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000d70:	f7ff fc75 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000d74:	2001      	movs	r0, #1
 8000d76:	f000 feb3 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000d7a:	4945      	ldr	r1, [pc, #276]	; (8000e90 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000d7c:	4843      	ldr	r0, [pc, #268]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000d7e:	f7ff fc7d 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000d82:	2001      	movs	r0, #1
 8000d84:	f000 feac 	bl	8001ae0 <delay_us>

	//Q2
	bitValue = bitRead(data, 5);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <write_serial_in_parallel_out_register_plus+0x1c6>
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d005      	beq.n	8000dac <write_serial_in_parallel_out_register_plus+0x1d0>
 8000da0:	e009      	b.n	8000db6 <write_serial_in_parallel_out_register_plus+0x1da>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000da2:	4939      	ldr	r1, [pc, #228]	; (8000e88 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000da4:	4839      	ldr	r0, [pc, #228]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000da6:	f7ff fc69 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 8000daa:	e004      	b.n	8000db6 <write_serial_in_parallel_out_register_plus+0x1da>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000dac:	4936      	ldr	r1, [pc, #216]	; (8000e88 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000dae:	4837      	ldr	r0, [pc, #220]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000db0:	f7ff fc55 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 8000db4:	bf00      	nop

	}

	delay_us(1);
 8000db6:	2001      	movs	r0, #1
 8000db8:	f000 fe92 	bl	8001ae0 <delay_us>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 6
 8000dbc:	4934      	ldr	r1, [pc, #208]	; (8000e90 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000dbe:	4833      	ldr	r0, [pc, #204]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000dc0:	f7ff fc4d 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f000 fe8b 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000dca:	4931      	ldr	r1, [pc, #196]	; (8000e90 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000dcc:	482f      	ldr	r0, [pc, #188]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000dce:	f7ff fc55 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f000 fe84 	bl	8001ae0 <delay_us>

	//Q1
	bitValue = bitRead(data, 6);
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	099b      	lsrs	r3, r3, #6
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <write_serial_in_parallel_out_register_plus+0x216>
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d005      	beq.n	8000dfc <write_serial_in_parallel_out_register_plus+0x220>
 8000df0:	e009      	b.n	8000e06 <write_serial_in_parallel_out_register_plus+0x22a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000df2:	4925      	ldr	r1, [pc, #148]	; (8000e88 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000df4:	4825      	ldr	r0, [pc, #148]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000df6:	f7ff fc41 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 8000dfa:	e004      	b.n	8000e06 <write_serial_in_parallel_out_register_plus+0x22a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000dfc:	4922      	ldr	r1, [pc, #136]	; (8000e88 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000dfe:	4823      	ldr	r0, [pc, #140]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000e00:	f7ff fc2d 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 8000e04:	bf00      	nop

	}

	delay_us(1);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f000 fe6a 	bl	8001ae0 <delay_us>

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 7
 8000e0c:	4920      	ldr	r1, [pc, #128]	; (8000e90 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000e0e:	481f      	ldr	r0, [pc, #124]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000e10:	f7ff fc25 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000e14:	2001      	movs	r0, #1
 8000e16:	f000 fe63 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000e1a:	491d      	ldr	r1, [pc, #116]	; (8000e90 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000e1c:	481b      	ldr	r0, [pc, #108]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000e1e:	f7ff fc2d 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000e22:	2001      	movs	r0, #1
 8000e24:	f000 fe5c 	bl	8001ae0 <delay_us>

	//Q0
	bitValue = bitRead(data, 7);
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	09db      	lsrs	r3, r3, #7
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <write_serial_in_parallel_out_register_plus+0x266>
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d005      	beq.n	8000e4c <write_serial_in_parallel_out_register_plus+0x270>
 8000e40:	e009      	b.n	8000e56 <write_serial_in_parallel_out_register_plus+0x27a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=low
 8000e42:	4911      	ldr	r1, [pc, #68]	; (8000e88 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000e44:	4811      	ldr	r0, [pc, #68]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000e46:	f7ff fc19 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 8000e4a:	e004      	b.n	8000e56 <write_serial_in_parallel_out_register_plus+0x27a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_14); //data=high
 8000e4c:	490e      	ldr	r1, [pc, #56]	; (8000e88 <write_serial_in_parallel_out_register_plus+0x2ac>)
 8000e4e:	480f      	ldr	r0, [pc, #60]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000e50:	f7ff fc05 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 8000e54:	bf00      	nop

	}

	delay_us(1);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f000 fe42 	bl	8001ae0 <delay_us>

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);  //clock pulse 8
 8000e5c:	490c      	ldr	r1, [pc, #48]	; (8000e90 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000e5e:	480b      	ldr	r0, [pc, #44]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000e60:	f7ff fbfd 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000e64:	2001      	movs	r0, #1
 8000e66:	f000 fe3b 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000e6a:	4909      	ldr	r1, [pc, #36]	; (8000e90 <write_serial_in_parallel_out_register_plus+0x2b4>)
 8000e6c:	4807      	ldr	r0, [pc, #28]	; (8000e8c <write_serial_in_parallel_out_register_plus+0x2b0>)
 8000e6e:	f7ff fc05 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f000 fe34 	bl	8001ae0 <delay_us>

}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	04010001 	.word	0x04010001
 8000e84:	40010800 	.word	0x40010800
 8000e88:	04400040 	.word	0x04400040
 8000e8c:	40010c00 	.word	0x40010c00
 8000e90:	04040004 	.word	0x04040004

08000e94 <write_serial_in_parallel_out_register_minus_yellow>:
	//LL_mDelay(time_gap);
	delay_us(1);

}

void write_serial_in_parallel_out_register_minus_yellow(unsigned char data){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
	 *      data      1    1   0   0   0  0   0   1
	 *
	 *
	 */
	//all reset
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8000e9e:	f244 0140 	movw	r1, #16448	; 0x4040
 8000ea2:	48a2      	ldr	r0, [pc, #648]	; (800112c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000ea4:	f7ff fbea 	bl	800067c <LL_GPIO_ResetOutputPin>
	delay_us(1);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f000 fe19 	bl	8001ae0 <delay_us>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8000eae:	f244 0140 	movw	r1, #16448	; 0x4040
 8000eb2:	489e      	ldr	r0, [pc, #632]	; (800112c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000eb4:	f7ff fbd3 	bl	800065e <LL_GPIO_SetOutputPin>

	//Q7
	unsigned int bitValue = bitRead(data, 0);
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]

	switch(bitValue){
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <write_serial_in_parallel_out_register_minus_yellow+0x3a>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d005      	beq.n	8000ed8 <write_serial_in_parallel_out_register_minus_yellow+0x44>
 8000ecc:	e009      	b.n	8000ee2 <write_serial_in_parallel_out_register_minus_yellow+0x4e>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8000ece:	4998      	ldr	r1, [pc, #608]	; (8001130 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000ed0:	4898      	ldr	r0, [pc, #608]	; (8001134 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000ed2:	f7ff fbd3 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 8000ed6:	e004      	b.n	8000ee2 <write_serial_in_parallel_out_register_minus_yellow+0x4e>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8000ed8:	4995      	ldr	r1, [pc, #596]	; (8001130 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000eda:	4896      	ldr	r0, [pc, #600]	; (8001134 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000edc:	f7ff fbbf 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 8000ee0:	bf00      	nop

	}

	//delay_us(1);

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 1
 8000ee2:	f241 0110 	movw	r1, #4112	; 0x1010
 8000ee6:	4891      	ldr	r0, [pc, #580]	; (800112c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000ee8:	f7ff fbb9 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000eec:	2001      	movs	r0, #1
 8000eee:	f000 fdf7 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000ef2:	f241 0110 	movw	r1, #4112	; 0x1010
 8000ef6:	488d      	ldr	r0, [pc, #564]	; (800112c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000ef8:	f7ff fbc0 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000efc:	2001      	movs	r0, #1
 8000efe:	f000 fdef 	bl	8001ae0 <delay_us>

	//Q6
	bitValue = bitRead(data, 1);
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	085b      	lsrs	r3, r3, #1
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <write_serial_in_parallel_out_register_minus_yellow+0x88>
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d005      	beq.n	8000f26 <write_serial_in_parallel_out_register_minus_yellow+0x92>
 8000f1a:	e009      	b.n	8000f30 <write_serial_in_parallel_out_register_minus_yellow+0x9c>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8000f1c:	4984      	ldr	r1, [pc, #528]	; (8001130 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000f1e:	4885      	ldr	r0, [pc, #532]	; (8001134 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000f20:	f7ff fbac 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 8000f24:	e004      	b.n	8000f30 <write_serial_in_parallel_out_register_minus_yellow+0x9c>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8000f26:	4982      	ldr	r1, [pc, #520]	; (8001130 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000f28:	4882      	ldr	r0, [pc, #520]	; (8001134 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000f2a:	f7ff fb98 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 8000f2e:	bf00      	nop

	}

	//delay_us(1);

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 2
 8000f30:	f241 0110 	movw	r1, #4112	; 0x1010
 8000f34:	487d      	ldr	r0, [pc, #500]	; (800112c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000f36:	f7ff fb92 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f000 fdd0 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000f40:	f241 0110 	movw	r1, #4112	; 0x1010
 8000f44:	4879      	ldr	r0, [pc, #484]	; (800112c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000f46:	f7ff fb99 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f000 fdc8 	bl	8001ae0 <delay_us>

	//Q5
	bitValue = bitRead(data, 2);
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <write_serial_in_parallel_out_register_minus_yellow+0xd6>
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d005      	beq.n	8000f74 <write_serial_in_parallel_out_register_minus_yellow+0xe0>
 8000f68:	e009      	b.n	8000f7e <write_serial_in_parallel_out_register_minus_yellow+0xea>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8000f6a:	4971      	ldr	r1, [pc, #452]	; (8001130 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000f6c:	4871      	ldr	r0, [pc, #452]	; (8001134 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000f6e:	f7ff fb85 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 8000f72:	e004      	b.n	8000f7e <write_serial_in_parallel_out_register_minus_yellow+0xea>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8000f74:	496e      	ldr	r1, [pc, #440]	; (8001130 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000f76:	486f      	ldr	r0, [pc, #444]	; (8001134 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000f78:	f7ff fb71 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 8000f7c:	bf00      	nop

	}

	//delay_us(1);

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 3
 8000f7e:	f241 0110 	movw	r1, #4112	; 0x1010
 8000f82:	486a      	ldr	r0, [pc, #424]	; (800112c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000f84:	f7ff fb6b 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f000 fda9 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000f8e:	f241 0110 	movw	r1, #4112	; 0x1010
 8000f92:	4866      	ldr	r0, [pc, #408]	; (800112c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000f94:	f7ff fb72 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f000 fda1 	bl	8001ae0 <delay_us>

	//Q4
	bitValue = bitRead(data, 3);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	08db      	lsrs	r3, r3, #3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <write_serial_in_parallel_out_register_minus_yellow+0x124>
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d005      	beq.n	8000fc2 <write_serial_in_parallel_out_register_minus_yellow+0x12e>
 8000fb6:	e009      	b.n	8000fcc <write_serial_in_parallel_out_register_minus_yellow+0x138>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8000fb8:	495d      	ldr	r1, [pc, #372]	; (8001130 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000fba:	485e      	ldr	r0, [pc, #376]	; (8001134 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000fbc:	f7ff fb5e 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 8000fc0:	e004      	b.n	8000fcc <write_serial_in_parallel_out_register_minus_yellow+0x138>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8000fc2:	495b      	ldr	r1, [pc, #364]	; (8001130 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8000fc4:	485b      	ldr	r0, [pc, #364]	; (8001134 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8000fc6:	f7ff fb4a 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 8000fca:	bf00      	nop

	}

	//delay_us(1);
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);   //clock pulse 4
 8000fcc:	f241 0110 	movw	r1, #4112	; 0x1010
 8000fd0:	4856      	ldr	r0, [pc, #344]	; (800112c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000fd2:	f7ff fb44 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f000 fd82 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000fdc:	f241 0110 	movw	r1, #4112	; 0x1010
 8000fe0:	4852      	ldr	r0, [pc, #328]	; (800112c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8000fe2:	f7ff fb4b 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f000 fd7a 	bl	8001ae0 <delay_us>

	//Q3
	bitValue = bitRead(data, 4);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	091b      	lsrs	r3, r3, #4
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <write_serial_in_parallel_out_register_minus_yellow+0x172>
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d005      	beq.n	8001010 <write_serial_in_parallel_out_register_minus_yellow+0x17c>
 8001004:	e009      	b.n	800101a <write_serial_in_parallel_out_register_minus_yellow+0x186>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8001006:	494a      	ldr	r1, [pc, #296]	; (8001130 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8001008:	484a      	ldr	r0, [pc, #296]	; (8001134 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 800100a:	f7ff fb37 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 800100e:	e004      	b.n	800101a <write_serial_in_parallel_out_register_minus_yellow+0x186>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 8001010:	4947      	ldr	r1, [pc, #284]	; (8001130 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8001012:	4848      	ldr	r0, [pc, #288]	; (8001134 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8001014:	f7ff fb23 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 8001018:	bf00      	nop

	}

	//delay_us(1);

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 5
 800101a:	f241 0110 	movw	r1, #4112	; 0x1010
 800101e:	4843      	ldr	r0, [pc, #268]	; (800112c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8001020:	f7ff fb1d 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 8001024:	2001      	movs	r0, #1
 8001026:	f000 fd5b 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 800102a:	f241 0110 	movw	r1, #4112	; 0x1010
 800102e:	483f      	ldr	r0, [pc, #252]	; (800112c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 8001030:	f7ff fb24 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8001034:	2001      	movs	r0, #1
 8001036:	f000 fd53 	bl	8001ae0 <delay_us>

	//Q2
	bitValue = bitRead(data, 5);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	095b      	lsrs	r3, r3, #5
 800103e:	b2db      	uxtb	r3, r3
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <write_serial_in_parallel_out_register_minus_yellow+0x1c0>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d005      	beq.n	800105e <write_serial_in_parallel_out_register_minus_yellow+0x1ca>
 8001052:	e009      	b.n	8001068 <write_serial_in_parallel_out_register_minus_yellow+0x1d4>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 8001054:	4936      	ldr	r1, [pc, #216]	; (8001130 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8001056:	4837      	ldr	r0, [pc, #220]	; (8001134 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8001058:	f7ff fb10 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 800105c:	e004      	b.n	8001068 <write_serial_in_parallel_out_register_minus_yellow+0x1d4>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 800105e:	4934      	ldr	r1, [pc, #208]	; (8001130 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 8001060:	4834      	ldr	r0, [pc, #208]	; (8001134 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 8001062:	f7ff fafc 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 8001066:	bf00      	nop

	}

	//delay_us(1);
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 6
 8001068:	f241 0110 	movw	r1, #4112	; 0x1010
 800106c:	482f      	ldr	r0, [pc, #188]	; (800112c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 800106e:	f7ff faf6 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 8001072:	2001      	movs	r0, #1
 8001074:	f000 fd34 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001078:	f241 0110 	movw	r1, #4112	; 0x1010
 800107c:	482b      	ldr	r0, [pc, #172]	; (800112c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 800107e:	f7ff fafd 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 8001082:	2001      	movs	r0, #1
 8001084:	f000 fd2c 	bl	8001ae0 <delay_us>

	//Q1
	bitValue = bitRead(data, 6);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	099b      	lsrs	r3, r3, #6
 800108c:	b2db      	uxtb	r3, r3
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <write_serial_in_parallel_out_register_minus_yellow+0x20e>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d005      	beq.n	80010ac <write_serial_in_parallel_out_register_minus_yellow+0x218>
 80010a0:	e009      	b.n	80010b6 <write_serial_in_parallel_out_register_minus_yellow+0x222>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 80010a2:	4923      	ldr	r1, [pc, #140]	; (8001130 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 80010a4:	4823      	ldr	r0, [pc, #140]	; (8001134 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 80010a6:	f7ff fae9 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 80010aa:	e004      	b.n	80010b6 <write_serial_in_parallel_out_register_minus_yellow+0x222>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 80010ac:	4920      	ldr	r1, [pc, #128]	; (8001130 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 80010ae:	4821      	ldr	r0, [pc, #132]	; (8001134 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 80010b0:	f7ff fad5 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 80010b4:	bf00      	nop

	}

	//delay_us(1);

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 7
 80010b6:	f241 0110 	movw	r1, #4112	; 0x1010
 80010ba:	481c      	ldr	r0, [pc, #112]	; (800112c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 80010bc:	f7ff facf 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f000 fd0d 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 80010c6:	f241 0110 	movw	r1, #4112	; 0x1010
 80010ca:	4818      	ldr	r0, [pc, #96]	; (800112c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 80010cc:	f7ff fad6 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f000 fd05 	bl	8001ae0 <delay_us>

	//Q0
	bitValue = bitRead(data, 7);
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	09db      	lsrs	r3, r3, #7
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <write_serial_in_parallel_out_register_minus_yellow+0x25c>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d005      	beq.n	80010fa <write_serial_in_parallel_out_register_minus_yellow+0x266>
 80010ee:	e009      	b.n	8001104 <write_serial_in_parallel_out_register_minus_yellow+0x270>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=low
 80010f0:	490f      	ldr	r1, [pc, #60]	; (8001130 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 80010f2:	4810      	ldr	r0, [pc, #64]	; (8001134 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 80010f4:	f7ff fac2 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 80010f8:	e004      	b.n	8001104 <write_serial_in_parallel_out_register_minus_yellow+0x270>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_10); //data=high
 80010fa:	490d      	ldr	r1, [pc, #52]	; (8001130 <write_serial_in_parallel_out_register_minus_yellow+0x29c>)
 80010fc:	480d      	ldr	r0, [pc, #52]	; (8001134 <write_serial_in_parallel_out_register_minus_yellow+0x2a0>)
 80010fe:	f7ff faae 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 8001102:	bf00      	nop

	}

	//delay_us(1);

	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);  //clock pulse 8
 8001104:	f241 0110 	movw	r1, #4112	; 0x1010
 8001108:	4808      	ldr	r0, [pc, #32]	; (800112c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 800110a:	f7ff faa8 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f000 fce6 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001114:	f241 0110 	movw	r1, #4112	; 0x1010
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <write_serial_in_parallel_out_register_minus_yellow+0x298>)
 800111a:	f7ff faaf 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 800111e:	2001      	movs	r0, #1
 8001120:	f000 fcde 	bl	8001ae0 <delay_us>

}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40010c00 	.word	0x40010c00
 8001130:	04040004 	.word	0x04040004
 8001134:	40010800 	.word	0x40010800

08001138 <write_serial_in_parallel_out_register_minus_red>:

void write_serial_in_parallel_out_register_minus_red(unsigned char data){
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
	 *      data      1    1   0   0   0  0   0   1
	 *
	 *
	 */
	//all reset
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8001142:	f248 0180 	movw	r1, #32896	; 0x8080
 8001146:	48ae      	ldr	r0, [pc, #696]	; (8001400 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8001148:	f7ff fa98 	bl	800067c <LL_GPIO_ResetOutputPin>
	delay_us(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f000 fcc7 	bl	8001ae0 <delay_us>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8001152:	f248 0180 	movw	r1, #32896	; 0x8080
 8001156:	48aa      	ldr	r0, [pc, #680]	; (8001400 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8001158:	f7ff fa81 	bl	800065e <LL_GPIO_SetOutputPin>

	//Q7
	unsigned int bitValue = bitRead(data, 0);
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60fb      	str	r3, [r7, #12]

	switch(bitValue){
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <write_serial_in_parallel_out_register_minus_red+0x3a>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d005      	beq.n	800117c <write_serial_in_parallel_out_register_minus_red+0x44>
 8001170:	e009      	b.n	8001186 <write_serial_in_parallel_out_register_minus_red+0x4e>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 8001172:	49a4      	ldr	r1, [pc, #656]	; (8001404 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8001174:	48a2      	ldr	r0, [pc, #648]	; (8001400 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8001176:	f7ff fa81 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 800117a:	e004      	b.n	8001186 <write_serial_in_parallel_out_register_minus_red+0x4e>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 800117c:	49a1      	ldr	r1, [pc, #644]	; (8001404 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 800117e:	48a0      	ldr	r0, [pc, #640]	; (8001400 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8001180:	f7ff fa6d 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 8001184:	bf00      	nop

	}

	delay_us(1);
 8001186:	2001      	movs	r0, #1
 8001188:	f000 fcaa 	bl	8001ae0 <delay_us>

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 1
 800118c:	f248 0180 	movw	r1, #32896	; 0x8080
 8001190:	489d      	ldr	r0, [pc, #628]	; (8001408 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 8001192:	f7ff fa64 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 8001196:	2001      	movs	r0, #1
 8001198:	f000 fca2 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 800119c:	f248 0180 	movw	r1, #32896	; 0x8080
 80011a0:	4899      	ldr	r0, [pc, #612]	; (8001408 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 80011a2:	f7ff fa6b 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 fc9a 	bl	8001ae0 <delay_us>

	//Q6
	bitValue = bitRead(data, 1);
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	085b      	lsrs	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <write_serial_in_parallel_out_register_minus_red+0x8e>
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d005      	beq.n	80011d0 <write_serial_in_parallel_out_register_minus_red+0x98>
 80011c4:	e009      	b.n	80011da <write_serial_in_parallel_out_register_minus_red+0xa2>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 80011c6:	498f      	ldr	r1, [pc, #572]	; (8001404 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 80011c8:	488d      	ldr	r0, [pc, #564]	; (8001400 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 80011ca:	f7ff fa57 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 80011ce:	e004      	b.n	80011da <write_serial_in_parallel_out_register_minus_red+0xa2>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 80011d0:	498c      	ldr	r1, [pc, #560]	; (8001404 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 80011d2:	488b      	ldr	r0, [pc, #556]	; (8001400 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 80011d4:	f7ff fa43 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 80011d8:	bf00      	nop

	}

	delay_us(1);
 80011da:	2001      	movs	r0, #1
 80011dc:	f000 fc80 	bl	8001ae0 <delay_us>

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 2
 80011e0:	f248 0180 	movw	r1, #32896	; 0x8080
 80011e4:	4888      	ldr	r0, [pc, #544]	; (8001408 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 80011e6:	f7ff fa3a 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f000 fc78 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 80011f0:	f248 0180 	movw	r1, #32896	; 0x8080
 80011f4:	4884      	ldr	r0, [pc, #528]	; (8001408 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 80011f6:	f7ff fa41 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f000 fc70 	bl	8001ae0 <delay_us>

	//Q5
	bitValue = bitRead(data, 2);
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <write_serial_in_parallel_out_register_minus_red+0xe2>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d005      	beq.n	8001224 <write_serial_in_parallel_out_register_minus_red+0xec>
 8001218:	e009      	b.n	800122e <write_serial_in_parallel_out_register_minus_red+0xf6>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 800121a:	497a      	ldr	r1, [pc, #488]	; (8001404 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 800121c:	4878      	ldr	r0, [pc, #480]	; (8001400 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 800121e:	f7ff fa2d 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 8001222:	e004      	b.n	800122e <write_serial_in_parallel_out_register_minus_red+0xf6>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 8001224:	4977      	ldr	r1, [pc, #476]	; (8001404 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8001226:	4876      	ldr	r0, [pc, #472]	; (8001400 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8001228:	f7ff fa19 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 800122c:	bf00      	nop

	}

	delay_us(1);
 800122e:	2001      	movs	r0, #1
 8001230:	f000 fc56 	bl	8001ae0 <delay_us>

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 3
 8001234:	f248 0180 	movw	r1, #32896	; 0x8080
 8001238:	4873      	ldr	r0, [pc, #460]	; (8001408 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 800123a:	f7ff fa10 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 800123e:	2001      	movs	r0, #1
 8001240:	f000 fc4e 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 8001244:	f248 0180 	movw	r1, #32896	; 0x8080
 8001248:	486f      	ldr	r0, [pc, #444]	; (8001408 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 800124a:	f7ff fa17 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 800124e:	2001      	movs	r0, #1
 8001250:	f000 fc46 	bl	8001ae0 <delay_us>

	//Q4
	bitValue = bitRead(data, 3);
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	08db      	lsrs	r3, r3, #3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <write_serial_in_parallel_out_register_minus_red+0x136>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d005      	beq.n	8001278 <write_serial_in_parallel_out_register_minus_red+0x140>
 800126c:	e009      	b.n	8001282 <write_serial_in_parallel_out_register_minus_red+0x14a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 800126e:	4965      	ldr	r1, [pc, #404]	; (8001404 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8001270:	4863      	ldr	r0, [pc, #396]	; (8001400 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8001272:	f7ff fa03 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 8001276:	e004      	b.n	8001282 <write_serial_in_parallel_out_register_minus_red+0x14a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 8001278:	4962      	ldr	r1, [pc, #392]	; (8001404 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 800127a:	4861      	ldr	r0, [pc, #388]	; (8001400 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 800127c:	f7ff f9ef 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 8001280:	bf00      	nop

	}

	delay_us(1);
 8001282:	2001      	movs	r0, #1
 8001284:	f000 fc2c 	bl	8001ae0 <delay_us>
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);   //clock pulse 4
 8001288:	f248 0180 	movw	r1, #32896	; 0x8080
 800128c:	485e      	ldr	r0, [pc, #376]	; (8001408 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 800128e:	f7ff f9e6 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 8001292:	2001      	movs	r0, #1
 8001294:	f000 fc24 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 8001298:	f248 0180 	movw	r1, #32896	; 0x8080
 800129c:	485a      	ldr	r0, [pc, #360]	; (8001408 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 800129e:	f7ff f9ed 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 80012a2:	2001      	movs	r0, #1
 80012a4:	f000 fc1c 	bl	8001ae0 <delay_us>

	//Q3
	bitValue = bitRead(data, 4);
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	091b      	lsrs	r3, r3, #4
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <write_serial_in_parallel_out_register_minus_red+0x18a>
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d005      	beq.n	80012cc <write_serial_in_parallel_out_register_minus_red+0x194>
 80012c0:	e009      	b.n	80012d6 <write_serial_in_parallel_out_register_minus_red+0x19e>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 80012c2:	4950      	ldr	r1, [pc, #320]	; (8001404 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 80012c4:	484e      	ldr	r0, [pc, #312]	; (8001400 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 80012c6:	f7ff f9d9 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 80012ca:	e004      	b.n	80012d6 <write_serial_in_parallel_out_register_minus_red+0x19e>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 80012cc:	494d      	ldr	r1, [pc, #308]	; (8001404 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 80012ce:	484c      	ldr	r0, [pc, #304]	; (8001400 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 80012d0:	f7ff f9c5 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 80012d4:	bf00      	nop

	}

	delay_us(1);
 80012d6:	2001      	movs	r0, #1
 80012d8:	f000 fc02 	bl	8001ae0 <delay_us>

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 5
 80012dc:	f248 0180 	movw	r1, #32896	; 0x8080
 80012e0:	4849      	ldr	r0, [pc, #292]	; (8001408 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 80012e2:	f7ff f9bc 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 80012e6:	2001      	movs	r0, #1
 80012e8:	f000 fbfa 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 80012ec:	f248 0180 	movw	r1, #32896	; 0x8080
 80012f0:	4845      	ldr	r0, [pc, #276]	; (8001408 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 80012f2:	f7ff f9c3 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 80012f6:	2001      	movs	r0, #1
 80012f8:	f000 fbf2 	bl	8001ae0 <delay_us>

	//Q2
	bitValue = bitRead(data, 5);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	095b      	lsrs	r3, r3, #5
 8001300:	b2db      	uxtb	r3, r3
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <write_serial_in_parallel_out_register_minus_red+0x1de>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d005      	beq.n	8001320 <write_serial_in_parallel_out_register_minus_red+0x1e8>
 8001314:	e009      	b.n	800132a <write_serial_in_parallel_out_register_minus_red+0x1f2>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 8001316:	493b      	ldr	r1, [pc, #236]	; (8001404 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8001318:	4839      	ldr	r0, [pc, #228]	; (8001400 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 800131a:	f7ff f9af 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 800131e:	e004      	b.n	800132a <write_serial_in_parallel_out_register_minus_red+0x1f2>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 8001320:	4938      	ldr	r1, [pc, #224]	; (8001404 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8001322:	4837      	ldr	r0, [pc, #220]	; (8001400 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8001324:	f7ff f99b 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 8001328:	bf00      	nop

	}

	delay_us(1);
 800132a:	2001      	movs	r0, #1
 800132c:	f000 fbd8 	bl	8001ae0 <delay_us>
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 6
 8001330:	f248 0180 	movw	r1, #32896	; 0x8080
 8001334:	4834      	ldr	r0, [pc, #208]	; (8001408 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 8001336:	f7ff f992 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 800133a:	2001      	movs	r0, #1
 800133c:	f000 fbd0 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 8001340:	f248 0180 	movw	r1, #32896	; 0x8080
 8001344:	4830      	ldr	r0, [pc, #192]	; (8001408 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 8001346:	f7ff f999 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 800134a:	2001      	movs	r0, #1
 800134c:	f000 fbc8 	bl	8001ae0 <delay_us>

	//Q1
	bitValue = bitRead(data, 6);
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	099b      	lsrs	r3, r3, #6
 8001354:	b2db      	uxtb	r3, r3
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <write_serial_in_parallel_out_register_minus_red+0x232>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d005      	beq.n	8001374 <write_serial_in_parallel_out_register_minus_red+0x23c>
 8001368:	e009      	b.n	800137e <write_serial_in_parallel_out_register_minus_red+0x246>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 800136a:	4926      	ldr	r1, [pc, #152]	; (8001404 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 800136c:	4824      	ldr	r0, [pc, #144]	; (8001400 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 800136e:	f7ff f985 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 8001372:	e004      	b.n	800137e <write_serial_in_parallel_out_register_minus_red+0x246>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 8001374:	4923      	ldr	r1, [pc, #140]	; (8001404 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 8001376:	4822      	ldr	r0, [pc, #136]	; (8001400 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 8001378:	f7ff f971 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 800137c:	bf00      	nop

	}

	delay_us(1);
 800137e:	2001      	movs	r0, #1
 8001380:	f000 fbae 	bl	8001ae0 <delay_us>

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 7
 8001384:	f248 0180 	movw	r1, #32896	; 0x8080
 8001388:	481f      	ldr	r0, [pc, #124]	; (8001408 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 800138a:	f7ff f968 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 800138e:	2001      	movs	r0, #1
 8001390:	f000 fba6 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 8001394:	f248 0180 	movw	r1, #32896	; 0x8080
 8001398:	481b      	ldr	r0, [pc, #108]	; (8001408 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 800139a:	f7ff f96f 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 800139e:	2001      	movs	r0, #1
 80013a0:	f000 fb9e 	bl	8001ae0 <delay_us>

	//Q0
	bitValue = bitRead(data, 7);
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	09db      	lsrs	r3, r3, #7
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
	switch(bitValue){
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <write_serial_in_parallel_out_register_minus_red+0x286>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d005      	beq.n	80013c8 <write_serial_in_parallel_out_register_minus_red+0x290>
 80013bc:	e009      	b.n	80013d2 <write_serial_in_parallel_out_register_minus_red+0x29a>
		case 0 :
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=low
 80013be:	4911      	ldr	r1, [pc, #68]	; (8001404 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 80013c0:	480f      	ldr	r0, [pc, #60]	; (8001400 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 80013c2:	f7ff f95b 	bl	800067c <LL_GPIO_ResetOutputPin>
			break;
 80013c6:	e004      	b.n	80013d2 <write_serial_in_parallel_out_register_minus_red+0x29a>

		case 1 :
			LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9); //data=high
 80013c8:	490e      	ldr	r1, [pc, #56]	; (8001404 <write_serial_in_parallel_out_register_minus_red+0x2cc>)
 80013ca:	480d      	ldr	r0, [pc, #52]	; (8001400 <write_serial_in_parallel_out_register_minus_red+0x2c8>)
 80013cc:	f7ff f947 	bl	800065e <LL_GPIO_SetOutputPin>
			break;
 80013d0:	bf00      	nop

	}

	delay_us(1);
 80013d2:	2001      	movs	r0, #1
 80013d4:	f000 fb84 	bl	8001ae0 <delay_us>

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_7);  //clock pulse 8
 80013d8:	f248 0180 	movw	r1, #32896	; 0x8080
 80013dc:	480a      	ldr	r0, [pc, #40]	; (8001408 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 80013de:	f7ff f93e 	bl	800065e <LL_GPIO_SetOutputPin>

	delay_us(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f000 fb7c 	bl	8001ae0 <delay_us>
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 80013e8:	f248 0180 	movw	r1, #32896	; 0x8080
 80013ec:	4806      	ldr	r0, [pc, #24]	; (8001408 <write_serial_in_parallel_out_register_minus_red+0x2d0>)
 80013ee:	f7ff f945 	bl	800067c <LL_GPIO_ResetOutputPin>

	delay_us(1);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f000 fb74 	bl	8001ae0 <delay_us>

}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40010800 	.word	0x40010800
 8001404:	04020002 	.word	0x04020002
 8001408:	40011000 	.word	0x40011000

0800140c <rowToBinary>:

unsigned char rowToBinary(unsigned char (*ptr)[8], int row) {
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
	unsigned char binaryValue = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	73fb      	strb	r3, [r7, #15]
	for (int col = 0; col < COLS; col++) {
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	e015      	b.n	800144c <rowToBinary+0x40>
		binaryValue |= (ptr[row][col] << (COLS - 1 - col));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	441a      	add	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4413      	add	r3, r2
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	f1c3 0307 	rsb	r3, r3, #7
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	b25a      	sxtb	r2, r3
 800143c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001440:	4313      	orrs	r3, r2
 8001442:	b25b      	sxtb	r3, r3
 8001444:	73fb      	strb	r3, [r7, #15]
	for (int col = 0; col < COLS; col++) {
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	3301      	adds	r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b07      	cmp	r3, #7
 8001450:	dde6      	ble.n	8001420 <rowToBinary+0x14>
	}
	binaryValue = ~binaryValue;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	43db      	mvns	r3, r3
 8001456:	73fb      	strb	r3, [r7, #15]

	return binaryValue;
 8001458:	7bfb      	ldrb	r3, [r7, #15]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <findCommonOnes>:

void findCommonOnes(unsigned char(*board1)[COLS], unsigned char(*board2)[COLS], int rows, int cols) {
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
	//int orangeNowRow, orangeNowCol;
    // Iterating through the arrays to find the common positions with 1.
    for (int i = 0; i < rows; i++) {
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	e326      	b.n	8001ac6 <findCommonOnes+0x662>
        for (int j = 0; j < cols; j++) {
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	e31b      	b.n	8001ab6 <findCommonOnes+0x652>
            if (board1[i][j] == 1 && board2[i][j] == 1) {
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	441a      	add	r2, r3
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4413      	add	r3, r2
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b01      	cmp	r3, #1
 800148e:	f040 830f 	bne.w	8001ab0 <findCommonOnes+0x64c>
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	441a      	add	r2, r3
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4413      	add	r3, r2
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	f040 8305 	bne.w	8001ab0 <findCommonOnes+0x64c>
            	//orangeNowRow = i;
            	//orangeNowCol = j;
            	//Task1//
				if(next_yellow_yes == 1 || next_red_yes == 1){
 80014a6:	4b9f      	ldr	r3, [pc, #636]	; (8001724 <findCommonOnes+0x2c0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d004      	beq.n	80014b8 <findCommonOnes+0x54>
 80014ae:	4b9e      	ldr	r3, [pc, #632]	; (8001728 <findCommonOnes+0x2c4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	f040 818c 	bne.w	80017d0 <findCommonOnes+0x36c>
					if(next_red_yes==1){
 80014b8:	4b9b      	ldr	r3, [pc, #620]	; (8001728 <findCommonOnes+0x2c4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d110      	bne.n	80014e2 <findCommonOnes+0x7e>
						board1[i][j]=0;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	441a      	add	r2, r3
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4413      	add	r3, r2
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
						board2[i][j]=1;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	441a      	add	r2, r3
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4413      	add	r3, r2
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e013      	b.n	800150a <findCommonOnes+0xa6>
					}
					else{
						if(next_yellow_yes==1){
 80014e2:	4b90      	ldr	r3, [pc, #576]	; (8001724 <findCommonOnes+0x2c0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d10f      	bne.n	800150a <findCommonOnes+0xa6>
							board1[i][j]=1;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	441a      	add	r2, r3
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4413      	add	r3, r2
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
							board2[i][j]=0;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	441a      	add	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4413      	add	r3, r2
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
						}
				//Task1 end//
					}
					//Task2//
					//if next point is yellow or red?//
					if(j==7){
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	2b07      	cmp	r3, #7
 800150e:	d174      	bne.n	80015fa <findCommonOnes+0x196>
						//if next point is yellow?//
						if( board1[(i+1)%8][(j+1)%8] == 1 && board2[(i+1)%8][(j+1)%8] == 0 ){
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3301      	adds	r3, #1
 8001514:	425a      	negs	r2, r3
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	f002 0207 	and.w	r2, r2, #7
 800151e:	bf58      	it	pl
 8001520:	4253      	negpl	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	441a      	add	r2, r3
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	3301      	adds	r3, #1
 800152c:	4259      	negs	r1, r3
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	f001 0107 	and.w	r1, r1, #7
 8001536:	bf58      	it	pl
 8001538:	424b      	negpl	r3, r1
 800153a:	5cd3      	ldrb	r3, [r2, r3]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d11e      	bne.n	800157e <findCommonOnes+0x11a>
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3301      	adds	r3, #1
 8001544:	425a      	negs	r2, r3
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	f002 0207 	and.w	r2, r2, #7
 800154e:	bf58      	it	pl
 8001550:	4253      	negpl	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	441a      	add	r2, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	3301      	adds	r3, #1
 800155c:	4259      	negs	r1, r3
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	f001 0107 	and.w	r1, r1, #7
 8001566:	bf58      	it	pl
 8001568:	424b      	negpl	r3, r1
 800156a:	5cd3      	ldrb	r3, [r2, r3]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d106      	bne.n	800157e <findCommonOnes+0x11a>
							next_yellow_yes=1;
 8001570:	4b6c      	ldr	r3, [pc, #432]	; (8001724 <findCommonOnes+0x2c0>)
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]
							next_red_yes=0;
 8001576:	4b6c      	ldr	r3, [pc, #432]	; (8001728 <findCommonOnes+0x2c4>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	e0d7      	b.n	800172e <findCommonOnes+0x2ca>
						}
						else{
							//if next point is red?//
							if( board1[(i+1)%8][(j+1)%8] == 0 && board2[(i+1)%8][(j+1)%8] == 1 ){
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	425a      	negs	r2, r3
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	f002 0207 	and.w	r2, r2, #7
 800158c:	bf58      	it	pl
 800158e:	4253      	negpl	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	441a      	add	r2, r3
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	3301      	adds	r3, #1
 800159a:	4259      	negs	r1, r3
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	f001 0107 	and.w	r1, r1, #7
 80015a4:	bf58      	it	pl
 80015a6:	424b      	negpl	r3, r1
 80015a8:	5cd3      	ldrb	r3, [r2, r3]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d11e      	bne.n	80015ec <findCommonOnes+0x188>
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3301      	adds	r3, #1
 80015b2:	425a      	negs	r2, r3
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	f002 0207 	and.w	r2, r2, #7
 80015bc:	bf58      	it	pl
 80015be:	4253      	negpl	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	441a      	add	r2, r3
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	3301      	adds	r3, #1
 80015ca:	4259      	negs	r1, r3
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	f001 0107 	and.w	r1, r1, #7
 80015d4:	bf58      	it	pl
 80015d6:	424b      	negpl	r3, r1
 80015d8:	5cd3      	ldrb	r3, [r2, r3]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d106      	bne.n	80015ec <findCommonOnes+0x188>
								next_yellow_yes=0;
 80015de:	4b51      	ldr	r3, [pc, #324]	; (8001724 <findCommonOnes+0x2c0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
								next_red_yes=1;
 80015e4:	4b50      	ldr	r3, [pc, #320]	; (8001728 <findCommonOnes+0x2c4>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	e0a0      	b.n	800172e <findCommonOnes+0x2ca>
							}
							//nothing//
							else{
								next_yellow_yes=0;
 80015ec:	4b4d      	ldr	r3, [pc, #308]	; (8001724 <findCommonOnes+0x2c0>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
								next_red_yes=0;
 80015f2:	4b4d      	ldr	r3, [pc, #308]	; (8001728 <findCommonOnes+0x2c4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	e099      	b.n	800172e <findCommonOnes+0x2ca>
							}
						}
					}
					else{
						if( (board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0) || (board1[i][(j+1)%8] == 0 && board2[i][(j+1)%8] == 1)){
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	441a      	add	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	3301      	adds	r3, #1
 8001606:	4259      	negs	r1, r3
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	f001 0107 	and.w	r1, r1, #7
 8001610:	bf58      	it	pl
 8001612:	424b      	negpl	r3, r1
 8001614:	5cd3      	ldrb	r3, [r2, r3]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d10f      	bne.n	800163a <findCommonOnes+0x1d6>
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	441a      	add	r2, r3
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	3301      	adds	r3, #1
 8001626:	4259      	negs	r1, r3
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	f001 0107 	and.w	r1, r1, #7
 8001630:	bf58      	it	pl
 8001632:	424b      	negpl	r3, r1
 8001634:	5cd3      	ldrb	r3, [r2, r3]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d01f      	beq.n	800167a <findCommonOnes+0x216>
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	441a      	add	r2, r3
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	3301      	adds	r3, #1
 8001646:	4259      	negs	r1, r3
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	f001 0107 	and.w	r1, r1, #7
 8001650:	bf58      	it	pl
 8001652:	424b      	negpl	r3, r1
 8001654:	5cd3      	ldrb	r3, [r2, r3]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d15d      	bne.n	8001716 <findCommonOnes+0x2b2>
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	441a      	add	r2, r3
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	3301      	adds	r3, #1
 8001666:	4259      	negs	r1, r3
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	f001 0107 	and.w	r1, r1, #7
 8001670:	bf58      	it	pl
 8001672:	424b      	negpl	r3, r1
 8001674:	5cd3      	ldrb	r3, [r2, r3]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d14d      	bne.n	8001716 <findCommonOnes+0x2b2>
							//if next point is yellow?//
							if( board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0 ){
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	441a      	add	r2, r3
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	3301      	adds	r3, #1
 8001686:	4259      	negs	r1, r3
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	f001 0107 	and.w	r1, r1, #7
 8001690:	bf58      	it	pl
 8001692:	424b      	negpl	r3, r1
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d116      	bne.n	80016c8 <findCommonOnes+0x264>
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	441a      	add	r2, r3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	3301      	adds	r3, #1
 80016a6:	4259      	negs	r1, r3
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	f001 0107 	and.w	r1, r1, #7
 80016b0:	bf58      	it	pl
 80016b2:	424b      	negpl	r3, r1
 80016b4:	5cd3      	ldrb	r3, [r2, r3]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d106      	bne.n	80016c8 <findCommonOnes+0x264>
								next_yellow_yes=1;
 80016ba:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <findCommonOnes+0x2c0>)
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]
								next_red_yes=0;
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <findCommonOnes+0x2c4>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
							if( board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0 ){
 80016c6:	e031      	b.n	800172c <findCommonOnes+0x2c8>
							}
							else{
								//if next point is red?//
								if( board1[i][(j+1)%8] == 0 && board2[i][(j+1)%8] == 1 ){
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	441a      	add	r2, r3
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	3301      	adds	r3, #1
 80016d4:	4259      	negs	r1, r3
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	f001 0107 	and.w	r1, r1, #7
 80016de:	bf58      	it	pl
 80016e0:	424b      	negpl	r3, r1
 80016e2:	5cd3      	ldrb	r3, [r2, r3]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d121      	bne.n	800172c <findCommonOnes+0x2c8>
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	441a      	add	r2, r3
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	3301      	adds	r3, #1
 80016f4:	4259      	negs	r1, r3
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	f001 0107 	and.w	r1, r1, #7
 80016fe:	bf58      	it	pl
 8001700:	424b      	negpl	r3, r1
 8001702:	5cd3      	ldrb	r3, [r2, r3]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d111      	bne.n	800172c <findCommonOnes+0x2c8>
									next_yellow_yes=0;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <findCommonOnes+0x2c0>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
									next_red_yes=1;
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <findCommonOnes+0x2c4>)
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]
							if( board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0 ){
 8001714:	e00a      	b.n	800172c <findCommonOnes+0x2c8>


						}
						//nothing//
						else{
							next_yellow_yes=0;
 8001716:	4b03      	ldr	r3, [pc, #12]	; (8001724 <findCommonOnes+0x2c0>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
							next_red_yes=0;
 800171c:	4b02      	ldr	r3, [pc, #8]	; (8001728 <findCommonOnes+0x2c4>)
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e004      	b.n	800172e <findCommonOnes+0x2ca>
 8001724:	200000a0 	.word	0x200000a0
 8001728:	200000a4 	.word	0x200000a4
							if( board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0 ){
 800172c:	bf00      	nop
					}

					//Task2 end//
					//Task3//
					//apply orange color//
					if(j==7){
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	2b07      	cmp	r3, #7
 8001732:	d12e      	bne.n	8001792 <findCommonOnes+0x32e>
						board1[(i+1)%8][(j+1)%8]=1;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3301      	adds	r3, #1
 8001738:	425a      	negs	r2, r3
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	f002 0207 	and.w	r2, r2, #7
 8001742:	bf58      	it	pl
 8001744:	4253      	negpl	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	441a      	add	r2, r3
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	3301      	adds	r3, #1
 8001750:	4259      	negs	r1, r3
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	f001 0107 	and.w	r1, r1, #7
 800175a:	bf58      	it	pl
 800175c:	424b      	negpl	r3, r1
 800175e:	2101      	movs	r1, #1
 8001760:	54d1      	strb	r1, [r2, r3]
						board2[(i+1)%8][(j+1)%8]=1;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	425a      	negs	r2, r3
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	f002 0207 	and.w	r2, r2, #7
 8001770:	bf58      	it	pl
 8001772:	4253      	negpl	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	441a      	add	r2, r3
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	3301      	adds	r3, #1
 800177e:	4259      	negs	r1, r3
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	f001 0107 	and.w	r1, r1, #7
 8001788:	bf58      	it	pl
 800178a:	424b      	negpl	r3, r1
 800178c:	2101      	movs	r1, #1
 800178e:	54d1      	strb	r1, [r2, r3]
					if(j==7){
 8001790:	e18d      	b.n	8001aae <findCommonOnes+0x64a>
					}
					else{
						board1[i][(j+1)%8]=1;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	441a      	add	r2, r3
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	3301      	adds	r3, #1
 800179e:	4259      	negs	r1, r3
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	f001 0107 	and.w	r1, r1, #7
 80017a8:	bf58      	it	pl
 80017aa:	424b      	negpl	r3, r1
 80017ac:	2101      	movs	r1, #1
 80017ae:	54d1      	strb	r1, [r2, r3]
						board2[i][(j+1)%8]=1;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	441a      	add	r2, r3
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4259      	negs	r1, r3
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	f001 0107 	and.w	r1, r1, #7
 80017c6:	bf58      	it	pl
 80017c8:	424b      	negpl	r3, r1
 80017ca:	2101      	movs	r1, #1
 80017cc:	54d1      	strb	r1, [r2, r3]
					if(j==7){
 80017ce:	e16e      	b.n	8001aae <findCommonOnes+0x64a>
					}
					//Task3 end//
				}
				else{
					//task1//
					board1[i][j]=0;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	441a      	add	r2, r3
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4413      	add	r3, r2
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
					board2[i][j]=0;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	441a      	add	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4413      	add	r3, r2
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
					//Task1 end//
					//Task2//
					//if next point is yellow or red?//
					//if next point is yellow or red?//
					if(j==7){
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	2b07      	cmp	r3, #7
 80017f4:	d174      	bne.n	80018e0 <findCommonOnes+0x47c>
						//if next point is yellow?//
						if( board1[(i+1)%8][(j+1)%8] == 1 && board2[(i+1)%8][(j+1)%8] == 0 ){
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	425a      	negs	r2, r3
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	f002 0207 	and.w	r2, r2, #7
 8001804:	bf58      	it	pl
 8001806:	4253      	negpl	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	441a      	add	r2, r3
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	3301      	adds	r3, #1
 8001812:	4259      	negs	r1, r3
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	f001 0107 	and.w	r1, r1, #7
 800181c:	bf58      	it	pl
 800181e:	424b      	negpl	r3, r1
 8001820:	5cd3      	ldrb	r3, [r2, r3]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d11e      	bne.n	8001864 <findCommonOnes+0x400>
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3301      	adds	r3, #1
 800182a:	425a      	negs	r2, r3
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	f002 0207 	and.w	r2, r2, #7
 8001834:	bf58      	it	pl
 8001836:	4253      	negpl	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	441a      	add	r2, r3
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	3301      	adds	r3, #1
 8001842:	4259      	negs	r1, r3
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	f001 0107 	and.w	r1, r1, #7
 800184c:	bf58      	it	pl
 800184e:	424b      	negpl	r3, r1
 8001850:	5cd3      	ldrb	r3, [r2, r3]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d106      	bne.n	8001864 <findCommonOnes+0x400>
							next_yellow_yes=1;
 8001856:	4ba0      	ldr	r3, [pc, #640]	; (8001ad8 <findCommonOnes+0x674>)
 8001858:	2201      	movs	r2, #1
 800185a:	601a      	str	r2, [r3, #0]
							next_red_yes=0;
 800185c:	4b9f      	ldr	r3, [pc, #636]	; (8001adc <findCommonOnes+0x678>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	e0d3      	b.n	8001a0c <findCommonOnes+0x5a8>
						}
						else{
							//if next point is red?//
							if( board1[(i+1)%8][(j+1)%8] == 0 && board2[(i+1)%8][(j+1)%8] == 1 ){
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	425a      	negs	r2, r3
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	f002 0207 	and.w	r2, r2, #7
 8001872:	bf58      	it	pl
 8001874:	4253      	negpl	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	441a      	add	r2, r3
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	3301      	adds	r3, #1
 8001880:	4259      	negs	r1, r3
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	f001 0107 	and.w	r1, r1, #7
 800188a:	bf58      	it	pl
 800188c:	424b      	negpl	r3, r1
 800188e:	5cd3      	ldrb	r3, [r2, r3]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d11e      	bne.n	80018d2 <findCommonOnes+0x46e>
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3301      	adds	r3, #1
 8001898:	425a      	negs	r2, r3
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	f002 0207 	and.w	r2, r2, #7
 80018a2:	bf58      	it	pl
 80018a4:	4253      	negpl	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	441a      	add	r2, r3
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	3301      	adds	r3, #1
 80018b0:	4259      	negs	r1, r3
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	f001 0107 	and.w	r1, r1, #7
 80018ba:	bf58      	it	pl
 80018bc:	424b      	negpl	r3, r1
 80018be:	5cd3      	ldrb	r3, [r2, r3]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d106      	bne.n	80018d2 <findCommonOnes+0x46e>
								next_yellow_yes=0;
 80018c4:	4b84      	ldr	r3, [pc, #528]	; (8001ad8 <findCommonOnes+0x674>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
								next_red_yes=1;
 80018ca:	4b84      	ldr	r3, [pc, #528]	; (8001adc <findCommonOnes+0x678>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	e09c      	b.n	8001a0c <findCommonOnes+0x5a8>
							}
							//nothing//
							else{
								next_yellow_yes=0;
 80018d2:	4b81      	ldr	r3, [pc, #516]	; (8001ad8 <findCommonOnes+0x674>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
								next_red_yes=0;
 80018d8:	4b80      	ldr	r3, [pc, #512]	; (8001adc <findCommonOnes+0x678>)
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	e095      	b.n	8001a0c <findCommonOnes+0x5a8>
							}
						}
					}
					else{
						if( (board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0) || (board1[i][(j+1)%8] == 0 && board2[i][(j+1)%8] == 1)){
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	441a      	add	r2, r3
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	3301      	adds	r3, #1
 80018ec:	4259      	negs	r1, r3
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	f001 0107 	and.w	r1, r1, #7
 80018f6:	bf58      	it	pl
 80018f8:	424b      	negpl	r3, r1
 80018fa:	5cd3      	ldrb	r3, [r2, r3]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d10f      	bne.n	8001920 <findCommonOnes+0x4bc>
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	441a      	add	r2, r3
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	3301      	adds	r3, #1
 800190c:	4259      	negs	r1, r3
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	f001 0107 	and.w	r1, r1, #7
 8001916:	bf58      	it	pl
 8001918:	424b      	negpl	r3, r1
 800191a:	5cd3      	ldrb	r3, [r2, r3]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d01f      	beq.n	8001960 <findCommonOnes+0x4fc>
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	441a      	add	r2, r3
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	3301      	adds	r3, #1
 800192c:	4259      	negs	r1, r3
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	f001 0107 	and.w	r1, r1, #7
 8001936:	bf58      	it	pl
 8001938:	424b      	negpl	r3, r1
 800193a:	5cd3      	ldrb	r3, [r2, r3]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d15d      	bne.n	80019fc <findCommonOnes+0x598>
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	441a      	add	r2, r3
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	3301      	adds	r3, #1
 800194c:	4259      	negs	r1, r3
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	f001 0107 	and.w	r1, r1, #7
 8001956:	bf58      	it	pl
 8001958:	424b      	negpl	r3, r1
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d14d      	bne.n	80019fc <findCommonOnes+0x598>
							//if next point is yellow?//
							if( board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0 ){
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	441a      	add	r2, r3
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	3301      	adds	r3, #1
 800196c:	4259      	negs	r1, r3
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	f001 0107 	and.w	r1, r1, #7
 8001976:	bf58      	it	pl
 8001978:	424b      	negpl	r3, r1
 800197a:	5cd3      	ldrb	r3, [r2, r3]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d116      	bne.n	80019ae <findCommonOnes+0x54a>
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	441a      	add	r2, r3
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	3301      	adds	r3, #1
 800198c:	4259      	negs	r1, r3
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	f001 0107 	and.w	r1, r1, #7
 8001996:	bf58      	it	pl
 8001998:	424b      	negpl	r3, r1
 800199a:	5cd3      	ldrb	r3, [r2, r3]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d106      	bne.n	80019ae <findCommonOnes+0x54a>
								next_yellow_yes=1;
 80019a0:	4b4d      	ldr	r3, [pc, #308]	; (8001ad8 <findCommonOnes+0x674>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
								next_red_yes=0;
 80019a6:	4b4d      	ldr	r3, [pc, #308]	; (8001adc <findCommonOnes+0x678>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
							if( board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0 ){
 80019ac:	e02d      	b.n	8001a0a <findCommonOnes+0x5a6>
							}
							else{
								//if next point is red?//
								if( board1[i][(j+1)%8] == 0 && board2[i][(j+1)%8] == 1 ){
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	441a      	add	r2, r3
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	3301      	adds	r3, #1
 80019ba:	4259      	negs	r1, r3
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	f001 0107 	and.w	r1, r1, #7
 80019c4:	bf58      	it	pl
 80019c6:	424b      	negpl	r3, r1
 80019c8:	5cd3      	ldrb	r3, [r2, r3]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d11d      	bne.n	8001a0a <findCommonOnes+0x5a6>
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	441a      	add	r2, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	3301      	adds	r3, #1
 80019da:	4259      	negs	r1, r3
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	f001 0107 	and.w	r1, r1, #7
 80019e4:	bf58      	it	pl
 80019e6:	424b      	negpl	r3, r1
 80019e8:	5cd3      	ldrb	r3, [r2, r3]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d10d      	bne.n	8001a0a <findCommonOnes+0x5a6>
									next_yellow_yes=0;
 80019ee:	4b3a      	ldr	r3, [pc, #232]	; (8001ad8 <findCommonOnes+0x674>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
									next_red_yes=1;
 80019f4:	4b39      	ldr	r3, [pc, #228]	; (8001adc <findCommonOnes+0x678>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]
							if( board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0 ){
 80019fa:	e006      	b.n	8001a0a <findCommonOnes+0x5a6>


						}
						//nothing//
						else{
							next_yellow_yes=0;
 80019fc:	4b36      	ldr	r3, [pc, #216]	; (8001ad8 <findCommonOnes+0x674>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
							next_red_yes=0;
 8001a02:	4b36      	ldr	r3, [pc, #216]	; (8001adc <findCommonOnes+0x678>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	e000      	b.n	8001a0c <findCommonOnes+0x5a8>
							if( board1[i][(j+1)%8] == 1 && board2[i][(j+1)%8] == 0 ){
 8001a0a:	bf00      	nop
						}
					}
					//Task2 end//
					//Task3//
					//apply orange color//
					if(j==7){
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	2b07      	cmp	r3, #7
 8001a10:	d12e      	bne.n	8001a70 <findCommonOnes+0x60c>
						board1[(i+1)%8][(j+1)%8]=1;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	425a      	negs	r2, r3
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	f002 0207 	and.w	r2, r2, #7
 8001a20:	bf58      	it	pl
 8001a22:	4253      	negpl	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	441a      	add	r2, r3
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	4259      	negs	r1, r3
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	f001 0107 	and.w	r1, r1, #7
 8001a38:	bf58      	it	pl
 8001a3a:	424b      	negpl	r3, r1
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	54d1      	strb	r1, [r2, r3]
						board2[(i+1)%8][(j+1)%8]=1;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3301      	adds	r3, #1
 8001a44:	425a      	negs	r2, r3
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	f002 0207 	and.w	r2, r2, #7
 8001a4e:	bf58      	it	pl
 8001a50:	4253      	negpl	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	441a      	add	r2, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	4259      	negs	r1, r3
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	f001 0107 	and.w	r1, r1, #7
 8001a66:	bf58      	it	pl
 8001a68:	424b      	negpl	r3, r1
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	54d1      	strb	r1, [r2, r3]
						board2[i][(j+1)%8]=1;
					}
					//Task3 end//
				}

				return;
 8001a6e:	e02f      	b.n	8001ad0 <findCommonOnes+0x66c>
						board1[i][(j+1)%8]=1;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	441a      	add	r2, r3
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	4259      	negs	r1, r3
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	f001 0107 	and.w	r1, r1, #7
 8001a86:	bf58      	it	pl
 8001a88:	424b      	negpl	r3, r1
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	54d1      	strb	r1, [r2, r3]
						board2[i][(j+1)%8]=1;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	441a      	add	r2, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	4259      	negs	r1, r3
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	f001 0107 	and.w	r1, r1, #7
 8001aa4:	bf58      	it	pl
 8001aa6:	424b      	negpl	r3, r1
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	54d1      	strb	r1, [r2, r3]
				return;
 8001aac:	e010      	b.n	8001ad0 <findCommonOnes+0x66c>
 8001aae:	e00f      	b.n	8001ad0 <findCommonOnes+0x66c>
        for (int j = 0; j < cols; j++) {
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	f6ff acdf 	blt.w	800147e <findCommonOnes+0x1a>
    for (int i = 0; i < rows; i++) {
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	f6ff acd4 	blt.w	8001478 <findCommonOnes+0x14>
            }
        }
    }

}
 8001ad0:	371c      	adds	r7, #28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	200000a0 	.word	0x200000a0
 8001adc:	200000a4 	.word	0x200000a4

08001ae0 <delay_us>:




static void inline delay_us(unsigned int delay){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	 * USAGE : please use delay variable that is ccr register.
	 */
	//char buffer_delay_us[20];  //make buffer


	TIM2->CNT = 0; //clear
 8001ae8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aec:	2200      	movs	r2, #0
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24

	LL_TIM_EnableCounter(TIM2); //CR1 register CEN bit (ENABLE)
 8001af0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001af4:	f7fe fcec 	bl	80004d0 <LL_TIM_EnableCounter>

	while(TIM2->CNT < delay){
 8001af8:	bf00      	nop
 8001afa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d8f9      	bhi.n	8001afa <delay_us+0x1a>
//		UART2_TX_string(buffer_delay_us);
//		UART2_TX_string("\r\n");

	}

	LL_TIM_DisableCounter(TIM2);   //disable.
 8001b06:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b0a:	f7fe fcf0 	bl	80004ee <LL_TIM_DisableCounter>

}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001b20:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001b22:	695a      	ldr	r2, [r3, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4013      	ands	r3, r2
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	bf0c      	ite	eq
 8001b2e:	2301      	moveq	r3, #1
 8001b30:	2300      	movne	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40010400 	.word	0x40010400

08001b44 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001b4c:	4a03      	ldr	r2, [pc, #12]	; (8001b5c <LL_EXTI_ClearFlag_0_31+0x18>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6153      	str	r3, [r2, #20]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	40010400 	.word	0x40010400

08001b60 <LL_TIM_EnableCounter>:
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f043 0201 	orr.w	r2, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	601a      	str	r2, [r3, #0]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <LL_TIM_DisableCounter>:
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 0201 	bic.w	r2, r3, #1
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	601a      	str	r2, [r3, #0]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <LL_TIM_ClearFlag_UPDATE>:
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f06f 0201 	mvn.w	r2, #1
 8001baa:	611a      	str	r2, [r3, #16]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr

08001bb6 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bde:	e7fe      	b.n	8001bde <NMI_Handler+0x4>

08001be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <HardFault_Handler+0x4>

08001be6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <MemManage_Handler+0x4>

08001bec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <BusFault_Handler+0x4>

08001bf2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <UsageFault_Handler+0x4>

08001bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */



  /* USER CODE END EXTI4_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8001c2c:	2010      	movs	r0, #16
 8001c2e:	f7ff ff73 	bl	8001b18 <LL_EXTI_IsActiveFlag_0_31>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d015      	beq.n	8001c64 <EXTI4_IRQHandler+0x3c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8001c38:	2010      	movs	r0, #16
 8001c3a:	f7ff ff83 	bl	8001b44 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_4 */
    if(!isProcessing){
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <EXTI4_IRQHandler+0x40>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10e      	bne.n	8001c64 <EXTI4_IRQHandler+0x3c>
    	//UART2_TX_string("if ");
		//UART2_TX_string("\r\n");
    	//start Tim2//
    	TIM3->CNT = 0; //clear
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <EXTI4_IRQHandler+0x44>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	625a      	str	r2, [r3, #36]	; 0x24
    	LL_TIM_EnableCounter(TIM3); //CR1 register CEN bit (ENABLE)
 8001c4c:	4807      	ldr	r0, [pc, #28]	; (8001c6c <EXTI4_IRQHandler+0x44>)
 8001c4e:	f7ff ff87 	bl	8001b60 <LL_TIM_EnableCounter>
    	isProcessing=1;
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <EXTI4_IRQHandler+0x40>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
    	//call findCommonOnes function//
    	findCommonOnes(dotMatrixBoard_yellow, dotMatrixBoard_red, ROWS, COLS);
 8001c58:	2308      	movs	r3, #8
 8001c5a:	2208      	movs	r2, #8
 8001c5c:	4904      	ldr	r1, [pc, #16]	; (8001c70 <EXTI4_IRQHandler+0x48>)
 8001c5e:	4805      	ldr	r0, [pc, #20]	; (8001c74 <EXTI4_IRQHandler+0x4c>)
 8001c60:	f7ff fc00 	bl	8001464 <findCommonOnes>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200000a8 	.word	0x200000a8
 8001c6c:	40000400 	.word	0x40000400
 8001c70:	20000040 	.word	0x20000040
 8001c74:	20000000 	.word	0x20000000

08001c78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//UART2_TX_string("==tim3 interrupt. == \r\n");
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if (LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8001c7c:	4808      	ldr	r0, [pc, #32]	; (8001ca0 <TIM3_IRQHandler+0x28>)
 8001c7e:	f7ff ff9a 	bl	8001bb6 <LL_TIM_IsActiveFlag_UPDATE>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <TIM3_IRQHandler+0x22>
  {
	  //UART2_TX_string("tim3 interrupt(flag_update) ");
	  //UART2_TX_string("\r\n");
	  LL_TIM_ClearFlag_UPDATE(TIM3);  // interrupt flag clear
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <TIM3_IRQHandler+0x28>)
 8001c8a:	f7ff ff87 	bl	8001b9c <LL_TIM_ClearFlag_UPDATE>
	  LL_TIM_DisableCounter(TIM3);  // timer3 stop
 8001c8e:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <TIM3_IRQHandler+0x28>)
 8001c90:	f7ff ff75 	bl	8001b7e <LL_TIM_DisableCounter>
	  isProcessing = 0;
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <TIM3_IRQHandler+0x2c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END TIM3_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40000400 	.word	0x40000400
 8001ca4:	200000a8 	.word	0x200000a8

08001ca8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cb4:	f7ff fff8 	bl	8001ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb8:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cba:	490c      	ldr	r1, [pc, #48]	; (8001cec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cbc:	4a0c      	ldr	r2, [pc, #48]	; (8001cf0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc0:	e002      	b.n	8001cc8 <LoopCopyDataInit>

08001cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc6:	3304      	adds	r3, #4

08001cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ccc:	d3f9      	bcc.n	8001cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cce:	4a09      	ldr	r2, [pc, #36]	; (8001cf4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cd0:	4c09      	ldr	r4, [pc, #36]	; (8001cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd4:	e001      	b.n	8001cda <LoopFillZerobss>

08001cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd8:	3204      	adds	r2, #4

08001cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cdc:	d3fb      	bcc.n	8001cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cde:	f000 fd33 	bl	8002748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ce2:	f7fe fd19 	bl	8000718 <main>
  bx lr
 8001ce6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cec:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001cf0:	080027c8 	.word	0x080027c8
  ldr r2, =_sbss
 8001cf4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001cf8:	200000ac 	.word	0x200000ac

08001cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cfc:	e7fe      	b.n	8001cfc <ADC1_2_IRQHandler>
	...

08001d00 <LL_EXTI_EnableIT_0_31>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <LL_EXTI_EnableIT_0_31+0x20>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4904      	ldr	r1, [pc, #16]	; (8001d20 <LL_EXTI_EnableIT_0_31+0x20>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40010400 	.word	0x40010400

08001d24 <LL_EXTI_DisableIT_0_31>:
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <LL_EXTI_DisableIT_0_31+0x20>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	4903      	ldr	r1, [pc, #12]	; (8001d44 <LL_EXTI_DisableIT_0_31+0x20>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	40010400 	.word	0x40010400

08001d48 <LL_EXTI_EnableEvent_0_31>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	4904      	ldr	r1, [pc, #16]	; (8001d68 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40010400 	.word	0x40010400

08001d6c <LL_EXTI_DisableEvent_0_31>:
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <LL_EXTI_DisableEvent_0_31+0x20>)
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	4903      	ldr	r1, [pc, #12]	; (8001d8c <LL_EXTI_DisableEvent_0_31+0x20>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	604b      	str	r3, [r1, #4]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	40010400 	.word	0x40010400

08001d90 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	4904      	ldr	r1, [pc, #16]	; (8001db0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	608b      	str	r3, [r1, #8]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40010400 	.word	0x40010400

08001db4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	4903      	ldr	r1, [pc, #12]	; (8001dd4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	40010400 	.word	0x40010400

08001dd8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	4904      	ldr	r1, [pc, #16]	; (8001df8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	60cb      	str	r3, [r1, #12]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40010400 	.word	0x40010400

08001dfc <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	4903      	ldr	r1, [pc, #12]	; (8001e1c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	60cb      	str	r3, [r1, #12]
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	40010400 	.word	0x40010400

08001e20 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	791b      	ldrb	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d065      	beq.n	8001f00 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d06b      	beq.n	8001f14 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	795b      	ldrb	r3, [r3, #5]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d01c      	beq.n	8001e7e <LL_EXTI_Init+0x5e>
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	dc25      	bgt.n	8001e94 <LL_EXTI_Init+0x74>
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <LL_EXTI_Init+0x32>
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d00b      	beq.n	8001e68 <LL_EXTI_Init+0x48>
 8001e50:	e020      	b.n	8001e94 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff88 	bl	8001d6c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff4d 	bl	8001d00 <LL_EXTI_EnableIT_0_31>
          break;
 8001e66:	e018      	b.n	8001e9a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff59 	bl	8001d24 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff66 	bl	8001d48 <LL_EXTI_EnableEvent_0_31>
          break;
 8001e7c:	e00d      	b.n	8001e9a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff3c 	bl	8001d00 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff5b 	bl	8001d48 <LL_EXTI_EnableEvent_0_31>
          break;
 8001e92:	e002      	b.n	8001e9a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
          break;
 8001e98:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	799b      	ldrb	r3, [r3, #6]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d038      	beq.n	8001f14 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	799b      	ldrb	r3, [r3, #6]
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d01c      	beq.n	8001ee4 <LL_EXTI_Init+0xc4>
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	dc25      	bgt.n	8001efa <LL_EXTI_Init+0xda>
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d002      	beq.n	8001eb8 <LL_EXTI_Init+0x98>
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d00b      	beq.n	8001ece <LL_EXTI_Init+0xae>
 8001eb6:	e020      	b.n	8001efa <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff9d 	bl	8001dfc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ff62 	bl	8001d90 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001ecc:	e022      	b.n	8001f14 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ff6e 	bl	8001db4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff7b 	bl	8001dd8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001ee2:	e017      	b.n	8001f14 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff51 	bl	8001d90 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ff70 	bl	8001dd8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001ef8:	e00c      	b.n	8001f14 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
            break;
 8001efe:	e009      	b.n	8001f14 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff0d 	bl	8001d24 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff2c 	bl	8001d6c <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <LL_GPIO_SetPinMode>:
{
 8001f1e:	b490      	push	{r4, r7}
 8001f20:	b088      	sub	sp, #32
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	0e1b      	lsrs	r3, r3, #24
 8001f32:	4413      	add	r3, r2
 8001f34:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001f36:	6822      	ldr	r2, [r4, #0]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	613b      	str	r3, [r7, #16]
  return result;
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	210f      	movs	r1, #15
 8001f50:	fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	401a      	ands	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	61bb      	str	r3, [r7, #24]
  return result;
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	4313      	orrs	r3, r2
 8001f76:	6023      	str	r3, [r4, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc90      	pop	{r4, r7}
 8001f80:	4770      	bx	lr

08001f82 <LL_GPIO_SetPinSpeed>:
{
 8001f82:	b490      	push	{r4, r7}
 8001f84:	b088      	sub	sp, #32
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	461a      	mov	r2, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	0e1b      	lsrs	r3, r3, #24
 8001f96:	4413      	add	r3, r2
 8001f98:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001f9a:	6822      	ldr	r2, [r4, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	613b      	str	r3, [r7, #16]
  return result;
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	2103      	movs	r1, #3
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	401a      	ands	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	61bb      	str	r3, [r7, #24]
  return result;
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	6023      	str	r3, [r4, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	3720      	adds	r7, #32
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc90      	pop	{r4, r7}
 8001fe4:	4770      	bx	lr

08001fe6 <LL_GPIO_SetPinOutputType>:
{
 8001fe6:	b490      	push	{r4, r7}
 8001fe8:	b088      	sub	sp, #32
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	0e1b      	lsrs	r3, r3, #24
 8001ffa:	4413      	add	r3, r2
 8001ffc:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001ffe:	6822      	ldr	r2, [r4, #0]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	613b      	str	r3, [r7, #16]
  return result;
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	2104      	movs	r1, #4
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	401a      	ands	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	61bb      	str	r3, [r7, #24]
  return result;
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	fab3 f383 	clz	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	fa01 f303 	lsl.w	r3, r1, r3
 800203c:	4313      	orrs	r3, r2
 800203e:	6023      	str	r3, [r4, #0]
}
 8002040:	bf00      	nop
 8002042:	3720      	adds	r7, #32
 8002044:	46bd      	mov	sp, r7
 8002046:	bc90      	pop	{r4, r7}
 8002048:	4770      	bx	lr

0800204a <LL_GPIO_SetPinPull>:
{
 800204a:	b480      	push	{r7}
 800204c:	b087      	sub	sp, #28
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	43db      	mvns	r3, r3
 8002060:	401a      	ands	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	613b      	str	r3, [r7, #16]
  return result;
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	4619      	mov	r1, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	408b      	lsls	r3, r1
 800207e:	431a      	orrs	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	60da      	str	r2, [r3, #12]
}
 8002084:	bf00      	nop
 8002086:	371c      	adds	r7, #28
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr

0800208e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b088      	sub	sp, #32
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	0c1b      	lsrs	r3, r3, #16
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	60fb      	str	r3, [r7, #12]
  return result;
 80020ae:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80020b0:	fab3 f383 	clz	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80020b8:	e044      	b.n	8002144 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80020ba:	2201      	movs	r2, #1
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	409a      	lsls	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d03a      	beq.n	800213e <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	2b07      	cmp	r3, #7
 80020cc:	d806      	bhi.n	80020dc <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80020ce:	f240 1201 	movw	r2, #257	; 0x101
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	e008      	b.n	80020ee <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	3b08      	subs	r3, #8
 80020e0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020ec:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d106      	bne.n	8002104 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	461a      	mov	r2, r3
 80020fc:	69b9      	ldr	r1, [r7, #24]
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ffa3 	bl	800204a <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	461a      	mov	r2, r3
 800210a:	69b9      	ldr	r1, [r7, #24]
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff06 	bl	8001f1e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d003      	beq.n	8002122 <LL_GPIO_Init+0x94>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b09      	cmp	r3, #9
 8002120:	d10d      	bne.n	800213e <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	461a      	mov	r2, r3
 8002128:	69b9      	ldr	r1, [r7, #24]
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ff29 	bl	8001f82 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	461a      	mov	r2, r3
 8002136:	69b9      	ldr	r1, [r7, #24]
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff54 	bl	8001fe6 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3301      	adds	r3, #1
 8002142:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1b4      	bne.n	80020ba <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <LL_RCC_GetSysClkSource>:
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <LL_RCC_GetSysClkSource+0x14>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 030c 	and.w	r3, r3, #12
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	40021000 	.word	0x40021000

08002174 <LL_RCC_GetAHBPrescaler>:
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <LL_RCC_GetAHBPrescaler+0x14>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	40021000 	.word	0x40021000

0800218c <LL_RCC_GetAPB1Prescaler>:
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	40021000 	.word	0x40021000

080021a4 <LL_RCC_GetAPB2Prescaler>:
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <LL_RCC_GetAPB2Prescaler+0x14>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	40021000 	.word	0x40021000

080021bc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <LL_RCC_PLL_GetMainSource+0x14>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	40021000 	.word	0x40021000

080021d4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	40021000 	.word	0x40021000

080021ec <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <LL_RCC_PLL_GetPrediv+0x18>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	0c5b      	lsrs	r3, r3, #17
 80021f6:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000

08002208 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002210:	f000 f820 	bl	8002254 <RCC_GetSystemClockFreq>
 8002214:	4602      	mov	r2, r0
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f83e 	bl	80022a0 <RCC_GetHCLKClockFreq>
 8002224:	4602      	mov	r2, r0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 f84c 	bl	80022cc <RCC_GetPCLK1ClockFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f858 	bl	80022f4 <RCC_GetPCLK2ClockFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60da      	str	r2, [r3, #12]
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800225e:	f7ff ff7d 	bl	800215c <LL_RCC_GetSysClkSource>
 8002262:	4603      	mov	r3, r0
 8002264:	2b08      	cmp	r3, #8
 8002266:	d00c      	beq.n	8002282 <RCC_GetSystemClockFreq+0x2e>
 8002268:	2b08      	cmp	r3, #8
 800226a:	d80e      	bhi.n	800228a <RCC_GetSystemClockFreq+0x36>
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <RCC_GetSystemClockFreq+0x22>
 8002270:	2b04      	cmp	r3, #4
 8002272:	d003      	beq.n	800227c <RCC_GetSystemClockFreq+0x28>
 8002274:	e009      	b.n	800228a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <RCC_GetSystemClockFreq+0x48>)
 8002278:	607b      	str	r3, [r7, #4]
      break;
 800227a:	e009      	b.n	8002290 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800227c:	4b07      	ldr	r3, [pc, #28]	; (800229c <RCC_GetSystemClockFreq+0x48>)
 800227e:	607b      	str	r3, [r7, #4]
      break;
 8002280:	e006      	b.n	8002290 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002282:	f000 f84b 	bl	800231c <RCC_PLL_GetFreqDomain_SYS>
 8002286:	6078      	str	r0, [r7, #4]
      break;
 8002288:	e002      	b.n	8002290 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800228a:	4b04      	ldr	r3, [pc, #16]	; (800229c <RCC_GetSystemClockFreq+0x48>)
 800228c:	607b      	str	r3, [r7, #4]
      break;
 800228e:	bf00      	nop
  }

  return frequency;
 8002290:	687b      	ldr	r3, [r7, #4]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	007a1200 	.word	0x007a1200

080022a0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80022a8:	f7ff ff64 	bl	8002174 <LL_RCC_GetAHBPrescaler>
 80022ac:	4603      	mov	r3, r0
 80022ae:	091b      	lsrs	r3, r3, #4
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <RCC_GetHCLKClockFreq+0x28>)
 80022b6:	5cd3      	ldrb	r3, [r2, r3]
 80022b8:	461a      	mov	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	40d3      	lsrs	r3, r2
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	080027a8 	.word	0x080027a8

080022cc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80022d4:	f7ff ff5a 	bl	800218c <LL_RCC_GetAPB1Prescaler>
 80022d8:	4603      	mov	r3, r0
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <RCC_GetPCLK1ClockFreq+0x24>)
 80022de:	5cd3      	ldrb	r3, [r2, r3]
 80022e0:	461a      	mov	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	40d3      	lsrs	r3, r2
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	080027b8 	.word	0x080027b8

080022f4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80022fc:	f7ff ff52 	bl	80021a4 <LL_RCC_GetAPB2Prescaler>
 8002300:	4603      	mov	r3, r0
 8002302:	0adb      	lsrs	r3, r3, #11
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <RCC_GetPCLK2ClockFreq+0x24>)
 8002306:	5cd3      	ldrb	r3, [r2, r3]
 8002308:	461a      	mov	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	40d3      	lsrs	r3, r2
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	080027b8 	.word	0x080027b8

0800231c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	2300      	movs	r3, #0
 8002328:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800232a:	f7ff ff47 	bl	80021bc <LL_RCC_PLL_GetMainSource>
 800232e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d004      	beq.n	8002340 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233c:	d003      	beq.n	8002346 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800233e:	e00b      	b.n	8002358 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002340:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002342:	607b      	str	r3, [r7, #4]
      break;
 8002344:	e00b      	b.n	800235e <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8002346:	f7ff ff51 	bl	80021ec <LL_RCC_PLL_GetPrediv>
 800234a:	4603      	mov	r3, r0
 800234c:	3301      	adds	r3, #1
 800234e:	4a0b      	ldr	r2, [pc, #44]	; (800237c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	607b      	str	r3, [r7, #4]
      break;
 8002356:	e002      	b.n	800235e <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800235a:	607b      	str	r3, [r7, #4]
      break;
 800235c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800235e:	f7ff ff39 	bl	80021d4 <LL_RCC_PLL_GetMultiplicator>
 8002362:	4603      	mov	r3, r0
 8002364:	0c9b      	lsrs	r3, r3, #18
 8002366:	3302      	adds	r3, #2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	fb02 f303 	mul.w	r3, r2, r3
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	003d0900 	.word	0x003d0900
 800237c:	007a1200 	.word	0x007a1200

08002380 <LL_TIM_SetPrescaler>:
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <LL_TIM_SetAutoReload>:
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <LL_TIM_SetRepetitionCounter>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f043 0201 	orr.w	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	615a      	str	r2, [r3, #20]
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a27      	ldr	r2, [pc, #156]	; (800249c <LL_TIM_Init+0xb0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d00b      	beq.n	800241c <LL_TIM_Init+0x30>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240a:	d007      	beq.n	800241c <LL_TIM_Init+0x30>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a24      	ldr	r2, [pc, #144]	; (80024a0 <LL_TIM_Init+0xb4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d003      	beq.n	800241c <LL_TIM_Init+0x30>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <LL_TIM_Init+0xb8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d106      	bne.n	800242a <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4313      	orrs	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a1b      	ldr	r2, [pc, #108]	; (800249c <LL_TIM_Init+0xb0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00b      	beq.n	800244a <LL_TIM_Init+0x5e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002438:	d007      	beq.n	800244a <LL_TIM_Init+0x5e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a18      	ldr	r2, [pc, #96]	; (80024a0 <LL_TIM_Init+0xb4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d003      	beq.n	800244a <LL_TIM_Init+0x5e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a17      	ldr	r2, [pc, #92]	; (80024a4 <LL_TIM_Init+0xb8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d106      	bne.n	8002458 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	4619      	mov	r1, r3
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff98 	bl	800239a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	4619      	mov	r1, r3
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ff85 	bl	8002380 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a08      	ldr	r2, [pc, #32]	; (800249c <LL_TIM_Init+0xb0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d105      	bne.n	800248a <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	4619      	mov	r1, r3
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff ff95 	bl	80023b4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ff9f 	bl	80023ce <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40012c00 	.word	0x40012c00
 80024a0:	40000400 	.word	0x40000400
 80024a4:	40000800 	.word	0x40000800

080024a8 <LL_USART_IsEnabled>:
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024bc:	bf0c      	ite	eq
 80024be:	2301      	moveq	r3, #1
 80024c0:	2300      	movne	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <LL_USART_SetStopBitsLength>:
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	611a      	str	r2, [r3, #16]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <LL_USART_SetHWFlowCtrl>:
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	615a      	str	r2, [r3, #20]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
	...

08002518 <LL_USART_SetBaudRate>:
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	009a      	lsls	r2, r3, #2
 800252e:	441a      	add	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	fbb2 f3f3 	udiv	r3, r2, r3
 8002538:	4a25      	ldr	r2, [pc, #148]	; (80025d0 <LL_USART_SetBaudRate+0xb8>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	b29b      	uxth	r3, r3
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	b299      	uxth	r1, r3
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	009a      	lsls	r2, r3, #2
 8002550:	441a      	add	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	fbb2 f2f3 	udiv	r2, r2, r3
 800255a:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <LL_USART_SetBaudRate+0xb8>)
 800255c:	fba3 0302 	umull	r0, r3, r3, r2
 8002560:	095b      	lsrs	r3, r3, #5
 8002562:	2064      	movs	r0, #100	; 0x64
 8002564:	fb00 f303 	mul.w	r3, r0, r3
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	3332      	adds	r3, #50	; 0x32
 800256e:	4a18      	ldr	r2, [pc, #96]	; (80025d0 <LL_USART_SetBaudRate+0xb8>)
 8002570:	fba2 2303 	umull	r2, r3, r2, r3
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	b29b      	uxth	r3, r3
 8002578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800257c:	b29b      	uxth	r3, r3
 800257e:	440b      	add	r3, r1
 8002580:	b299      	uxth	r1, r3
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	009a      	lsls	r2, r3, #2
 800258c:	441a      	add	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	fbb2 f2f3 	udiv	r2, r2, r3
 8002596:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <LL_USART_SetBaudRate+0xb8>)
 8002598:	fba3 0302 	umull	r0, r3, r3, r2
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	2064      	movs	r0, #100	; 0x64
 80025a0:	fb00 f303 	mul.w	r3, r0, r3
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	3332      	adds	r3, #50	; 0x32
 80025aa:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <LL_USART_SetBaudRate+0xb8>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	095b      	lsrs	r3, r3, #5
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	440b      	add	r3, r1
 80025bc:	b29b      	uxth	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	609a      	str	r2, [r3, #8]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	51eb851f 	.word	0x51eb851f

080025d4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ff5e 	bl	80024a8 <LL_USART_IsEnabled>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d145      	bne.n	800267e <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025fa:	f023 030c 	bic.w	r3, r3, #12
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	6851      	ldr	r1, [r2, #4]
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	68d2      	ldr	r2, [r2, #12]
 8002606:	4311      	orrs	r1, r2
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	6912      	ldr	r2, [r2, #16]
 800260c:	430a      	orrs	r2, r1
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4619      	mov	r1, r3
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ff57 	bl	80024ce <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	4619      	mov	r1, r3
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff ff63 	bl	80024f2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800262c:	f107 0308 	add.w	r3, r7, #8
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fde9 	bl	8002208 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a13      	ldr	r2, [pc, #76]	; (8002688 <LL_USART_Init+0xb4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d102      	bne.n	8002644 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	e00c      	b.n	800265e <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a11      	ldr	r2, [pc, #68]	; (800268c <LL_USART_Init+0xb8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d102      	bne.n	8002652 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	61bb      	str	r3, [r7, #24]
 8002650:	e005      	b.n	800265e <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a0e      	ldr	r2, [pc, #56]	; (8002690 <LL_USART_Init+0xbc>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d101      	bne.n	800265e <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00c      	beq.n	800267e <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 800266c:	2300      	movs	r3, #0
 800266e:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002674:	461a      	mov	r2, r3
 8002676:	69b9      	ldr	r1, [r7, #24]
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ff4d 	bl	8002518 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800267e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3720      	adds	r7, #32
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40013800 	.word	0x40013800
 800268c:	40004400 	.word	0x40004400
 8002690:	40004800 	.word	0x40004800

08002694 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a6:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <LL_InitTick+0x30>)
 80026a8:	3b01      	subs	r3, #1
 80026aa:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <LL_InitTick+0x30>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b2:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <LL_InitTick+0x30>)
 80026b4:	2205      	movs	r2, #5
 80026b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000e010 	.word	0xe000e010

080026c8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80026d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff ffdd 	bl	8002694 <LL_InitTick>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80026ec:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <LL_mDelay+0x44>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80026f2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fa:	d00c      	beq.n	8002716 <LL_mDelay+0x32>
  {
    Delay++;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3301      	adds	r3, #1
 8002700:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002702:	e008      	b.n	8002716 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <LL_mDelay+0x44>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <LL_mDelay+0x32>
    {
      Delay--;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f3      	bne.n	8002704 <LL_mDelay+0x20>
    }
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr
 8002728:	e000e010 	.word	0xe000e010

0800272c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002734:	4a03      	ldr	r2, [pc, #12]	; (8002744 <LL_SetSystemCoreClock+0x18>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6013      	str	r3, [r2, #0]
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	20000080 	.word	0x20000080

08002748 <__libc_init_array>:
 8002748:	b570      	push	{r4, r5, r6, lr}
 800274a:	2600      	movs	r6, #0
 800274c:	4d0c      	ldr	r5, [pc, #48]	; (8002780 <__libc_init_array+0x38>)
 800274e:	4c0d      	ldr	r4, [pc, #52]	; (8002784 <__libc_init_array+0x3c>)
 8002750:	1b64      	subs	r4, r4, r5
 8002752:	10a4      	asrs	r4, r4, #2
 8002754:	42a6      	cmp	r6, r4
 8002756:	d109      	bne.n	800276c <__libc_init_array+0x24>
 8002758:	f000 f81a 	bl	8002790 <_init>
 800275c:	2600      	movs	r6, #0
 800275e:	4d0a      	ldr	r5, [pc, #40]	; (8002788 <__libc_init_array+0x40>)
 8002760:	4c0a      	ldr	r4, [pc, #40]	; (800278c <__libc_init_array+0x44>)
 8002762:	1b64      	subs	r4, r4, r5
 8002764:	10a4      	asrs	r4, r4, #2
 8002766:	42a6      	cmp	r6, r4
 8002768:	d105      	bne.n	8002776 <__libc_init_array+0x2e>
 800276a:	bd70      	pop	{r4, r5, r6, pc}
 800276c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002770:	4798      	blx	r3
 8002772:	3601      	adds	r6, #1
 8002774:	e7ee      	b.n	8002754 <__libc_init_array+0xc>
 8002776:	f855 3b04 	ldr.w	r3, [r5], #4
 800277a:	4798      	blx	r3
 800277c:	3601      	adds	r6, #1
 800277e:	e7f2      	b.n	8002766 <__libc_init_array+0x1e>
 8002780:	080027c0 	.word	0x080027c0
 8002784:	080027c0 	.word	0x080027c0
 8002788:	080027c0 	.word	0x080027c0
 800278c:	080027c4 	.word	0x080027c4

08002790 <_init>:
 8002790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002792:	bf00      	nop
 8002794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002796:	bc08      	pop	{r3}
 8002798:	469e      	mov	lr, r3
 800279a:	4770      	bx	lr

0800279c <_fini>:
 800279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279e:	bf00      	nop
 80027a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a2:	bc08      	pop	{r3}
 80027a4:	469e      	mov	lr, r3
 80027a6:	4770      	bx	lr
